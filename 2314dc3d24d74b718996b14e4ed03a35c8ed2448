{
  "comments": [
    {
      "key": {
        "uuid": "c465452b_d77bbec9",
        "filename": "libc/bionic/fork.cpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-06-20T01:15:01Z",
      "side": 1,
      "message": "I know this is incredibly anal, but to you want to make this an atomic operation? I think this is going to be atomic no matter what, but maybe it should be explicit so there is no chance that someone will be able to get a half set value.",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 32
      },
      "revId": "2314dc3d24d74b718996b14e4ed03a35c8ed2448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c465452b_37f67274",
        "filename": "libc/bionic/pthread_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2014-06-20T00:56:14Z",
      "side": 1,
      "message": "Maybe name it _cached_pid to make that more clear? Don\u0027t know if we follow that style in bionic.",
      "revId": "2314dc3d24d74b718996b14e4ed03a35c8ed2448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44079552_53999661",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 419,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-06-20T01:15:01Z",
      "side": 1,
      "message": "Did you verify that if GetPidCachingHelperHelper fails, the test actually fails? I suspect it might not since if you assert in a pthread, that thread prints something out and dies, but I think the thread still winds up returning NULL.",
      "range": {
        "startLine": 419,
        "startChar": 40,
        "endLine": 419,
        "endChar": 59
      },
      "revId": "2314dc3d24d74b718996b14e4ed03a35c8ed2448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}