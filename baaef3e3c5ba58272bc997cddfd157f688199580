{
  "comments": [
    {
      "key": {
        "uuid": "7ec63e43_18fce883",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "All of this needs to be merged with the new code, and it needs to support the ability to move to scudo easily.",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "027abb89_faa20da7",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Done. Migration to Scudo should be easy (two line change, as documented). Also removed part of the comment that was out of date (the comment about removing the defaults in libc_scudo, as we now use libscudo from //external/scudo, not libc_scudo from toolchain). We should probably remove libc_scudo, as the toolchain scudo shouldn\u0027t ever be used.",
      "parentUuid": "7ec63e43_18fce883",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c819ec1_52e20978",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1654,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "This name is kind of weird, so it should be something like:\n\nlibc_malloc",
      "range": {
        "startLine": 1654,
        "startChar": 11,
        "endLine": 1654,
        "endChar": 43
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40f825a7_caee669d",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1654,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c819ec1_52e20978",
      "range": {
        "startLine": 1654,
        "startChar": 11,
        "endLine": 1654,
        "endChar": 43
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0782974_963f238c",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1673,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "Should be a name like:\n\nlibc_malloc_shared",
      "range": {
        "startLine": 1673,
        "startChar": 11,
        "endLine": 1673,
        "endChar": 41
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "124abbcf_47d42ff4",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1673,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0782974_963f238c",
      "range": {
        "startLine": 1673,
        "startChar": 11,
        "endLine": 1673,
        "endChar": 41
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afee3e58_2d1fcb1d",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1681,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "Should be name like:\n\nlibc_malloc_static",
      "range": {
        "startLine": 1681,
        "startChar": 11,
        "endLine": 1681,
        "endChar": 41
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15a778cd_28e32736",
        "filename": "libc/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 1681,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afee3e58_2d1fcb1d",
      "range": {
        "startLine": 1681,
        "startChar": 11,
        "endLine": 1681,
        "endChar": 41
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6264d96a_98a2c99d",
        "filename": "libc/bionic/gwp_asan/wrappers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "Is there a reason you created these two files (header, source) in a separate directory for a single function that is only used once? Also why add a namespace, the place where this is used could be a simple static function in the file where it is used. It seems like overkill unless maybe you expect more code to be added over time.",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 11,
        "endChar": 1
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2147ba88_f0a95fde",
        "filename": "libc/bionic/gwp_asan/wrappers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "I was expecting more code over time (for backtrace/backtrace print wrappers for GWP-ASan), but a crash handler change upstream is making both these no longer relevant, have moved into where it\u0027s used.",
      "parentUuid": "6264d96a_98a2c99d",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 11,
        "endChar": 1
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "029ab10d_4f7199a2",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "If you enable gwp_asan, how does it interact with the limit code and the perfetto code? How did you test that they don\u0027t interact poorly?",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 30
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e100af03_da74a2d1",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Happy to test - I don\u0027t see any instructions at https://android.googlesource.com/platform/bionic/+/master/docs/native_allocator.md. Do you have anything in particular you\u0027re looking for?",
      "parentUuid": "029ab10d_4f7199a2",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 30
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d818759_0b790d16",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-30T01:35:46Z",
      "side": 1,
      "message": "There is nothing specific called out, but if you enable gwp-asan, do bionic unit tests pass? I suspect that the android_mallopt.* tests are the ones that might fail. But you can see that if you bypass the calls, that functionality will no longer work.\n\nAlso, if you enable gwp_asan and then run the perfetto integration tests. external/perfetto is where the code lives.\n\nNeither of these are features of a native allocator, but are features that live above the native allocator and built on top of them, so that document doesn\u0027t really apply.\n\nI\u0027m not sure if these features can coexist with gwp_asan, but the limit functionality is enabled for a few processes as a security feature.",
      "parentUuid": "e100af03_da74a2d1",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 30
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a67895c_ad2b829e",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 287,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "What does it mean if gwp_asan is enabled and a call is made to malloc_iterate? Does it simply cause this to fail? Does it crash? There should be a comment describing how gwp_asan interacts with these functions.",
      "range": {
        "startLine": 287,
        "startChar": 2,
        "endLine": 287,
        "endChar": 59
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23677cb6_8ae0bfd4",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 287,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "With this patchset GWP-ASan is *never* enabled, so nothing bad can happen.\n\nIf you were to enable GWP-ASan, and use libmemunreachable, malloc_iterate for GWP-ASan allocations will never execute the callback (i.e. you\u0027ll get false positive leaks). Good news - we have implemented this behaviour (aosp/1218941), so it won\u0027t be a problem now even if you turn GWP-ASan on.\n\nEdit: I just noticed that our implementation returns void. What is malloc_iterate supposed to return? jemalloc always returns zero, so I\u0027ve just done that here...",
      "parentUuid": "9a67895c_ad2b829e",
      "range": {
        "startLine": 287,
        "startChar": 2,
        "endLine": 287,
        "endChar": 59
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4557b27_40548a38",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 5
      },
      "lineNbr": 287,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-30T01:35:46Z",
      "side": 1,
      "message": "0 means no error, non-zero is an error, but the non-zero errors that could be returned don\u0027t have much meaning. In other words, returning 1 or 100 is still an error, and it won\u0027t be treated like an errno value.",
      "parentUuid": "23677cb6_8ae0bfd4",
      "range": {
        "startLine": 287,
        "startChar": 2,
        "endLine": 287,
        "endChar": 59
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90f00fd1_5bc0ecdc",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 394,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "If you move this to the malloc_common_dynamic.cpp (even if you don\u0027t do dynamic initialization), then you only need to add a InitGwpAsan in the header, and remove the references to the gwp_asan code. It would also centralize all gwp_asan code into one file.",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 394,
        "endChar": 1
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1fed786_07dd6d45",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 394,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "Assuming /s/malloc_common_dynamic.cpp/malloc_common.cpp, done.\n\nWe will likely need to add `GetGuardedAllocator()` back at some point to expose it to debuggerd in-proc handler (to be sent to tombstoned via. ioctl), but we\u0027ll leave that for later.",
      "parentUuid": "90f00fd1_5bc0ecdc",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 394,
        "endChar": 1
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ef35ee0_82ac6df4",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 394,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-30T01:35:46Z",
      "side": 1,
      "message": "Oops, yes move to malloc_common.cpp.",
      "parentUuid": "e1fed786_07dd6d45",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 394,
        "endChar": 1
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f165890_2b252f50",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 412,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-29T17:45:01Z",
      "side": 1,
      "message": "Is there any way to make this a lazy initialization? It seems unnecessary to init this in every process, when it\u0027s very unlikely to be used.",
      "range": {
        "startLine": 409,
        "startChar": 1,
        "endLine": 412,
        "endChar": 18
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2e42de_60f941e4",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 412,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-01-29T21:58:22Z",
      "side": 1,
      "message": "GWP-ASan doesn\u0027t currently allow for lazy-initialisation - we can think about adding this feature if necessary (but would still be required to be inited before any threads are spawned). It\u0027s likely we\u0027ll need to do this before enabling to allow sampling in the zygote.\n\nFor now - can we simply init here? The cost of initialising GWP-ASan is near zero in always-disabled mode.",
      "parentUuid": "8f165890_2b252f50",
      "range": {
        "startLine": 409,
        "startChar": 1,
        "endLine": 412,
        "endChar": 18
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c9d0298_0ebaec9a",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 5
      },
      "lineNbr": 412,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-30T01:35:46Z",
      "side": 1,
      "message": "That seems fine, do you know how non-zero? Is it in the nanosecond or microseconds range? I think anything sub millisecond is probably fine, but it does add cost to process start-up.",
      "parentUuid": "4b2e42de_60f941e4",
      "range": {
        "startLine": 409,
        "startChar": 1,
        "endLine": 412,
        "endChar": 18
      },
      "revId": "baaef3e3c5ba58272bc997cddfd157f688199580",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}