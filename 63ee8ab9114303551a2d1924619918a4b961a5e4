{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "04997c61_4a05b73a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-11-27T19:40:15Z",
      "side": 1,
      "message": "(lgtm, though i suspect we\u0027ll want to just disable this globally?)",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72504c47_874f617d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-11-27T19:42:04Z",
      "side": 1,
      "message": "(the thing that i always find unfortunate with diagnostics like these is that whether or not they\u0027re useful is usually a property of the struct itself. it would be better to have had something like the `warn_unused` attribute that applies to struct fields rather than function return values, if you ask me.)",
      "parentUuid": "04997c61_4a05b73a",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dca45ee_5e857dc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1978766
      },
      "writtenOn": "2023-11-28T23:00:18Z",
      "side": 1,
      "message": "\u003e (lgtm, though i suspect we\u0027ll want to just disable this globally?)\n\nso far (in a broken build) i only found this in bionic. but if this warning comes up in other places we can disable it globally.",
      "parentUuid": "72504c47_874f617d",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f13899_12771611",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-11-28T23:38:22Z",
      "side": 1,
      "message": "did you try `make -k`? i\u0027m pretty sure the last person to try this found it all over the tree...",
      "parentUuid": "2dca45ee_5e857dc3",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3079d9c_66fa921b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1978766
      },
      "writtenOn": "2023-11-29T05:43:17Z",
      "side": 1,
      "message": "Ah i didn\u0027t know that someone attempted to run this before. I only started seeing this while trying the latest clang. https://android-review.git.corp.google.com/c/platform/build/soong/+/2804373.\n\nhttps://reviews.llvm.org/D157879 is likely the patch that is now triggering these new warnings.",
      "parentUuid": "04f13899_12771611",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "569bdea9_7009057f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-11-29T15:26:11Z",
      "side": 1,
      "message": "from the comments on the patch it sounds like fuschia has similar feelings: \"It\u0027s an unfortunate configuration. We saw this in Chrome where some projects were manually setting -Wmissing-field-initializers, but when building for Fuchsia, some Fuchsia system headers had this code. We can just suppress this for all Fuchsia builds, I think that\u0027s fine.\"\n\nit\u0027s a shame, because i think this would have been useful (a) as a [[warn_unused]]-type attribute on an individual struct or (b) if it automatically applied to non-POD types (but not to POD types) or even (c) if there was a [[ignore_unused]] we could apply to [almost] all the types in the libc headers. but as it is, it just doesn\u0027t seem useful.",
      "parentUuid": "f3079d9c_66fa921b",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "110b05da_ae5cae53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-11-29T15:28:47Z",
      "side": 1,
      "message": "(because wrt \"Ah i didn\u0027t know that someone attempted to run this before\" the problem is that it\u0027s not just bionic that gets this spam --- it\u0027s basically any code that uses bionic\u0027s structs. that\u0027s what i mean about this would have made more sense as a per-struct attribute. the whole \"`{ .foo \u003d 123 }` automatically zeros any other fields\" feature was added to the language because it\u0027s _such_ a useful idiom for so many libc structs!)",
      "parentUuid": "569bdea9_7009057f",
      "revId": "63ee8ab9114303551a2d1924619918a4b961a5e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}