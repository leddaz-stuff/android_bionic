{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7f483ce5_9be9e0e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-01-04T19:03:30Z",
      "side": 1,
      "message": "The presubmit errors are due to some CLs like aosp/2896122 which have not automerged to internal yet.",
      "revId": "0a6cfe992e3eb5492d8749a2b579932c00073a01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3599671b_f1b94c18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-04T19:58:18Z",
      "side": 1,
      "message": "+ccross ... are these really needed? this seems unlikely, unless it\u0027s working around a bug in the build system?",
      "revId": "0a6cfe992e3eb5492d8749a2b579932c00073a01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf88c9e6_eb1119c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-01-04T21:51:43Z",
      "side": 1,
      "message": "Hi Elliott, could you elaborate on which of these libraries seem suspicious to you from an apex_available perspective? Currently, Soong makes them available to `com.android.runtime` implicitly using this [map](https://source.corp.google.com/h/googleplex-android/platform/build/soong/+/0413492a5db2fb8adb5e4121213fac162db29f16:apex/apex.go;l\u003d2856-2873;drc\u003d69d083a065180280f8473663c195210dd4b9c3a9;bpv\u003d1;bpt\u003d0). This CL makes them explicit in Android.bp\n\nAs a concrete example, this CL adds `apex_available: [com.android.runtime]` to `liblinker_main`. This soong module is part of the runtime apex via this dependency chain\n\n```\ncom.android.runtime --(binary)--\u003e linker --(static_lib)--\u003e liblinker_main\n```",
      "parentUuid": "3599671b_f1b94c18",
      "revId": "0a6cfe992e3eb5492d8749a2b579932c00073a01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c29d13d8_55000379",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-04T21:55:32Z",
      "side": 1,
      "message": "oh, yeah, that\u0027s why i\u0027ve been +2ing all these changes without paying much attention. but this one is bizarre, and seems like a build system bug? sure, _every_ binary \"depends\" on the linker, but not in _this_ sense. (and why would this only affect com.android.runtime?! that can\u0027t be the only apex with an executable in it, surely?)",
      "parentUuid": "cf88c9e6_eb1119c0",
      "revId": "0a6cfe992e3eb5492d8749a2b579932c00073a01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d9e0bc_eafe7467",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-01-04T23:02:23Z",
      "side": 1,
      "message": "Ohh I see what you mean. I would like Colin\u0027s opinion as well, but I think this is WAI. `apex_available` indicates availability for being _included_ in an apex, and not a transitive dependency at runtime\n\nFrom go/Android.bp\n```\napex_available list of string, Availability of this module in APEXes. Only the listed APEXes can contain this module. If the module has stubs then other APEXes and the platform may access it through them (subject to visibility). \"//apex_available:anyapex\" is a pseudo APEX name that matches to any APEX. \"//apex_available:platform\" refers to non-APEX partitions like \"system.img\". \"com.android.gki.*\" matches any APEX module name with the prefix \"com.android.gki.\". Default is [\"//apex_available:platform\"].\n\n```\n\nEven though we have other native apexes with binaries and those binaries transitively depend on these libraries, none of these libraries are actually installed into those apexes. So, I believe it is appropriate for `libblinker_main` and co. to not have any of those other apexes in its apex_available",
      "parentUuid": "c29d13d8_55000379",
      "revId": "0a6cfe992e3eb5492d8749a2b579932c00073a01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}