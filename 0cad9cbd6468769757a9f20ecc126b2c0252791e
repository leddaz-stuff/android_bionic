{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18d43d24_91679007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2024-07-30T18:20:31Z",
      "side": 1,
      "message": "There are build failures, but I don\u0027t think they are related to this change.",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbaa7eeb_b5fa02bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-30T19:34:39Z",
      "side": 1,
      "message": "no, they seem legit:\n```\nld.lld: error: undefined symbol: strerrorname_np\n```\nfor values of \"legit\" that include \"we said don\u0027t call this unless you\u0027re building for a high enough target api level, but you called it and then complained it wouldn\u0027t link\".\n\ni think we were getting away with this before because the macro name was wrong, so the condition was always false, so we never compiled this path. but i don\u0027t understand _why_ we seem to have a target api vs linked-against-libraries discrepancy here...\n\nthough it\u0027s probably something to do with\n```\n-target aarch64-linux-android10000\n```\nand/or the many mentions of \"vendor\" here.\n\n+ccross?",
      "parentUuid": "18d43d24_91679007",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04f0f74_e727cfff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2024-07-31T05:33:12Z",
      "side": 1,
      "message": "The failing build is the vendor variant.  It is linking against the vendor variant of libc, which is stubs built from `out/soong/.intermediates/bionic/libc/libc/android_vendor_arm64_armv8-a_cortex-a53_shared/gen/stub.map`.  That file doesn\u0027t mention `strerrorname_np`, but the non-vendor stubs do.  The vendor stubs are built with `--api 202504`, which seems to come from the `BOARD_API_LEVEL` value.",
      "parentUuid": "fbaa7eeb_b5fa02bf",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "422fc39f_1c794b46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-31T18:40:28Z",
      "side": 1,
      "message": "+jiyong for whether that\u0027s expected, or another artifact of \"35 isn\u0027t in AOSP yet\". (i\u0027m surprised that\u0027s 202*five*04, not 202*four*04? surely _next year\u0027s_ abi should include this year\u0027s abi?)",
      "parentUuid": "f04f0f74_e727cfff",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4254afa5_d6ae2f98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-07-31T23:18:02Z",
      "side": 1,
      "message": "BOARD_API_LEVEL being 202504 is as expected for the trunk_staging release config because 202404 was already released and trunk_staging is future facing.\n\nWhat\u0027s not expected is the absence of strerrorname_np in the vendor-side stub.\n\nCan you try again after experimentally adding (not replacing the existing one) `strerrorname_np; # llndk\u003d202504` (or `llndk\u003d202404`) to the map.txt file? That may reveal what went wrong.\n\ncc: @justinyun@google.com",
      "parentUuid": "422fc39f_1c794b46",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e28bd8_1ab8188d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-08-01T01:26:17Z",
      "side": 1,
      "message": "Since API level 35, symbols are not added to LLNDK automatically. They must be explicitly tagged with `llndk\u003d\u003cvendor api level\u003e` as Jiyong commented. See aosp/2997316 and this doc: https://docs.google.com/document/d/1r7H3fWQfPmIBPgREhpNAImGbK1mVXm3PpxNCE9h-Z6g/edit?resourcekey\u003d0-A3r_kSp8feBDLVthm2uy6g\u0026tab\u003dt.0#heading\u003dh.wke4uaif5p5z",
      "parentUuid": "4254afa5_d6ae2f98",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}