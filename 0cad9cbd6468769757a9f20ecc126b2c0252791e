{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18d43d24_91679007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2024-07-30T18:20:31Z",
      "side": 1,
      "message": "There are build failures, but I don\u0027t think they are related to this change.",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbaa7eeb_b5fa02bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-30T19:34:39Z",
      "side": 1,
      "message": "no, they seem legit:\n```\nld.lld: error: undefined symbol: strerrorname_np\n```\nfor values of \"legit\" that include \"we said don\u0027t call this unless you\u0027re building for a high enough target api level, but you called it and then complained it wouldn\u0027t link\".\n\ni think we were getting away with this before because the macro name was wrong, so the condition was always false, so we never compiled this path. but i don\u0027t understand _why_ we seem to have a target api vs linked-against-libraries discrepancy here...\n\nthough it\u0027s probably something to do with\n```\n-target aarch64-linux-android10000\n```\nand/or the many mentions of \"vendor\" here.\n\n+ccross?",
      "parentUuid": "18d43d24_91679007",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04f0f74_e727cfff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2024-07-31T05:33:12Z",
      "side": 1,
      "message": "The failing build is the vendor variant.  It is linking against the vendor variant of libc, which is stubs built from `out/soong/.intermediates/bionic/libc/libc/android_vendor_arm64_armv8-a_cortex-a53_shared/gen/stub.map`.  That file doesn\u0027t mention `strerrorname_np`, but the non-vendor stubs do.  The vendor stubs are built with `--api 202504`, which seems to come from the `BOARD_API_LEVEL` value.",
      "parentUuid": "fbaa7eeb_b5fa02bf",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "422fc39f_1c794b46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-31T18:40:28Z",
      "side": 1,
      "message": "+jiyong for whether that\u0027s expected, or another artifact of \"35 isn\u0027t in AOSP yet\". (i\u0027m surprised that\u0027s 202*five*04, not 202*four*04? surely _next year\u0027s_ abi should include this year\u0027s abi?)",
      "parentUuid": "f04f0f74_e727cfff",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4254afa5_d6ae2f98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-07-31T23:18:02Z",
      "side": 1,
      "message": "BOARD_API_LEVEL being 202504 is as expected for the trunk_staging release config because 202404 was already released and trunk_staging is future facing.\n\nWhat\u0027s not expected is the absence of strerrorname_np in the vendor-side stub.\n\nCan you try again after experimentally adding (not replacing the existing one) `strerrorname_np; # llndk\u003d202504` (or `llndk\u003d202404`) to the map.txt file? That may reveal what went wrong.\n\ncc: @justinyun@google.com",
      "parentUuid": "422fc39f_1c794b46",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e28bd8_1ab8188d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-08-01T01:26:17Z",
      "side": 1,
      "message": "Since API level 35, symbols are not added to LLNDK automatically. They must be explicitly tagged with `llndk\u003d\u003cvendor api level\u003e` as Jiyong commented. See aosp/2997316 and this doc: https://docs.google.com/document/d/1r7H3fWQfPmIBPgREhpNAImGbK1mVXm3PpxNCE9h-Z6g/edit?resourcekey\u003d0-A3r_kSp8feBDLVthm2uy6g\u0026tab\u003dt.0#heading\u003dh.wke4uaif5p5z",
      "parentUuid": "4254afa5_d6ae2f98",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df666c7f_18873fca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-01T12:18:47Z",
      "side": 1,
      "message": "surely that\u0027s a bug for libc/libm/libdl though? why would we ever _not_ want libc symbols in the NDK but not LLNDK?",
      "parentUuid": "d7e28bd8_1ab8188d",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21186cfa_18228288",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-05T17:48:04Z",
      "side": 1,
      "message": "+danalbert: were you aware of this?\n\nllndk team: what\u0027s the way forward here? us having to track your llndk versions doesn\u0027t seem realistic, and we\u0027re just going to end up with more messes like this where something that\u0027s in 35 can now presumably never be in whatever the corresponding llndk was?",
      "parentUuid": "df666c7f_18873fca",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a073c89_2423ebf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-08-05T21:23:30Z",
      "side": 1,
      "message": "Vaguely. I don\u0027t remember this part though:\n\n\u003e Since API level 35, symbols are not added to LLNDK automatically\n\nWhy not? The doc says that\u0027s what happened, but it doesn\u0027t say why.",
      "parentUuid": "21186cfa_18228288",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6b1277_3d72c39f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-08-05T23:32:55Z",
      "side": 1,
      "message": "The reason was the different finalization schedule for API level 35 and 202404.\nEven though the LLNDK 202404 was finalized in Q2, API 35 still can be changed until it is finalized in Q3.\nTo mitigate the problem, we may explicitly tag the newly added symbols after the vFRC by adding the symbols before the finalization automatically to the finalized LLNDK. @jooyung@google.com WDYT?",
      "parentUuid": "4a073c89_2423ebf8",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7b2ea62_8e2b13ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-13T13:49:09Z",
      "side": 1,
      "message": "jooyung: what\u0027s the plan here? it isn\u0027t realistic to expect us to annotate every single bionic symbol, and i\u0027m assuming it\u0027s not _intentional_ for the llndk to just \"stop\" at api 34?",
      "parentUuid": "5a6b1277_3d72c39f",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27fe4488_6c4083d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2024-08-15T03:18:50Z",
      "side": 1,
      "message": "(Sorry for late responding) I don\u0027t have any plan on this. I think we agreed upon the idea of explicit tagging for LLNDK symbols starting from 202404. If this doesn\u0027t work for you, I think we can fix it. I have no better idea yet. Any suggestion?",
      "parentUuid": "f7b2ea62_8e2b13ef",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1343e25_ca6a0449",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-15T20:52:38Z",
      "side": 1,
      "message": "\u003e (Sorry for late responding)\n\nno worries --- kbs made it seem like everyone else had the day off, so i hope you did too :-)\n\n\u003e Any suggestion?\n\ni\u0027ll admit i\u0027ve never really understood llndk (other than the \"it\u0027s a subset\" part), _especially_ for bionic. given that bionic\u0027s compatibility guarantee is _stronger_ than any vendor guarantee, and there\u0027s no separate \"vendor libc\", i feel like bionic\u0027s involvement here is just a historical accident?\n\nso my first suggestion would be: can we just say \"all of bionic\"? our api/abi comes from gnu/posix/linux anyway, so it\u0027s not like we change anything during development.\n\nmy second alternative: if you really want to be behind, why not just have your tools lag by one api level? (which i think jiyong was implying is what _should_ have happened? that the vendor stub should already include strerrorname_np() because it\u0027s an api 35 api, and so by definition must be in any llndk later than that?)\n\n(a quick codesearch shows that only libbinder and libcgroups have llndk\u003d lines, and that seems fair enough [to me as someone who doesn\u0027t add api to either] --- they\u0027re not in the ndk, they don\u0027t conform to any external standard, and they do change over time. and presumably (?) they only need to add the llndk\u003d lines if they actually need to expose their stuff to vendors, and having that default \"off\" for those libraries sounds reasonable to me. but not for libc!)",
      "parentUuid": "27fe4488_6c4083d1",
      "revId": "0cad9cbd6468769757a9f20ecc126b2c0252791e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}