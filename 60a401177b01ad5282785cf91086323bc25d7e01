{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "011f7f40_5daf66cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-04T01:18:38Z",
      "side": 1,
      "message": "This should only be committed if it actually helps with the stack walking code I\u0027m writing *and* we select that fix for the stack-protector issue.  I just wanted to put this up for early review and to run it through Treehugger.",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "632b5d4a_e9b07e6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-05-04T01:26:27Z",
      "side": 1,
      "message": "i have various nits, but +cferris because this might make sense anyway even if it doesn\u0027t help you :-)\n\ni actually thought we already did this. oh, looks like (a) we\u0027re using CFI in the dynamic linker startup instead and (b) not for the frame pointer anyway: https://android-review.googlesource.com/c/platform/bionic/+/512522",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b82d0c1f_e1738edc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-06T01:11:35Z",
      "side": 1,
      "message": "This CL is no longer needed for the stack protector stuff.  Would you like to commit it for compatibility/standards reasons?",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfc5e247_66b357b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-05-06T17:10:10Z",
      "side": 1,
      "message": "i do have a bunch of questions/nits that hopefully cferris can weigh in on, because although i have plenty of _questions_ i don\u0027t have any of the answers --- these are genuine questions rather than rhetorical ones :-)\n\n1. do both fp and lr for the two arms?\n2. move the arm64 BTI hint back to being the first instruction, since that\u0027s the branch target :-)\n3. either:\n3a. make the CFI information in the linker begin.S files match\n3b. only change the linker begin.S --- i\u0027m not sure why we\u0027d need/want to do it here if it\u0027s done in begin.S?\n3c. decide whether we want CFI *and* register clearing, or just CFI (and assume we only need to worry about good unwinders [specifically -- our own libunwindstack])\n4. nit: either consistently use whitespace or not (`mov fp, #0` vs `mov r0,sp`)\n5. nit: line breaking at an instruction boundary, not half way through (the x86-64 `call`)",
      "parentUuid": "b82d0c1f_e1738edc",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e0790d4_bd96f510",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-05-06T21:40:23Z",
      "side": 1,
      "message": "For 1:\n\nYes, you could do lr too, but I don\u0027t think it\u0027s very useful. There is already the BIONIC_STOP_UNWIND macro used to stop unwinding in libc_init. That only uses cfi data though.\n\nFor 3:\n\n3a and 3b:\nI don\u0027t think modifying the begin.S does anything. I forget why, but I remember when I tried it this does not stop the unwinds properly.\n\n3c:\nThere is already the cfi stop unwinding information in libc_init, so probably not worth doing it again here. Or probably not worth moving it here.\n\n\nI think there is only one place in bionic where an unwinder uses the frame pointer (android_unsafe_frame_pointer_chase), so I think it\u0027s fine to zero out the frame pointer. But this really only affects the main thread, all other threads should end in a different function.",
      "parentUuid": "cfc5e247_66b357b6",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3a52f87_9a9434f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-05-07T00:14:55Z",
      "side": 1,
      "message": "i\u0027m assuming you mean \"we should also zero the fp in __bionic_clone if we do it here\", given that (a) you\u0027re right that this doesn\u0027t affect non-main threads and (b) __bionic_clone doesn\u0027t currently zero the frame pointer:\n```\n.L_bc_child:\n    # Setting lr to 0 will make the unwinder stop at __start_thread.\n    mov    lr, #0\n```\n\n+pcc for thoughts on whether we should make these changes to help android_unsafe_frame_pointer_chase().\n\n(but don\u0027t worry chriswailes --- don\u0027t feel that i\u0027m signing you to make the changes if/when we decide what they should look like :-) )",
      "parentUuid": "3e0790d4_bd96f510",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "085df6d8_9c3e0639",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-07T19:12:25Z",
      "side": 1,
      "message": "The x86_64 code for __bionic_clone uses an .cfi_undefined directive to invalidate the %rbp and %rip registers.  The x86 code, however, only invalidates the %eip reigsters.  It seems this is similar but not quite the same as setting the value to zero?\n\nDo we want to add only the CFI directive to the x86 code, or do we also want to zero the registers for both versions?",
      "parentUuid": "f3a52f87_9a9434f2",
      "revId": "60a401177b01ad5282785cf91086323bc25d7e01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}