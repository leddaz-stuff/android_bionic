//
// Copyright (C) 2013 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

benchmark_cflags = [
    "-O2",
    "-fno-builtin",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wunused",
]

benchmark_cppflags = []

benchmark_src_files = [
    "math_benchmark.cpp",
    "property_benchmark.cpp",
    "pthread_benchmark.cpp",
    "semaphore_benchmark.cpp",
    "stdio_benchmark.cpp",
    "string_benchmark.cpp",
    "time_benchmark.cpp",
    "unistd_benchmark.cpp",
]

// Build benchmarks for the device (with bionic's .so). Run with:
//   adb shell bionic-benchmarks32
//   adb shell bionic-benchmarks64
cc_benchmark {
    name: "bionic-benchmarks",
    multilib: {
        lib32: {
            stem: "bionic-benchmarks32",
        },
        lib64: {
            stem: "bionic-benchmarks64",
        },
    },
    compile_multilib: "both",
    cflags: benchmark_cflags,
    cppflags: benchmark_cppflags,
    srcs: benchmark_src_files,
}

// We don't build a static benchmark executable because it's not usually
// useful. If you're trying to run the current benchmarks on an older
// release, it's (so far at least) always because you want to measure the
// performance of the old release's libc, and a static benchmark isn't
// going to let you do that.

// Only supported on linux systems.

// Build benchmarks for the host (against glibc!). Run with:
cc_binary_host {
    name: "bionic-benchmarks-glibc",
    multilib: {
        lib32: {
            stem: "bionic-benchmarks-glibc32",
        },
        lib64: {
            stem: "bionic-benchmarks-glibc64",
        },
    },
    compile_multilib: "both",
    cflags: benchmark_cflags,
    cppflags: benchmark_cppflags,
    host_ldlibs: ["-lrt"],
    srcs: benchmark_src_files,
    static_libs: ["libgoogle-benchmark"],
    // TODO: BUILD_HOST_NATIVE_BENCHMARK
    target: {
        darwin: {
            enabled: false,
        },
    },
}

// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(HOST_OS)-$(HOST_ARCH),$(filter $(HOST_OS)-$(HOST_ARCH),linux-x86 linux-x86_64))

// ANDROIDMK TRANSLATION ERROR: unsupported include
// include $(LOCAL_PATH)/../build/run-on-host.mk

// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(TARGET_ARCH),$(filter $(TARGET_ARCH),x86 x86_64))

// ANDROIDMK TRANSLATION ERROR: unsupported line
// rule:       bionic-benchmarks-run-on-host32: bionic-benchmarks bionic-prepare-run-on-host
// ANDROID_DATA=$(TARGET_OUT_DATA)
// 	ANDROID_ROOT=$(TARGET_OUT)
// 		$(TARGET_OUT_EXECUTABLES)/bionic-benchmarks32 $(BIONIC_BENCHMARKS_FLAGS)
//
//

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif

// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(TARGET_IS_64_BIT),true)

// ANDROIDMK TRANSLATION ERROR: unsupported line
// rule:       bionic-benchmarks-run-on-host64: bionic-benchmarks bionic-prepare-run-on-host
// ANDROID_DATA=$(TARGET_OUT_DATA)
// 	ANDROID_ROOT=$(TARGET_OUT)
// 		$(TARGET_OUT_EXECUTABLES)/bionic-benchmarks64 $(BIONIC_BENCHMARKS_FLAGS)
//
//

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
