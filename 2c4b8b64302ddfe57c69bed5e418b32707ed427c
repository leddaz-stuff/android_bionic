{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac0c34f9_1d3290e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-03T23:20:24Z",
      "side": 1,
      "message": "I wasn\u0027t sure if I should just duplicate the mallinfo2 structure, but it seems like the easiest way to do this.",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44632317_8c8cc543",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:34:33Z",
      "side": 1,
      "message": "(reading that all back, which i wrote as things came to me, it\u0027s probably best to jump straight to the last comment, which seems like the best of the ideas and ignore my earlier ideas :-) )",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caa76570_bec87faa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-03T23:47:38Z",
      "side": 1,
      "message": "The problem is that the signature of mallinfo and mallinfo2 isn\u0027t the same. In Android, the two structs are the same, but I can\u0027t use typedef because someone decided the structure and function should be the same name.\n\nI tried to find a way to have struct mallinfo and struct mallinfo2 be allowed, but I couldn\u0027t find any way to make it work. I could potentially do a #define mallinfo2 to mallinfo, but that would cause the function call to fail. Basically, I am bound by the requirement that I need to have struct mallinfo or mallinfo2.\n\nIf you know of a way to duplicate a structure, and still allow both struct mallinfo and struct mallinfo2 to work, I\u0027d love to use it.",
      "parentUuid": "44632317_8c8cc543",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a2306b_353478ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:53:12Z",
      "side": 1,
      "message": "here\u0027s my usual hack when painted into this particular corner:\n\nhttps://source.corp.google.com/search?q\u003dfile:bionic%20_BODY%20case:yes\u0026sq\u003dpackage:%5Eandroid$\n\nit won\u0027t claim it\u0027s pretty, but, yeah, the alternatives are broken whenever there\u0027s a struct and a function with the same name. (__RENAME doesn\u0027t care at all, so long as you have structural equivalence :-) )",
      "parentUuid": "caa76570_bec87faa",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f89299e7_78c89ea2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-06T22:07:01Z",
      "side": 1,
      "message": "Did this along with the __strong_alias choice.",
      "parentUuid": "b1a2306b_353478ff",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f44a17ef_3f07f542",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:33:22Z",
      "side": 1,
      "message": "avoid duplicating this part by moving the `struct mallinfo info` scope out one and having L107 be an `else`?\n\n(actually, given that the struct is (afaict) identical, just remove this? use `__strong_alias(mallinfo2, mallinfo);` instead?)",
      "range": {
        "startLine": 100,
        "startChar": 4,
        "endLine": 104,
        "endChar": 6
      },
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04fffaaa_584101a2",
        "filename": "libc/bionic/malloc_common.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-06T22:07:01Z",
      "side": 1,
      "message": "Did the __strong_alias version.",
      "parentUuid": "f44a17ef_3f07f542",
      "range": {
        "startLine": 100,
        "startChar": 4,
        "endLine": 104,
        "endChar": 6
      },
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdf44eb3_209b852d",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:33:22Z",
      "side": 1,
      "message": "typedef since this is identical? (or make it a lot clearer what\u0027s actually different, because at least by eye i can\u0027t see anything :-) )",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "093b3a24_d1a96f60",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-06T22:07:01Z",
      "side": 1,
      "message": "Did the #define solution mentioned in the next comment.",
      "parentUuid": "bdf44eb3_209b852d",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66f2c658_be46f326",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:33:22Z",
      "side": 1,
      "message": "i know this is copy \u0026 paste rather than a regression, but do we have specifics we can give here?",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 24
      },
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4219b1c5_03d318d6",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-06T22:07:01Z",
      "side": 1,
      "message": "I wanted to keep it vague because it depends on the version of the allocator we have.",
      "parentUuid": "66f2c658_be46f326",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 24
      },
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26fe8ee7_fbf5af1d",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-03T23:33:22Z",
      "side": 1,
      "message": "or should we just `__RENAME(mallinfo)`? (or even just `#define mallinfo2 mallinfo` if you can stomach the namespace pollution.) seems weird to have an API level restriction when we\u0027ve effectively always had the good API anyway, because we didn\u0027t make glibc\u0027s mistake :-)\n\nif we __RENAME, we don\u0027t need a new symbol/alias at all... (and the only unit test we need is presumably that we can take the address of mallinfo2 :-) )",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00d915fe_891f0d76",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-12-06T22:07:01Z",
      "side": 1,
      "message": "The define works, but I think it would remove the mallinfo2 symbol. Since we\u0027ve gotten into issues in the past, so having the two structures I think is the best way.",
      "parentUuid": "26fe8ee7_fbf5af1d",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dbb74ae_4d2b244c",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-06T22:09:15Z",
      "side": 1,
      "message": "+danalbert for the new symbol versus __RENAME() question... i\u0027m guessing from the NDK perspective that adding a new symbol is basically a bug? we\u0027d be introducing the potential for an ABI limitation (that we don\u0027t actually need) without adding any actual value?\n\nor should we have the strong_alias() *and* the __RENAME()? the former so that badly-behaved configure scripts think we have mallinfo2(3), the latter so that in practice no-one actually _needs_ the API 33 dependency?",
      "parentUuid": "26fe8ee7_fbf5af1d",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c90c455_c30f622c",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-12-10T22:31:55Z",
      "side": 1,
      "message": "The __strong_alias essentially creates an inline, doesn\u0027t it? I didn\u0027t think using it creates an API 33 dependency.\n\nIf it does, both SGTM.",
      "parentUuid": "6dbb74ae_4d2b244c",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e729a9d_724e2a19",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-10T23:37:13Z",
      "side": 1,
      "message": "__strong_alias creates an ELF symbol whose address is the same as the other symbol. so __strong_alias means \"configure scripts looking for a *symbol* will find it\". which means those connfigure scripts will say \"mallinfo2() is available\". which isn\u0027t actually true until API 33. (whereas if we _don\u0027t_ have the symbol, that kind of configure check will fail ... which is *better* if it falls back to mallinfo() but *worse* if it just fails and says \"can\u0027t build\" --- but then presumably there wouldn\u0027t *be* a configure check in that case?)\n\nmy guess is that __RENAME is a good thing, but __strong_alias (despite having initially recommended it) probably causes some non-zero harm but has zero benefit?",
      "parentUuid": "1c90c455_c30f622c",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deeae9b6_9c4b964f",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-12-11T00:20:00Z",
      "side": 1,
      "message": "But because it\u0027s in a header doesn\u0027t that symbol end up in the app?",
      "parentUuid": "1e729a9d_724e2a19",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f87b4f6_9176a577",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-12-13T19:05:18Z",
      "side": 1,
      "message": "\u003e That\u0027s what the __RENAME() would be for: so the *old* symbol is what ends up in the app.\n\nAh, okay. +1 for __RENAME then.",
      "parentUuid": "deeae9b6_9c4b964f",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d524072_6be74139",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-12-13T19:29:51Z",
      "side": 1,
      "message": "(we should probably document the ins and outs of backwards compatibility -- and the available options -- somewhere, though i\u0027m not sure where...)",
      "parentUuid": "1f87b4f6_9176a577",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf0d4b8_97b9ba28",
        "filename": "libc/include/malloc.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-12-13T20:25:57Z",
      "side": 1,
      "message": "A new doc in https://cs.android.com/android/platform/superproject/+/master:bionic/docs/ would probably be best?",
      "parentUuid": "2d524072_6be74139",
      "revId": "2c4b8b64302ddfe57c69bed5e418b32707ed427c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}