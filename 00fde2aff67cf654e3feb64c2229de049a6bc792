{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "65546289_62602b56",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-10-21T19:09:24Z",
      "side": 1,
      "message": "This remains incorrect. If it fixes a breakage, the CL is fine, but we also need to migrate away from using `clang-stable`, which is very much not \"stable\". This needs to be a named/numbered release of Clang to actually have stability (even though that\u0027s more work to update later on).",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a0110e_5de4a796",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1021676
      },
      "writtenOn": "2022-10-21T19:13:32Z",
      "side": 1,
      "message": "I think it should be ok to pick a numbered one but will they continue to be available indefinitely or will there be an issue with it being rotated out?\n\nFor the most part it seems that the clang version isn\u0027t so critical for this script but that the python3-clang module is present (even if it is unsupported).",
      "parentUuid": "65546289_62602b56",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c16c178e_ff49357d",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-10-21T19:17:49Z",
      "side": 1,
      "message": "They do get rotated out, but they have stability. This `clang-stable` is one that changes arbitrarily (and without proper testing, as we\u0027re seeing). `clang-stable` was only ever intended because there were demands for `clang-format` availability to gerrit tooling. We should have pushed back harder on that in the past, but it\u0027s too late now. https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ shows just how many places use the numbered builds, and this should be another of them (or preferably it could get the number from what `build/soong` is using).",
      "parentUuid": "26a0110e_5de4a796",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6821d82d_a94079e2",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1021676
      },
      "writtenOn": "2022-10-21T19:32:05Z",
      "side": 1,
      "message": "I see in `build/soong/cc/config/global` it\u0027s defined as `ClangDefaultVersion` but getting that into this script without adding another dependency is tricky, I think.\n\nIt is also hardcoded in `build/soong/rust/bindgen.go`\n\nIs it reasonable to hardcode `clang-r468909b` in this script as well?  I\u0027m afraid it\u0027ll get left behind after the next branch.\n\nMaybe it needs to be simply defined (i.e. a text file with clang-version in it) in build/ somwehere for inclusion to all of these places?",
      "parentUuid": "c16c178e_ff49357d",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25fae172_5d575ae8",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-10-21T19:33:20Z",
      "side": 1,
      "message": "\u003e Maybe it needs to be simply defined (i.e. a text file with clang-version in it) in build/ somwehere for inclusion to all of these places?\n\nyeah. i think +pirama\u0027s been working on something like that?\n\nbut like srhines says, this is fine for now.",
      "parentUuid": "6821d82d_a94079e2",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cfdd3fc_c50caca4",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1021676
      },
      "writtenOn": "2022-10-21T19:34:41Z",
      "side": 1,
      "message": "SGTM, thanks!",
      "parentUuid": "25fae172_5d575ae8",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8491aea6_50496fd4",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2022-10-21T19:42:09Z",
      "side": 1,
      "message": "build/soong/scripts/get_clang_version.py is the script for getting the version.",
      "parentUuid": "1cfdd3fc_c50caca4",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c950fcc8_6a28e6c8",
        "filename": "libc/kernel/tools/cpp.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-10-21T19:46:46Z",
      "side": 1,
      "message": "seems like there aren\u0027t many files we\u0027d need to fix (from https://source.corp.google.com/search?q\u003dclang%2Fhost%2Flinux-x86%2Fclang-stable%20-file:clang%2Fhost%2Flinux-x86%2Fclang-stable\u0026sq\u003dpackage:%5Eandroid$ ) ... worth giving that job to someone and removing clang-stable before new users crop up? (and maybe add a README.md referring to build/soong/scripts/get_clang_version.py, for anyone poking around in prebuilts/clang/host/linux-x86/ looking for a way to get the current clang?)",
      "parentUuid": "8491aea6_50496fd4",
      "range": {
        "startLine": 17,
        "startChar": 66,
        "endLine": 17,
        "endChar": 78
      },
      "revId": "00fde2aff67cf654e3feb64c2229de049a6bc792",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}