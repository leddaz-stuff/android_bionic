{
  "comments": [
    {
      "key": {
        "uuid": "2e72c160_1c82d1dd",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1639949
      },
      "writtenOn": "2020-02-12T18:42:31Z",
      "side": 1,
      "message": "Could move this to the beginning for the few extra bytes saved :D \n\nAlso this doesn\u0027t necessarily needs to be uint64_t we just want to check if the version changed from previous iteration in __cxa_finalize, so unless someone do exact number of version bumps to wrap around to the same value we are fine. Even if we modulo wrap around it will work as expected. But I digress, because uint64_t is perfectly fine, could be size_t for those 32-bit folks. (I guess it is safe to assume no one would exceed this number of atexits)",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 20
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b9687fd_2209da50",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Does moving the field save any bytes?\n\nI suppose 32-bits is enough, because there probably won\u0027t be billions of DSO unloads. OTOH I know that 64-bits can\u0027t be exhausted.",
      "parentUuid": "2e72c160_1c82d1dd",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 20
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca036be8_e851790d",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1639949
      },
      "writtenOn": "2020-02-12T18:42:31Z",
      "side": 1,
      "message": "Have you considered making those functions private? They doesn\u0027t seem to be useful standalone and with current interface of this class both `append_entry` and `erase_entry` will fail if they are called without explicitly calling `set_writable` first. \n\nI mean public interface of this class should include only methods to access/add/remove data, rest is implementation specific and can be hidden inside.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 19
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4893d456_c6d73465",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "yeah, making set_writable private seems ok",
      "parentUuid": "ca036be8_e851790d",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 19
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a473510_21d5a6c2",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-12T06:12:23Z",
      "side": 1,
      "message": "does returning bool actually make sense, or should you just abort?",
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3f97b58_c2c19ff1",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a473510_21d5a6c2",
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cb3204a_ddf95091",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1630289
      },
      "writtenOn": "2020-02-11T16:21:36Z",
      "side": 1,
      "message": "this will always rewrite the whole array - in many cases needlessly. You could skip the non-null records at the beginning",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d056d79b_765539a1",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3cb3204a_ddf95091",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfac2121_132bca2c",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-12T06:12:23Z",
      "side": 1,
      "message": "(i was actually going to suggest calling this AtexitEntry and calling ptr fn instead...)",
      "range": {
        "startLine": 100,
        "startChar": 37,
        "endLine": 100,
        "endChar": 45
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da90118_f2567353",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bfac2121_132bca2c",
      "range": {
        "startLine": 100,
        "startChar": 37,
        "endLine": 100,
        "endChar": 45
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2faae132_fc6ec6b4",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1639949
      },
      "writtenOn": "2020-02-12T18:42:31Z",
      "side": 1,
      "message": "For the first allocation you are calling this with size\u003d\u003d0 and src\u003d\u003dnullptr... Calling memcpy with nullptr is UB.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 60
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7106ad1_8d770f36",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "good catch",
      "parentUuid": "2faae132_fc6ec6b4",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 60
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff93699b_23806489",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1630289
      },
      "writtenOn": "2020-02-11T16:21:36Z",
      "side": 1,
      "message": "Probably non-issue:\n\nYou are unmapping potentially different size than you mapped.\nAs far as I understand this will not leak because all pages that contain the passed address range will be unmapped. And the range you pass will span all pages.\n\nIt would leak only if sizeof(AtexitFn) exceeded pagesize - Which I do not think can happen.",
      "range": {
        "startLine": 112,
        "startChar": 19,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e948cd1_3c7d85e3",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-12T06:12:23Z",
      "side": 1,
      "message": "mremap rather than mmap/memcpy/munmap?",
      "parentUuid": "ff93699b_23806489",
      "range": {
        "startLine": 112,
        "startChar": 19,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ddc7251_a0bd5e3a",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "I think I can use mmap and mremap. Maybe madvise too to release the zeroed pages...",
      "parentUuid": "0e948cd1_3c7d85e3",
      "range": {
        "startLine": 112,
        "startChar": 19,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34c5bba3_526c667f",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1630289
      },
      "writtenOn": "2020-02-11T16:21:36Z",
      "side": 1,
      "message": "this link is dead - 404\n\nWould this work as a replacement?:\nhttps://itanium-cxx-abi.github.io/cxx-abi/abi.html#dso-dtor",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 57
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73a9625f_b2f20bca",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34c5bba3_526c667f",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 57
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f301903e_6bbdcafc",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1639949
      },
      "writtenOn": "2020-02-12T18:42:31Z",
      "side": 1,
      "message": "nitpick: Have you considered negating this condition and adding `continue`? :)",
      "range": {
        "startLine": 169,
        "startChar": 4,
        "endLine": 169,
        "endChar": 81
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35fa5092_7d9ba10f",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "seems reasonable.",
      "parentUuid": "f301903e_6bbdcafc",
      "range": {
        "startLine": 169,
        "startChar": 4,
        "endLine": 169,
        "endChar": 81
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d524486_e693bde3",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-12T06:12:23Z",
      "side": 1,
      "message": "move this before the if to make the if condition shorter?",
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5bb0e03_1cb10485",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "I think I\u0027ll instead combine the reading of the entry with the removal using an `extract_entry` that returns the entry.",
      "parentUuid": "3d524486_e693bde3",
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "763b0f06_d481bba3",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1639949
      },
      "writtenOn": "2020-02-12T18:42:31Z",
      "side": 1,
      "message": "Given this usecase we could have `pop_entry` instead that would erase for array and return given entry. Hmm, maybe pop is not good name...",
      "range": {
        "startLine": 175,
        "startChar": 16,
        "endLine": 175,
        "endChar": 27
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5943e3ac_58249def",
        "filename": "libc/stdlib/atexit.cpp",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-27T04:00:13Z",
      "side": 1,
      "message": "Maybe extract_entry?",
      "parentUuid": "763b0f06_d481bba3",
      "range": {
        "startLine": 175,
        "startChar": 16,
        "endLine": 175,
        "endChar": 27
      },
      "revId": "ecbd881c567c9d190b2dc2f5a5041c11f6e807cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}