{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fa1c57cc_50d07b7f",
        "filename": "libc/include/time.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-21T09:58:47Z",
      "side": 1,
      "message": "Nit: I don\u0027t know if this is coming from upstream, but if not: FWIW, I stick with \"time zone\" for the reasons given on http://go/android-time-zones#trivia, plus it\u0027s the form favored by https://www.iana.org/time-zones (though perhaps not consistently)\n\nEither works and I certainly don\u0027t want to debate which is \"correct\" (they\u0027re both fine by me), so just an FYI if you want to keep the patch size down.",
      "range": {
        "startLine": 45,
        "startChar": 44,
        "endLine": 45,
        "endChar": 52
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "844a86b1_b9f16448",
        "filename": "libc/include/time.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "yeah, `timezone_t` is upstream. i\u0027d historically stayed out of the debate about which is correct (though preferring \"time zone\" myself!), but now we have _API_ that spells it \"timezone\" (the opposite way to Java :-/) i feel like the docs should be consistent, if only for grep/ctrl-f purposes.",
      "parentUuid": "fa1c57cc_50d07b7f",
      "range": {
        "startLine": 45,
        "startChar": 44,
        "endLine": 45,
        "endChar": 52
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feb2bbce_937cce9b",
        "filename": "libc/include/time.h",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-06-21T08:42:31Z",
      "side": 1,
      "message": "nit-nit: it is ID, right? \n\nhttps://www.britannica.com/dictionary/id",
      "range": {
        "startLine": 294,
        "startChar": 68,
        "endLine": 294,
        "endChar": 70
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5400f23_7c86b980",
        "filename": "libc/include/time.h",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "done. (that\u0027s what the internet and man7.org seem to prefer.)",
      "parentUuid": "feb2bbce_937cce9b",
      "range": {
        "startLine": 294,
        "startChar": 68,
        "endLine": 294,
        "endChar": 70
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4479e784_2954c4f2",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-21T09:58:47Z",
      "side": 1,
      "message": "Suggestion:\n\nMaybe a different tack on the reasoning as this feels quite specific.\n\n\"If the system property is not set, perhaps if this is called before the Android system has had a chance to set it to a default value, fall back to GMT.\"\n\n... we set the value to GMT on first boot from frameworks/base/services/core/java/com/android/server/SystemTimeZone.java so this _should_ be quite rare but it\u0027s great to have.",
      "range": {
        "startLine": 48,
        "startChar": 44,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecd545b9_502eda42",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "done. (i\u0027ve explicitly mentioned the recovery image as a place where the code you\u0027re thinking of will _never_ run, because that\u0027s one place where we\u0027ve had crashes in the past.)",
      "parentUuid": "4479e784_2954c4f2",
      "range": {
        "startLine": 48,
        "startChar": 44,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cceee1c_e6f3855b",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-21T09:58:47Z",
      "side": 1,
      "message": "While this looks safe enough, might this not wander outside of buf when n \u003c\u003d 3 (or 4?)",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "693c540d_778e10a7",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "no. that would be _memcmp()_ rather than strcmp() --- the whole point of strcmp() is that it works on strings :-)",
      "parentUuid": "3cceee1c_e6f3855b",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ddf7404_0ebd25db",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-06-21T09:00:23Z",
      "side": 1,
      "message": "It\u0027s unlikely to be a problem in practice, but it seems like this should check that `n \u003e 3` first in case someone somehow calls it with a tiny buffer.",
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19d69b1f_20b1b43f",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-21T09:58:47Z",
      "side": 1,
      "message": "This may be incorrect / legacy (but perhaps for a follow up):\n\nThe POSIX note may refer to the content of the TZ env variable (I think), which could theoretically hold things like \"GMT+5\", even though we generally use the newer \"Etc/GMT+5\" ID form in the platform (which this wouldn\u0027t catch). I don\u0027t understand why we\u0027d want to mess with an ID at all if we\u0027re trying to get an opaque ID (which is all the Java code interprets this as, AFAIK).\n\nSo, I don\u0027t see the need for this at all any more, especially for code that is _only_ looking at the system property: if the expectation is that we store an Olson ID in this property.",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50b8900e_c4159e3c",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "C strings always have a terminating NUL, so we can\u0027t get here without buf[3] being valid.",
      "parentUuid": "3ddf7404_0ebd25db",
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c48e08a_fb4d1061",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "\u003e The POSIX note may refer to the content of the TZ env variable (I think)\n\ncorrect.\n\n\u003e which could theoretically hold things like \"GMT+5\"\n\nyes, that\u0027s the specific case i was thinking of.\n\n\u003e even though we generally use the newer \"Etc/GMT+5\" ID form in the platform (which this wouldn\u0027t catch)\n\nwell, that\u0027s deliberate --- if you\u0027ve said \"Etc/GMT+5\" that\u0027s unambiguous.\n\n(and note that you say \"generally\" here, not \"always\"...)\n\n\u003e I don\u0027t see the need for this at all any more, especially for code that is only looking at the system property\n\nit took me a while to follow the history, but luckily we still have the motivating bug available: https://issuetracker.google.com/25463955 (and hilariously, after all that work i realize i included the bug in the code comment, probably because i thought this was non-obvious at the time!)\n\nso that partner really was setting the _system property_ to one of these GMT+x strings, and they wanted native code to interpret that the same way as java code.\n\nunless things have changed since i last used java, java.util.TimeZone() does support this style of id so unless you\u0027re saying \"other parts of the system now _guarantee_ that we won\u0027t see this format in the system property\", i think we still need this.\n\n(even if so, if we do change/remove this, we should do it in a separate change for bisection purposes, since it seems more likely to be a breaking change.)\n\ni\u0027ve added some verbiage to the code comment to try to make this a bit clearer though...",
      "parentUuid": "19d69b1f_20b1b43f",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "678b8b0c_30a9b4f7",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:52:44Z",
      "side": 1,
      "message": "(note to self: even if nfuller _does_ have that guarantee, or _adds_ one in V, remember that static binaries are expected to work on older releases, and the NDK still supports back to API level 21, so it\u0027ll be years before we can actually kill this [though it would be nice to know the death date, and we should record it here if there is one].)",
      "parentUuid": "5c48e08a_fb4d1061",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c3b5868_c84bf285",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-22T17:59:44Z",
      "side": 1,
      "message": "Thanks for the nice comments - much clearer for future travellers.\n\nYes - there was no expectation we had to do something for _this_ commit here.\n\n\u003e unless things have changed since i last used java, java.util.TimeZone() does support this style of id \n\nRight, so this relies on this logic from libcore/ojluni/src/main/java/java/util/TimeZone.java called if there\u0027s no Olson ID match.\n\n```\n        // Custom time zone?\n        if (zone \u003d\u003d null \u0026\u0026 id.length() \u003e 3 \u0026\u0026 id.startsWith(\"GMT\")) {\n            zone \u003d getCustomTimeZone(id);\n        }\n```\n\nNo, I cannot guarantee it isn\u0027t being used by somebody. Nobody in stock Android is using it that I\u0027m aware of. I\u0027m skeptical the original reporter still exists given the date, but you never know what\u0027s happening in odd corners of the ecosystem.\n\nNo idea OTTOMH how ICU4J / ICU4C, not to mention applications like Calendar, reacts to this, and presumably the Rust platform folks we\u0027re talking to about chrono would want to deal with this form too if it\u0027s considered \"supported\" on Android and they could encounter it.\n\n\u003e so that partner really was setting the system property to one of these GMT+x \n\u003e strings, and they wanted native code to interpret that the same way as java code.\n\nI wondered why they didn\u0027t just use Etc/ ones and achieved agreement that way. to answer my own wondering: Unfortunately, TZDB don\u0027t want to add Etc/ IDs for all offsets used somewhere in the world (I asked a while ago, they declined, and I don\u0027t want to introduce Android-only IDs), so I suppose GMT+XX:XX is at least capable of representing India, etc.",
      "parentUuid": "678b8b0c_30a9b4f7",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e315749a_93e61240",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T20:35:32Z",
      "side": 1,
      "message": "\u003e No, I cannot guarantee it isn\u0027t being used by somebody. Nobody in stock Android is using it that I\u0027m aware of. I\u0027m skeptical the original reporter still exists given the date, but you never know what\u0027s happening in odd corners of the ecosystem.\n\nyeah, i\u0027d quite like to ban it (especially now our story is better) but it doesn\u0027t seem worth the bother...\n\n\u003e No idea OTTOMH how ICU4J / ICU4C, not to mention applications like Calendar, reacts to this, and presumably the Rust platform folks we\u0027re talking to about chrono would want to deal with this form too if it\u0027s considered \"supported\" on Android and they could encounter it.\n\n...except if icu4c/icu4j are inconsistent with Java/libc here, that\u0027s a strong argument that this hack isn\u0027t actually a good idea. but given that Java\u0027s i18n stuff was all derived from an old version of icu4c, that would be surprising. and icu4c certainly claims to have this: https://unicode-org.github.io/icu-docs/apidoc/dev/icu4c/classicu_1_1TimeZone.html#details\n\n(and Calendar presumably doesn\u0027t care as long as everything under it [Java/libc/icu] is consistent?)\n\n\u003e TZDB don\u0027t want to add Etc/ IDs for all offsets used somewhere in the world\n\nyou could always generate them yourself... (but given the above, i don\u0027t think we have a realistic path to cleaning this up uniformly anyway.)",
      "parentUuid": "6c3b5868_c84bf285",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4152165_4a010cb7",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-23T08:54:01Z",
      "side": 1,
      "message": "FTR - I pondered over night and I think there is a good chance WearOS are using the GMT+- form in the edge cases where they find the TZDB version on the watch Vs the companion device yield different offsets for the same ID. I vaguely remember in this rare case they fall back to use the GMT+- form to force the Wear device offset to match, and monitor for offset changes in the companion device to keep the offset the same.\n\nSo, it\u0027s all good.\n\nAll this is another good reason for Rust/platform chrono folks just to call through to libc rather than dealing with this themselves. The upstream chrono impl would presumably fail if it doesn\u0027t cope with GMT+- form. This only becomes an issue for them if they start observing the system property directly, or want to pull an ID back out of a TimeZone and assume it\u0027s guaranteed to be an Olson ID.\n\n\u003e (and Calendar presumably doesn\u0027t care as long as everything under it [Java/libc/icu] is consistent?)\n\nI was thinking because Google Calendar (and things like it) are distributed apps. The reason I expected they could care about the ID is when somebody creates an event and they want to default the time zone for it to whatever the mobile device says is the user\u0027s current time zone. If they\u0027re expecting TimeZone.getID() to yield an Olson ID they\u0027d be disappointed. I don\u0027t actually know how they work - for all I know they could have a \"default time zone\" setting associated with the server-side user profile they just use, and ignore the client\u0027s time zone setting entirely.\n\n\u003e you could always generate them yourself... \n\nI don\u0027t want to do this for similar reasons to the above: because it will cause potential issues for distributed apps that also have TZDB in the server and want to pass Olson IDs around. If we invent our own IDs and pretend they\u0027re \"official\", we get the behavior we want on the device but we lose the \"lingua franca\" of the official TZDB IDs.\n\nDistributed systems already face similar issues with new TZDB IDs being introduced occasionally: version skew between Android and servers obviously happens (ID and rules mismatches), but it would make the ID mismatch permanent.",
      "parentUuid": "e315749a_93e61240",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65505e6b_2adccb36",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-23T23:06:55Z",
      "side": 1,
      "message": "\u003e I think there is a good chance WearOS are using the GMT+- form in the edge cases where they find the TZDB version on the watch Vs the companion device yield different offsets for the same ID\n\nif you have a reference for that, i\u0027ll definitely add a comment to that effect. a trivial cs/ for file:wear and `\\\"GMT` didn\u0027t turn up anything relevant :-(\n\n\u003e I was thinking because Google Calendar (and things like it) are distributed apps\n\nyeah, i\u0027m just assuming that _both_ sides are using java or icu :-)\n\n\u003e I don\u0027t want to do this for similar reasons to the above\n\nmakes sense.",
      "parentUuid": "c4152165_4a010cb7",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c62beae1_6e1f56a9",
        "filename": "libc/tzcode/bionic.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2023-06-26T09:19:13Z",
      "side": 1,
      "message": "\u003e if you have a reference for that, ...\n\nI had a quick look and couldn\u0027t find any evidence of it. It would all be off in \"clockwork\" code, but I did have a good scout so maybe they don\u0027t handle it that way at all. I remember being sent a design doc to look at back around 2016 but I don\u0027t remember the details (and they have changed quite a lot since then!)",
      "parentUuid": "65505e6b_2adccb36",
      "range": {
        "startLine": 59,
        "startChar": 9,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8718f4b9_0e26b2f6",
        "filename": "libc/tzcode/localtime.c",
        "patchSetId": 1
      },
      "lineNbr": 378,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-06-21T08:42:31Z",
      "side": 1,
      "message": "nit: timezone",
      "range": {
        "startLine": 378,
        "startChar": 52,
        "endLine": 378,
        "endChar": 53
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1beeb19d_07d29809",
        "filename": "libc/tzcode/localtime.c",
        "patchSetId": 1
      },
      "lineNbr": 378,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-22T16:50:39Z",
      "side": 1,
      "message": "done.",
      "parentUuid": "8718f4b9_0e26b2f6",
      "range": {
        "startLine": 378,
        "startChar": 52,
        "endLine": 378,
        "endChar": 53
      },
      "revId": "426512e38650024581bcb55ad0832b49ba686b22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}