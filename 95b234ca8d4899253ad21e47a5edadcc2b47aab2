{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44fa63e7_fad1c7af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1140283
      },
      "writtenOn": "2023-07-27T16:23:47Z",
      "side": 1,
      "message": "Is there a quick way to run this or do I need to build a new image? I\u0027d like to compare it on cuttlefish running on a few GCE variants as well.",
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fe9639d_29521d8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-27T16:49:00Z",
      "side": 1,
      "message": "as a googler, you can grab the artifacts from one of the successful presubmit builds; here\u0027s a cuttlefish one, for example: https://android-build.corp.google.com/build-details/P60267445/targets/aosp_cf_x86_64_phone-userdebug",
      "parentUuid": "44fa63e7_fad1c7af",
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9f506ef_84c5037f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1140283
      },
      "writtenOn": "2023-07-27T16:52:34Z",
      "side": 1,
      "message": "i was hoping to just rebuild bionic -- we have a ton of other things in our cuttlefish branch that are needed for the full performance picture.\n\ni\u0027ll try patching in and making a new image.",
      "parentUuid": "3fe9639d_29521d8e",
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1def055d_0d307e0d",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-07-26T15:36:41Z",
      "side": 1,
      "message": "This is mostly, though not entorely, about pre-existing code ...\n\nI presume this is on the order of small number of MB? So the timing tests don\u0027t cover non_temporal_loop at all?\n\nIIUC, the non_temporal_loop may run for a long time, and only uses the xmm registers. Does it make sense to move the vzeroupper above it?\n\nIf the constant really is what it claims, then this threshold seems way too large. We\u0027re potentially letting a single memset blow out the entire machine\u0027s caches. That may help memset performance (or not), but it\u0027s unlikely to help application performance.",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 31
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed091c59_1c72bbe1",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-26T16:11:35Z",
      "side": 1,
      "message": "yeah, 1MiB. (hard-coded from silvermont days; this symbol is a glibc-ism that intel included [presumably because all their libc submissions come from the One True Internal Source], and we always take the hard-coded SHARED_CACHE_SIZE.)\n\ni was very tempted to just delete all of the nt stuff (in the SSE2 copy of this code too)... thoughts?",
      "parentUuid": "1def055d_0d307e0d",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 31
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b10fbc39_97ec03d4",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-07-26T16:38:43Z",
      "side": 1,
      "message": "It\u0027s hard to guess here. With an ART bias, my preference would be to set the threshold so that anything larger than a couple of pages (or maybe half L1-size?) uses the non-temporal path. But really we want a programmer hint here: Are they going to use the data shortly, or are they clearing it because they\u0027re done with it, and need it to be cleared for next use, as ART does since Nicolas\u0027 recent patch? Unfortuntely, we don\u0027t have that hint. And I think guessing wrong here is going to have a very large impact.",
      "parentUuid": "ed091c59_1c72bbe1",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 31
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78b3d6e6_e1caac3f",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-26T18:46:32Z",
      "side": 1,
      "message": "\u003e or maybe half L1-size?\n\ncopy/move and compare all use the \"half\" size, but memset uses the full size for some reason.\n\n(ignoring, of course, that these have always just been hard-coded numbers, not the _actual_ run-time cache sizes.)\n\n\u003e And I think guessing wrong here is going to have a very large impact.\n\nmeh, it\u0027s x86, so 9 times out of 10 it\u0027s a cuttlefish Xeon/EYPC or a developer\u0027s laptop in the _worst_ case... i doubt anyone notices anything. (this missing vzeroupper was only noticed by folks doing their own SSE2 work and wondering why _their_ code got slower in U.)\n\nbut, yeah, that\u0027s why i just left it as-is here --- no-one\u0027s complained (yet) about the current setup, so there\u0027s little motivation to change it.",
      "parentUuid": "b10fbc39_97ec03d4",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 31
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7daf4442_7e72a633",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-07-26T22:35:25Z",
      "side": 1,
      "message": "Agreed, though the non-temporal issue may be relevant in different ways to other architectures as well.",
      "parentUuid": "78b3d6e6_e1caac3f",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 31
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae274fd0_b4552b60",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-07-27T20:57:22Z",
      "side": 1,
      "message": "Would it make sense to create a macro called something like:\n\n#define CLEANUP_AND_RETURN \\\n  vzeroupper \\\n  ret\n  \nThen add this here and in the done part. I know this is a minor nit, and if you\u0027d prefer the single return point, then consider this a suggestion.",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 137,
        "endChar": 12
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d36ba1a0_f6bb2cf5",
        "filename": "libc/arch-x86_64/string/avx2-memset-kbl.S",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-07-27T20:57:22Z",
      "side": 1,
      "message": "Is it worth adding a comment here so that future people know why this is being done?",
      "range": {
        "startLine": 156,
        "startChar": 1,
        "endLine": 156,
        "endChar": 11
      },
      "revId": "95b234ca8d4899253ad21e47a5edadcc2b47aab2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}