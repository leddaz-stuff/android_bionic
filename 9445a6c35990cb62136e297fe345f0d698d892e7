{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "364ae7b7_e0dddc9d",
        "filename": "libc/include/unistd.h",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "(remove the line break here to match the others. it lets us use grep(1) in the absence of better API query tools :-( .)",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8eeea8_079293e8",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1677,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "ASSERT_TRUE(android::base::WriteStringToFd(...))\n\nin a unit test, you want to check all your assumptions too --- what if the bug is actually in write() or lseek(), say, rather than copy_file_range()? you\u0027ll be very confused trying to debug a failed test if you aren\u0027t sure that all the setup actually succeeded :-)",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9fea090_713cae7e",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1678,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "ASSERT_EQ(0, ...",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8c2db6_178a9995",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1680,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "you\u0027ll definitely want to check the return value here, if only for the -1/ENOSYS case of \"my kernel is too old!\" in which case you should just skip the rest of the test...",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e68030f_c7742f65",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1681,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "ASSERT_EQ(0, ...",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4da53713_be1c6bf0",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1684,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-10T21:14:30Z",
      "side": 1,
      "message": "(what you have is correct, but -- since you have a std::string -- you could also `ASSERT_EQ(\"hello world\", content);` if you prefer)",
      "revId": "9445a6c35990cb62136e297fe345f0d698d892e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}