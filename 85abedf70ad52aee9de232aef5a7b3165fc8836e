{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0105ebf1_527694c4",
        "filename": "libc/arch-riscv64/string/__memcpy_chk.S",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-30T23:12:44Z",
      "side": 1,
      "message": "did you test this? i think this will undo the good work the previous lines did...\n\n(also the indentation looks wrong for all the instructions; you\u0027ve added an extra space? perhaps because the `tail` was already wrong?)",
      "revId": "85abedf70ad52aee9de232aef5a7b3165fc8836e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cab118e2_78c609b1",
        "filename": "libc/arch-riscv64/string/__memcpy_chk.S",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1994451
      },
      "writtenOn": "2023-04-03T00:56:19Z",
      "side": 1,
      "message": "Run bionic unit test and memcpy_chk error stack backtrace use case",
      "parentUuid": "0105ebf1_527694c4",
      "revId": "85abedf70ad52aee9de232aef5a7b3165fc8836e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d735dc05_03b6a7ff",
        "filename": "libc/arch-riscv64/string/__memcpy_chk.S",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-04-03T20:32:11Z",
      "side": 1,
      "message": "Looking at the code, there are quite a number of instructions in the assembler that will have incorrect unwinding information. It\u0027s probably fine for crashes, but I\u0027m not sure it is working as intended.\n\nFor example, if you crash in the memcpy routine does that unwind correctly? If so, then why do you need to add all of the extra information for one path and not the other? The __memcpy_chk_fail and memcpy tail calls are exactly the same at that point. All of the unwinding information from before should be the same, unless tail is operating more like call.\n\nAlso, you modify the stack, put some data on it, set the unwind information, then modify the stack so it will be overwritten. Again, it\u0027s not clear how this is going to work.",
      "parentUuid": "cab118e2_78c609b1",
      "revId": "85abedf70ad52aee9de232aef5a7b3165fc8836e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "879bb550_493800ac",
        "filename": "libc/arch-riscv64/string/__memcpy_chk.S",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-03T20:44:59Z",
      "side": 1,
      "message": "yeah, i think to test this properly you\u0027d need to add extra cases to `crasher`... then you can look at a backtrace from a fortify failure, and also from a memcpy failure. (if none of that makes sense, don\u0027t worry --- i\u0027ll get round to doing it myself at some point!)",
      "parentUuid": "d735dc05_03b6a7ff",
      "revId": "85abedf70ad52aee9de232aef5a7b3165fc8836e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}