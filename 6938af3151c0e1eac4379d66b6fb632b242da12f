{
  "comments": [
    {
      "key": {
        "uuid": "0e06dc0a_024dae41",
        "filename": "libm/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "While at it can you also add \"fabs\"? (the last remaining difference between bionic\u0027s libm and newlib\u0027s libm for arm64).",
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae7070c4_b9989f31",
        "filename": "libm/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-01T15:23:03Z",
      "side": 1,
      "message": "fabs is done in fabs.cpp now, and that\u0027s the way we want to go for all this stuff --- fix clang so __builtin_whatever generates good code, and then trivially wrap that in the C library. then there\u0027s only one place to maintain, and that place already has perfect information about what architecture and variant we\u0027re targeting.\n\nalso, you might want to fix clang\u0027s __builtin_fabs for 32-bit arm. (see fabs.cpp.)",
      "parentUuid": "0e06dc0a_024dae41",
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ec48060_d5dd5c2b",
        "filename": "libm/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-04T08:42:17Z",
      "side": 1,
      "message": "Oh, yes - that seems like the best way to do this. \n\nThanks for updating me on this, I will flag it with our clang team. Please let me know if you are aware of any other issues that are not part tracked part of: https://llvm.org/bugs/show_bug.cgi?id\u003d21420 .",
      "parentUuid": "ae7070c4_b9989f31",
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_e249a235",
        "filename": "libm/arm64/fmax.S",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "Nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_826f7e8a",
        "filename": "libm/arm64/fmax.S",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "I wonder if the tests in bionic/tests/math_data also test the corner cases mentioned in the man pages. Just to be on the safe side, I would add explicit tests for all the functions added, testing the result values described in the man pages:\n\nE.g: $man fmax\nRETURN VALUE\n       These functions return the maximum of x and y.\n\n       If one argument is a NaN, the other argument is returned.\n\n       If both arguments are NaN, a NaN is returned.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 27,
        "endChar": 10
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae7070c4_596703f4",
        "filename": "libm/arm64/fmax.S",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-01T15:23:03Z",
      "side": 1,
      "message": "yes please!",
      "parentUuid": "0e06dc0a_826f7e8a",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 27,
        "endChar": 10
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_c246a625",
        "filename": "libm/arm64/fmin.S",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "Nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_a2439a13",
        "filename": "libm/arm64/lround.S",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "Nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_82865e9a",
        "filename": "libm/arm64/nearbyint.S",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "Nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_628b52a2",
        "filename": "libm/arm64/round.S",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "Nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e06dc0a_22954abe",
        "filename": "libm/upstream-freebsd/lib/msun/src/s_nearbyint.c",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-04-01T10:08:24Z",
      "side": 1,
      "message": "I am not entirely sure what is the policy for the files in upstream-freebsd. Chris or Elliott will have a better opinion on this.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 19
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae7070c4_d97a3388",
        "filename": "libm/upstream-freebsd/lib/msun/src/s_nearbyint.c",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-01T15:23:03Z",
      "side": 1,
      "message": "yeah, we don\u0027t touch these files.\n\nyet another advantage of the fabs.cpp style --- we can just delete this stuff then.",
      "parentUuid": "0e06dc0a_22954abe",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 19
      },
      "revId": "6938af3151c0e1eac4379d66b6fb632b242da12f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}