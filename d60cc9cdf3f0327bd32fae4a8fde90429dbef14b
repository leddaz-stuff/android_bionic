{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8acd929c_ed1d30be",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T01:25:44Z",
      "side": 1,
      "message": "i think what i really dislike about this is probably just the word \"STRING\" and its [unintended] connotations. how about \"RAW\"/\"HEX\" or \"PRINTABLE\"/\"BINARY\"? and do we really want HEX or do we want something like base64? and isn\u0027t it weird that this is meaningless in the proto format, only the [deprecated] text format? should we just not include this in the text format, as a carrot/stick to encourage peopleÂ to move over? or maybe this is actually a \"show as text in the text format\" switch? so \"arbitrary bytes that you can get out of the proto\" is the special case, and \"this is utf8 that shows up in the text\" is the default?\n\n(and it\u0027s really a _display_ type.)\n\n(also i\u0027d leave this documentation in the enum, not here.)",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "186c115d_982fb1b5",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T04:43:21Z",
      "side": 1,
      "message": "it\u0027s not fully meaningless in the proto, because some runtimes use different types for string vs bytes, C++ is just dumb in that it doesn\u0027t have that :) For instance, Go: https://protobuf.dev/reference/go/go-generated/#oneof. Also, the runtime is supposed to validate utf8-ness of `strings` unless told otherwise: https://protobuf.dev/editions/features/#utf8_validation\n\nI like PRINTABLE / BINARY.",
      "parentUuid": "8acd929c_ed1d30be",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cafd25d_13b6e1c4",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T21:20:50Z",
      "side": 1,
      "message": "\u003e (and it\u0027s really a display type.)\n\njust to double clarify: it makes a difference in the proto output in that it uses a `string` or a `bytes` field there.\n\n\u003e (also i\u0027d leave this documentation in the enum, not here.)\n\n@danalbert@google.com please advise. your comment \"IDEs aren\u0027t going to show anything more than the docs for this function, so that\u0027s a very helpful hint if the developer isn\u0027t looking at the header or online API docs\" made me think it\u0027s a good idea to  repeat the doc in here.",
      "parentUuid": "186c115d_982fb1b5",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0fa5427_889d4d11",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T21:33:37Z",
      "side": 1,
      "message": "\u003e just to double clarify: it makes a difference in the proto output in that it uses a string or a bytes field there.\n\ni still think that\u0027s a bug though? i\u0027d still argue for \"all bytes, all the time\" unless we can confirm _in advance_ that it\u0027s legit utf8 (and i don\u0027t think we want to pay for that anyway).\n\nletting people do something that only fails when they try to collect their tombstone just isn\u0027t helpful. (i mean, \"this is invalid utf8\" could even be the bug they\u0027re chasing!)",
      "parentUuid": "3cafd25d_13b6e1c4",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9778be28_f45c13c1",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T22:38:38Z",
      "side": 1,
      "message": "\u003e i still think that\u0027s a bug though? i\u0027d still argue for \"all bytes, all the time\" unless we can confirm in advance that it\u0027s legit utf8 (and i don\u0027t think we want to pay for that anyway).\n\u003e letting people do something that only fails when they try to collect their tombstone just isn\u0027t helpful. (i mean, \"this is invalid utf8\" could even be the bug they\u0027re chasing!)\n\nDefine fail? You have me convinced that using `bytes` for both the readable and non-readable is a good idea, mainly because that way you can sidestep the whole language-dependent runtime nonsense where  different languages handle the error case differently.\n\nBut that still means we should have two fields (just that both are bytes, the difference is the _expectation_ that one of them is human readable, and the other is not). We can have discussions on what human-readable means (ASCII would be easier to verify, UTF-8 would be nicer), and what our printer should do in the error case (probably print an error).",
      "parentUuid": "c0fa5427_889d4d11",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86102401_a44d52dd",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T23:17:37Z",
      "side": 1,
      "message": "\u003e that still means we should have two fields\n\nyou mean \"name\" and \"data\"? yes. i don\u0027t think anyone disagreed with that? (i just don\u0027t like the enum for what the \"data\" is :-) )\n\n\u003e discussions on what human-readable means\n\nyeah, that\u0027s one reason why i like \"it\u0027ll all just bytes, and none of our business\" --- it means we can _change_ this when reality tells us we\u0027ve been too restrictive/not restrictive enough. hell, we can even have a flag! (recency bias: danalbert just fixed a bug along these lines in the ndk :-) )",
      "parentUuid": "9778be28_f45c13c1",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f035fc7_5ffb8670",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T23:35:23Z",
      "side": 1,
      "message": "\u003e yeah, that\u0027s one reason why i like \"it\u0027ll all just bytes, and none of our business\"\n\nthat can be the case for the wire-format of the proto even if we let the user specify whether it should be printable or not. a `oneof { bytes readable_data \u003d 1; bytes binary_data \u003d 2; }` is equivalent to the enum we have in the API. even if we don\u0027t have this we _have to make a decision when printing the proto_ whether we consider it human readable, and if we change it later we change the behavior of the output.\n\ni don\u0027t think just printing everything encoded as hex/base64 is an option, but i also don\u0027t like trying to automagically detect whether something is human readable or not. \"hello world\\0\\3\\4\\6\\2\" could be a struct with an inline char buffer that has \"hello world\" (binary) and a uint32_t, or it could be \"hello world\" read into a buffer that\u0027s too big but uninitialized (human readable). i also don\u0027t think we should just skip printing non-printable things to text, because i know from myself that i almost exclusively look at the text tombstones, not the protos. i would probably copy that into a python shell, then use something like https://docs.python.org/3/library/struct.html to decode it.",
      "parentUuid": "86102401_a44d52dd",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ec94264_875e2987",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T23:44:22Z",
      "side": 1,
      "message": "the other option would be to always print the whole buffer and \\ escape the non-printable characters, say literally print \"hello world\\0\\3\\4\\6\\2\" in the example above. that would clutter C strings defined like `const char foo[] \u003d \"hello world\";\nandroid_register_crash_detail(foo, sizeof(foo), ...)` with a \\0 at the end",
      "parentUuid": "5f035fc7_5ffb8670",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3a46a44_d36b962b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T23:47:16Z",
      "side": 1,
      "message": "\"use strlen() if you don\u0027t like that\"? the compiler will do the right thing anyway.\n\ni like this better, as \"what strace would do\".",
      "parentUuid": "4ec94264_875e2987",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a66f410_91ae21de",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-09T23:59:22Z",
      "side": 1,
      "message": "\u003e Dan Albert please advise. your comment \"IDEs aren\u0027t going to show anything more than the docs for this function, so that\u0027s a very helpful hint if the developer isn\u0027t looking at the header or online API docs\" made me think it\u0027s a good idea to repeat the doc in here.\n\nIf it\u0027s clear from the doc that the reader need to look somewhere else, that\u0027s also okay. It\u0027s a problem if the docs don\u0027t make it clear that there\u0027s additional important information elsewhere.",
      "parentUuid": "f3a46a44_d36b962b",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dbf8ff2_51f26035",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-10T00:00:55Z",
      "side": 1,
      "message": "OK, maybe that\u0027s good enough. there\u0027s still some weirdness about the case where you create a global buffer and partially fill it, but maybe that\u0027s not a problem worth solving.",
      "parentUuid": "f3a46a44_d36b962b",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "d60cc9cdf3f0327bd32fae4a8fde90429dbef14b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}