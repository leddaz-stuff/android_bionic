{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0c106cfa_90388ae8",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 363,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2022-02-11T23:35:20Z",
      "side": 1,
      "message": "I think this patch currently would print (null) for an unrecognized number. Maybe it could instead strcpy \"Unknown error \", then format_integer(errno)?\n\nAlternatively, it looks like musl uses \"No error information\" for its %m of an unrecognized number.\n\nThe async-safe logging code already uses functions like strlen, memset, memcpy, strlcpy, so I think it should be OK to use these functions if we wanted to.",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a09811c6_9b0710f9",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 363,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-11T23:42:53Z",
      "side": 1,
      "message": "https://source.corp.google.com/android/bionic/libc/bionic/strerror.cpp;l\u003d188?q\u003dfile:bionic%20strerror_r\u0026sq\u003dpackage:%5Eandroid$ should be doing all that already for free?\n\n(but maybe we should add an explicit test, since that was the whole point of strerror_r rather than strerror --- getting this functionality for free *without* clobbering the TLS for strerror :-) )",
      "parentUuid": "0c106cfa_90388ae8",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fc02f9e_663237b0",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 363,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2022-02-11T23:46:48Z",
      "side": 1,
      "message": "Oh right, yes, it should already work.",
      "parentUuid": "a09811c6_9b0710f9",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9c34ef_341ac734",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 395,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-11T21:22:08Z",
      "side": 1,
      "message": "(sorry i didn\u0027t notice this before --- these should probably be `\u0026\u0026` rather than the python-esque `and` :-) i\u0027m surprised we have \u003ciso646.h\u003e included here! [https://en.cppreference.com/w/c/language/operator_alternative])",
      "range": {
        "startLine": 395,
        "startChar": 20,
        "endLine": 395,
        "endChar": 23
      },
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e813360_00f015e2",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 395,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2022-02-12T00:39:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e9c34ef_341ac734",
      "range": {
        "startLine": 395,
        "startChar": 20,
        "endLine": 395,
        "endChar": 23
      },
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28d730d4_3f97dfa0",
        "filename": "tests/async_safe_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2022-02-12T00:39:48Z",
      "side": 1,
      "message": "And I see the expected result differs from different environment. I will correct this, too.",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab5d4be0_8b14dba5",
        "filename": "tests/async_safe_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-15T19:30:44Z",
      "side": 1,
      "message": "the easier fix is just something like `errno \u003d ENOENT;` before the async_safe_format_buffer() call ... that way your original hard-coded `EXPECT_STREQ(\"aNo such file or directoryZ\", buf);` assertion would work fine :-)",
      "parentUuid": "28d730d4_3f97dfa0",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dff7e13_7e522ca0",
        "filename": "tests/async_safe_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2022-02-15T19:34:37Z",
      "side": 1,
      "message": "I tried hard code but presubmit check will fail cuz there are different types of errno. I can try to set errno!",
      "parentUuid": "ab5d4be0_8b14dba5",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc3016f9_3e2f287f",
        "filename": "tests/async_safe_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2022-02-15T19:38:38Z",
      "side": 1,
      "message": "I don\u0027t think adding `errno \u003d ENOENT;` might work? If add it in the test file, presubmit check still fail cuz the error msg is fixed. If add it in the `async_safe_log.cpp`, the errno might be expected to be other number in different situations?",
      "parentUuid": "2dff7e13_7e522ca0",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2be882_552ff506",
        "filename": "tests/async_safe_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-15T21:00:16Z",
      "side": 1,
      "message": "\u003e If add it in the test file, presubmit check still fail cuz the error msg is fixed.\n\ncan you show an example? i\u0027m not sure what you mean.\n\nwe already use that trick in tests, including explicitly for %m --- https://source.corp.google.com/search?q\u003dfile:bionic%2Ftest%20errno%5C%20%3D%5C%20E\u0026sq\u003dpackage:%5Eandroid$\n\n(setting `errno \u003d 0` is *far* more common in tests, because that\u0027s required any time you have a test that checks that a function has set errno. but non-0 is more intention-revealing here.)",
      "parentUuid": "dc3016f9_3e2f287f",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}