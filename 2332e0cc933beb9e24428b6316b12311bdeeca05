{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0c106cfa_90388ae8",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 363,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2022-02-11T23:35:20Z",
      "side": 1,
      "message": "I think this patch currently would print (null) for an unrecognized number. Maybe it could instead strcpy \"Unknown error \", then format_integer(errno)?\n\nAlternatively, it looks like musl uses \"No error information\" for its %m of an unrecognized number.\n\nThe async-safe logging code already uses functions like strlen, memset, memcpy, strlcpy, so I think it should be OK to use these functions if we wanted to.",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a09811c6_9b0710f9",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 363,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-11T23:42:53Z",
      "side": 1,
      "message": "https://source.corp.google.com/android/bionic/libc/bionic/strerror.cpp;l\u003d188?q\u003dfile:bionic%20strerror_r\u0026sq\u003dpackage:%5Eandroid$ should be doing all that already for free?\n\n(but maybe we should add an explicit test, since that was the whole point of strerror_r rather than strerror --- getting this functionality for free *without* clobbering the TLS for strerror :-) )",
      "parentUuid": "0c106cfa_90388ae8",
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9c34ef_341ac734",
        "filename": "libc/async_safe/async_safe_log.cpp",
        "patchSetId": 6
      },
      "lineNbr": 395,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-11T21:22:08Z",
      "side": 1,
      "message": "(sorry i didn\u0027t notice this before --- these should probably be `\u0026\u0026` rather than the python-esque `and` :-) i\u0027m surprised we have \u003ciso646.h\u003e included here! [https://en.cppreference.com/w/c/language/operator_alternative])",
      "range": {
        "startLine": 395,
        "startChar": 20,
        "endLine": 395,
        "endChar": 23
      },
      "revId": "2332e0cc933beb9e24428b6316b12311bdeeca05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}