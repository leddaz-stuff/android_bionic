{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55113c8d_2c283b65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-25T23:33:06Z",
      "side": 1,
      "message": "makes sense to me, but defer to rprichard for +2.\n\n(i\u0027d also prefer to wait until we\u0027re no longer auto-merging into sc-dev, since this is for T.)",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56703614_420d9e8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1558410
      },
      "writtenOn": "2021-04-06T18:00:18Z",
      "side": 1,
      "message": "Pending feature exception, is this a change we could consider taking in S?",
      "parentUuid": "55113c8d_2c283b65",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed6556ab_88115e47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-04-06T23:58:41Z",
      "side": 1,
      "message": "what would your sales pitch for getting a feature exception for this in S sound like? it\u0027s _really_ late to be taking a new feature in S. do you have customers signed up to actually _use_ this in S?",
      "parentUuid": "56703614_420d9e8c",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aab7c231_10e2920f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1558410
      },
      "writtenOn": "2021-04-13T21:36:12Z",
      "side": 1,
      "message": "Feature was approved for exception in b/158135888 for memory improvements to P21, provided we limit scope to P21 only. Do you have any thoughts on how best to adapt this patch assuming we move forward? We were considering gating this feature behind a property as a possible solution.",
      "parentUuid": "ed6556ab_88115e47",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b2d947_760d15f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-04-13T22:45:10Z",
      "side": 1,
      "message": "yeah, i think rprichard had some specific app compat concerns (and i always have the general concern, especially since it\u0027s so late), so something like a property (or just the /sys file that was mentioned on the bug?) seems like it would make this less likely to cause trouble.\n\ni was thinking that -- since your goal here is to enable this for libart -- that we can\u0027t help but inflict this on all apps, but that\u0027s not entirely true --- some libraries in their address space (libart) will get this, but that doesn\u0027t mean that we can\u0027t check the app\u0027s target api level for app library loads (like we do for some other libc features [grep for `target_sdk_` in bionic/linker for  linker examples]).",
      "parentUuid": "aab7c231_10e2920f",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3176c893_012f4a9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-04-14T00:37:28Z",
      "side": 1,
      "message": "If the loader respects p_align larger than 4KiB, then I would expect it to also ensure that (p_vaddr % p_align) \u003d\u003d (mapped_address % p_align). That\u0027s currently the case but only if we pretend p_align is 4KiB.\n\nIIUC, it wouldn\u0027t be the case if the first PT_LOAD\u0027s p_vaddr wasn\u0027t a multiple of the maximum p_align.\n",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93943eda_2636d72d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1558410
      },
      "writtenOn": "2021-04-22T21:36:44Z",
      "side": 1,
      "message": "I added a check for the existence of \"/sys/kernel/mm/transparent_hugepage/enabled\" and an application sdk level check. Do you think it makes sense to go further and disable this when enabled is set to \"never\"?",
      "parentUuid": "d7b2d947_760d15f7",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "819e3f37_18a9d963",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-04-23T02:16:47Z",
      "side": 1,
      "message": "i think having _some_ kind of device-wide opt out makes sense. i don\u0027t have a strong opinion on whether it should be /sys/kernel/mm/transparent_hugepage/enabled \u003d\u003d \"never\" or a system property or whatever. (though to help you decide, the question to ask yourself is probably something along the lines of \"is there a use for /sys/kernel/mm/transparent_hugepage/enabled !\u003d \"never\" but disabling this?\". maybe also \"is an OEM going to be able to ensure that /sys/kernel/mm/transparent_hugepage/enabled \u003d\u003d \"never\" if they need to?\")",
      "parentUuid": "93943eda_2636d72d",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e768bc0d_8b213a34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1558410
      },
      "writtenOn": "2021-04-23T21:06:56Z",
      "side": 1,
      "message": "Got it, thanks for the guidance. Since OEMs can set \"never\" on the kernel command line, it seems like a good fit for the device-level toggle. Will follow up with the memory team on whether it\u0027s worthwhile to use a sysprop to flag file-backed THP functionality independently.",
      "parentUuid": "819e3f37_18a9d963",
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bcc0ea0_200a021f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-04-14T00:37:28Z",
      "side": 1,
      "message": "I think(?) this new align_down call is going to weaken or disable the randomization (arc4random_uniform) that the previous line is doing, at least in the case where the library doesn\u0027t cross a 2MiB boundary and only needs 4KiB alignment.\n\nIn that case, align is 256KiB, which is necessary for the CFI security feature, but after mapping an exclusive span of 256KiB chunks, the loader picks a random 4KiB-aligned span within the larger span.",
      "range": {
        "startLine": 621,
        "startChar": 11,
        "endLine": 621,
        "endChar": 16
      },
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ab367ed_63e548f9",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1558410
      },
      "writtenOn": "2021-04-22T21:36:44Z",
      "side": 1,
      "message": "How does this look? I separated the concept of the starting address alignment from the mapping alignment. The logic outside of starting address selection is now unaffected unless the start_alignment exceeds kLibraryAlignment in which case we round up.",
      "parentUuid": "7bcc0ea0_200a021f",
      "range": {
        "startLine": 621,
        "startChar": 11,
        "endLine": 621,
        "endChar": 16
      },
      "revId": "3ba1fbfc57c124b338703e32dea27aaeffe6af58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}