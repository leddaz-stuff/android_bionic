{
  "comments": [
    {
      "key": {
        "uuid": "e190920b_1f8de331",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-03-11T17:12:35Z",
      "side": 1,
      "message": "Did you mean \"Move\"?",
      "range": {
        "startLine": 9,
        "startChar": 3,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2168ea9d_f1974340",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-03-13T04:48:04Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "e190920b_1f8de331",
      "range": {
        "startLine": 9,
        "startChar": 3,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "018e86ef_60aa528a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-03-11T17:12:35Z",
      "side": 1,
      "message": "s/Using/Use/",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 11,
        "endChar": 8
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c178ee71_6bed0139",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-03-13T04:48:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "018e86ef_60aa528a",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 11,
        "endChar": 8
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e190920b_5fc60b4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-03-11T17:12:35Z",
      "side": 1,
      "message": "I don\u0027t see any lock acquisitions getting removed?  Perhaps clarify?",
      "range": {
        "startLine": 12,
        "startChar": 17,
        "endLine": 12,
        "endChar": 35
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_b95040b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-03-13T04:48:04Z",
      "side": 1,
      "message": "Because I has not decided whether to keep or remove pthread_accessor.h yet. I want to remove the lock step by\nstep.",
      "parentUuid": "e190920b_5fc60b4b",
      "range": {
        "startLine": 12,
        "startChar": 17,
        "endLine": 12,
        "endChar": 35
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1970e01_de6b05ef",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-03-11T17:12:35Z",
      "side": 1,
      "message": "That seems like a very odd thing to do, even if glibc really does this.  This is a dangerous client bug: If the detach had been timed a bit differently, all sorts of weird things could have happened, especially if the tid is recycled. At a minimum, I think we should return EINVAL, which would be consistent with our behavior if these happened in the opposite order.  There is also an argument for abort(), or whatever our usual equivalent of \"panic\" is.\n\nPosix says \"undefined behavior\", so I think either is fine.",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0167660f_f89a916c",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-11T17:18:35Z",
      "side": 1,
      "message": "i think part of the reason there\u0027s a comment here is because something was relying on it. annoyingly, we didn\u0027t include the bug number in the comment. git blame/log might be able to enlighten you though.",
      "parentUuid": "c1970e01_de6b05ef",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01dcc6fb_b072d8de",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-03-11T17:50:41Z",
      "side": 1,
      "message": "My problem at the moment is that, assuming we are not relying on it internally, I don\u0027t see how anyone can rely on this without exposing themselves to catastrophic breakage under a different thread schedule.  If I detach a thread that\u0027s intended to be joined, the thread id can be reused, and the actual join can join the wrong thread, returning the wrong value, right?  There are probably few people who could successfully debug that ...\n\nI was unfortunately not enlightened by the git log.  The code, in some form, was already there before June 2013.",
      "parentUuid": "0167660f_f89a916c",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1c05a16_4de51928",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-11T18:01:02Z",
      "side": 1,
      "message": "we can certainly try it and see what breaks, but we should make behavioral changes in a separate CL for ease of reverting.\n\n(in practice, because a pthread_t is an mmap address they probably don\u0027t get reused very often, so you probably could get away with this.)\n\nwhy do we need the loop?",
      "parentUuid": "01dcc6fb_b072d8de",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_9900dcb7",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-03-13T04:48:04Z",
      "side": 1,
      "message": "Ok. I will try to return EINVAL in the next CL. There seems to have two main use of pthread_detach in aosp, one is just after pthread_create, the other is just before pthread_exit.\n\nThe loop is necessary because the atomic_compare_exchange_weak may fail, like when pthread_detach is called while pthread_exit is changing join_state from THREAD_NOT_JOINED to THREAD_EXITED_NOT_JOINED. code refactored to make it more clear.",
      "parentUuid": "a1c05a16_4de51928",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c178ee71_dd45fc74",
        "filename": "libc/bionic/pthread_detach.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-13T05:47:21Z",
      "side": 1,
      "message": "ah, yes, the new version makes much more sense to me.",
      "parentUuid": "414a3e43_9900dcb7",
      "range": {
        "startLine": 52,
        "startChar": 21,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "67c2552163766841e82c960c3708029fd23c46d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}