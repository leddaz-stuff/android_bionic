{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06c970eb_18a63d03",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "both of these should be \"may need\", right?",
      "range": {
        "startLine": 56,
        "startChar": 32,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff636baf_553095ee",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06c970eb_18a63d03",
      "range": {
        "startLine": 56,
        "startChar": 32,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04572d1e_fa4e140d",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2023-12-12T18:58:38Z",
      "side": 1,
      "message": "As in the comment, we always want to use monotonic time here. Instead of changing FutexWithTimeout, how about calling realtime_time_from_monotonic_time() in __futex_pi_lock_ex() when FUTEX_LOCK_PI fallback is used?",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 41
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39f0a17f_b4a0f243",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Not sure what you mean. The use_realtime_clock parameter sets the clockbase of the abs_timeout parameter.  Moving the conversion out would confuse the flag meaning.\n\nIf you are worried about any regression, I updated the pthread_tests to check the NonPI timedlock as well.",
      "parentUuid": "04572d1e_fa4e140d",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 41
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4130ff06_ab0ee634",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2023-12-13T18:06:43Z",
      "side": 1,
      "message": "As the comment in Line 46-48, we always use clock monotonic when possible. Since no caller is using FUTEX_CLOCK_REALTIME, we can simplify the if conditions like below:\n\nif (abs_timeout) {\n  // FUTEX_LOCK_PI only supports realtime clock.\n  if ((op \u0026 FUTEX_CMD_MASK) \u003d\u003d FUTEX_LOCK_PI) {\n    if (!use_realtime_clock) {\n      realtime_time_from_monotonic_time();\n    }\n  } else {\n    op \u0026\u003d ~FUTEX_CLOCK_REALTIME;  // This line is optional, but in case you care.\n    if (use_realtime_clock) {\n      monotonic_time_from_realtime_time();\n    }\n  }\n}\n\nFurther, we can move the code handling FUTEX_LOCK_PI case to __futex_pi_lock_ex(), since it is the only one using FUTEX_LOCK_PI. But it\u0027s up to you.",
      "parentUuid": "39f0a17f_b4a0f243",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 41
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0dcc0b42_6a376569",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-13T20:14:52Z",
      "side": 1,
      "message": "A good idea! I\u0027ve changed as above.",
      "parentUuid": "4130ff06_ab0ee634",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 41
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "862debaa_f4d3321b",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "use the _Nonnull annotation instead?",
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e40a56b_8e9e0294",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "862debaa_f4d3321b",
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5bcc6b3_6a727dc1",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "862debaa_f4d3321b",
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e5c72a4_14609a2b",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "what does this mean? FUTEX_LOCK_PI2 was added in 5.14, which is pretty old now. seems like we should be adding support for that, even if we still need an EINVAL fallback for a few more years.",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 21
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0894d4e_7a3e7283",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2023-12-12T18:58:38Z",
      "side": 1,
      "message": "And we may use a \"static std::atomic\u003cint\u003e\" to cache whether FUTEX_LOCK_PI2 is supported.",
      "parentUuid": "8e5c72a4_14609a2b",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 21
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf6eb0a_466e0ac6",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done.  I used a Meyer\u0027s singleton to probe the FUTEX_LOCK_PI2 support. P7 is 5.10, P8 is 5.15.",
      "parentUuid": "8e5c72a4_14609a2b",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 21
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428b7445_64d4e38b",
        "filename": "libc/bionic/bionic_time_conversions.cpp",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "no need for these; we don\u0027t have warn_unused_result on clock_gettime().",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 8
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3923af53_b06b8790",
        "filename": "libc/bionic/bionic_time_conversions.cpp",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done.  I was using (void) as a [sic] annotation that we are dropping the return check, even though the input parameter is not verified.  As the only use of this is with fixed valid clockid_t, and there is no visibility outside this compilation unit there is no problem.",
      "parentUuid": "428b7445_64d4e38b",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 8
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e29b78ca_25aca38e",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2446,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "what does this mean?",
      "range": {
        "startLine": 2446,
        "startChar": 73,
        "endLine": 2446,
        "endChar": 93
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad9bda52_1be69bf2",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2446,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Using 1\u0027000\u0027000\u0027000 as an integral constant (i.e. NS_PER_S which doesn\u0027t have LL) in the multiplies below will overflow on ILP32; an int64_t constant forces 64b multiplies.  If this is confusing, I\u0027ll remove the comment.",
      "parentUuid": "e29b78ca_25aca38e",
      "range": {
        "startLine": 2446,
        "startChar": 73,
        "endLine": 2446,
        "endChar": 93
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d2931d0_3774130d",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2446,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T22:59:38Z",
      "side": 1,
      "message": "probably better to fix the existing constant to add the `LL`?",
      "parentUuid": "ad9bda52_1be69bf2",
      "range": {
        "startLine": 2446,
        "startChar": 73,
        "endLine": 2446,
        "endChar": 93
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9eeccbc_c07774e2",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2446,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-13T00:44:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d2931d0_3774130d",
      "range": {
        "startLine": 2446,
        "startChar": 73,
        "endLine": 2446,
        "endChar": 93
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1158452_6b61e736",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2447,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-12-12T15:38:46Z",
      "side": 1,
      "message": "if the reader couldn\u0027t work that out from the name, this comment isn\u0027t going to help them!",
      "range": {
        "startLine": 2447,
        "startChar": 73,
        "endLine": 2447,
        "endChar": 86
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37439abb_6283c6a6",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2447,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1158452_6b61e736",
      "range": {
        "startLine": 2447,
        "startChar": 73,
        "endLine": 2447,
        "endChar": 86
      },
      "revId": "be9cddce00a0521c9462907988e8b2582f45cdf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}