{
  "comments": [
    {
      "key": {
        "uuid": "2925efdd_52fdddbe",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-08-07T12:24:01Z",
      "side": 1,
      "message": "Ah you already have a method to set the targetSdkVersion. Will this be called only once, or updated when @TargetSdkVersion() temporarily changes libcore\u0027s concept of targetSdkVersion?\n\nEither way, as mentioned in my previous comment, configuring this behavior via the new API from http://b/135010838 seems like it\u0027ll be much more maintainable than via targetSdk and system properties. The only problem is that the API is not yet accessible to native code and that its _implementation_ for .java code is incomplete; so I guess doing something like you\u0027re doing here might be okay for now, but we should probably change it to the new API before the end of the year. WDYT?",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c0fe1f0_6dba8af5",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1463094
      },
      "writtenOn": "2019-08-07T12:52:44Z",
      "side": 1,
      "message": "Thanks Tobias!\n\nJosh: see go/nonsdk/dev/compat-framework\nI\u0027ll try to move this to using our framework once we have native support if you don\u0027t mind.",
      "parentUuid": "2925efdd_52fdddbe",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77b4c777_31c8b2b7",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-08-07T15:10:58Z",
      "side": 1,
      "message": "neither that doc, nor the bug, nor the other doc linked from the bug mention @TargetSdkVersion. where are the docs for this? (i\u0027m struggling to think what it could mean.)\n\ni also don\u0027t see the relevance to this CL, but maybe that will be clearer when we\u0027ve seen the documentation for @TargetSdkVersion...",
      "parentUuid": "8c0fe1f0_6dba8af5",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84ea072a_930961f8",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-08-07T19:53:34Z",
      "side": 1,
      "message": "\u003e Ah you already have a method to set the targetSdkVersion. Will this be called only once, or updated when @TargetSdkVersion() temporarily changes libcore\u0027s concept of targetSdkVersion?\n\nIt should get called by @TargetSdkVersion: https://android.googlesource.com/platform/art/+/master/runtime/native/dalvik_system_VMRuntime.cc#260\n\n\u003e Either way, as mentioned in my previous comment, configuring this behavior via the new API from http://b/135010838 seems like it\u0027ll be much more maintainable than via targetSdk and system properties. The only problem is that the API is not yet accessible to native code and that its _implementation_ for .java code is incomplete; so I guess doing something like you\u0027re doing here might be okay for now, but we should probably change it to the new API before the end of the year. WDYT?\n\nI\u0027m not sure what a native API would look like: we don\u0027t have a concept of target sdk level for purely native code, right? If you just mean that we should use this in zygote-derived processes, I think calling down to a one line JNI function that does this call should be good enough?",
      "parentUuid": "77b4c777_31c8b2b7",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f839eaf_26b61dc7",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-08-07T20:18:06Z",
      "side": 1,
      "message": "There are two aspects here: the right approach (a) right now, (b) in the longer term.\n\nFor (a), my mention of @TargetSdkVersion was referring the JUnit rule from the [1]; the only documentation that I\u0027m aware of is the one in that file. Under the hood, it calls VMRuntime.setTargetSdkVersion() (see line 142 of [1]). So my question was whether that was hooked up with this method here. Looks like it is (as Josh also worked out).\n\nFor reference, an example use of @TargetSdkVersion in a *Test.java file is [2].\n\nFor (b), when the corresponding infrastructure is ready, hopefully this year, my feeling is that targetSdkVersion is not the right abstraction level to use here. The code shouldn\u0027t hard-code that the compat behavior should happen if and only if targetSdkVersion \u003c\u003d X. Instead (once the API is ready), it should be asking that API whether this particular behavior change should exhibit the new old the compat behavior; whether that is based on targetSdkVersion or something else is an implementation detail that this code here need not concern itself with.\n\nSee the design linked from http://b/135010838.\n\n[1] https://android.googlesource.com/platform/libcore/+/master/test-rules/src/main/java/libcore/junit/util/SwitchTargetSdkVersionRule.java\n\n[2] https://android.googlesource.com/platform/libcore/+/master/luni/src/test/java/org/apache/harmony/regex/tests/java/util/regex/PatternTest.java#210",
      "parentUuid": "84ea072a_930961f8",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e29720e_f1cfad31",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-08-07T21:33:33Z",
      "side": 1,
      "message": "i\u0027m not sure i\u0027ve understood the TL;DR of \"logging and gating\", but i don\u0027t think it\u0027s relevant for fdsan. fdsan isn\u0027t an API, it\u0027s a behavioral change to all of the fd creating/destroying APIs.",
      "parentUuid": "8f839eaf_26b61dc7",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "444896d0_58fbd3ca",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-08-07T22:14:27Z",
      "side": 1,
      "message": "\"behavior change\" means that there is a new behavior (crash early), and a compat behavior (let apps do the dangerous thing even though that will lead to some undefined / bad state down the track). In this particular case, because the behavior change crashes apps, while apps will want to find out that they\u0027re doing the wrong thing, reproducibly crashing for end users is not necessarily desirable; so there should be a way to turn this off.\n\nIn other ways: What I\u0027m saying is that we should not hard code that the behavior change is tied to a targetSdkVersion. It can be based on targetSdkVersion in most cases, but we should have the option to override this based on other factors (e.g. per-app), without having to recompile the system. This is what the \"logging and gating\" design has the potential to allow configuring at runtime.",
      "parentUuid": "8e29720e_f1cfad31",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65535a90_111dc015",
        "filename": "linker/linker_sdk_versions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-08-12T11:12:43Z",
      "side": 1,
      "message": "PS. The fact that this CL had to be rolled back is an example for why this behavior change would be good to gate based on an API such as the one I mentioned, because that kind of API has the potential (not implemented yet) to allow us to roll back the behavior specifically for some apps / processes, without having to roll back the code change.",
      "parentUuid": "444896d0_58fbd3ca",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 39
      },
      "revId": "93a9b7a3a4a3b988180a3df0f9920b0ecb5590d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}