{
  "comments": [
    {
      "key": {
        "uuid": "31a6c1c4_8f6e55f6",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-08-31T18:19:29Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to replace this with:\n\nif (__builtin_add_overflow(abs_ts.tv_sec, ts.tv_sec, \u0026abs_ts.tv_sec)) {\n  // Handle overflow.\n  abs_ts.tv_sec \u003d INT32_MAX;\n}\n\nThen you don\u0027t need to do anything special down below.\n\nYou could do the same for the add of tv_nsec, and for the ++ too just in case you wound up with INT_MAX32 from above.",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31a6c1c4_2ff009c6",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1072203
      },
      "writtenOn": "2016-08-31T19:07:23Z",
      "side": 1,
      "message": "\u003e Wouldn\u0027t it be better to replace this with:\n \u003e \n \u003e if (__builtin_add_overflow(abs_ts.tv_sec, ts.tv_sec,\n \u003e \u0026abs_ts.tv_sec)) {\n \u003e // Handle overflow.\n \u003e abs_ts.tv_sec \u003d INT32_MAX;\n \u003e }\n \u003e \n \u003e Then you don\u0027t need to do anything special down below.\n \u003e \n \u003e You could do the same for the add of tv_nsec, and for the ++ too\n \u003e just in case you wound up with INT_MAX32 from above.\n\nYet another thing I wasn\u0027t aware existed. Not surprising...\n\nI think it would make more sense to do the \"abs_ts.tv_sec +\u003d ts.tv_sec\" after the \"abs_ts.tv_nsec +\u003d ts.tv_nsec\" handling. Then we\u0027d only need to do __builtin_add_overflow once for tv_sec rather than twice. (If this code is around two decades from now for abs_ts.tv_sec++ to overflow then we\u0027ve got bigger problems)\n\nI\u0027m not sure about how to handle a tv_nsec overflow though. The maximum tv.tv_sec was at least a valid timespec, but tv.tv_nsec being over NS_PER_S might be a case to return an error. I can check what the behavior with tv.tv_nsec being over NS_PER_S was in previous releases, because at the very least if it didn\u0027t work then it shouldn\u0027t work now.",
      "parentUuid": "31a6c1c4_8f6e55f6",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31a6c1c4_124fea34",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-08-31T20:15:32Z",
      "side": 1,
      "message": "i think this is another argument for EINVAL --- the overflow behavior was never defined, and the behavior has already differed between releases.\n\nbut, yeah, __builtin_add_overflow is a good idea.\n\nwhat app hit this, and what was their intention? (i\u0027m wondering whether we should abort instead of EINVAL to make the problem easier to debug.)",
      "parentUuid": "31a6c1c4_2ff009c6",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31a6c1c4_f5917049",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1072203
      },
      "writtenOn": "2016-09-01T18:10:08Z",
      "side": 1,
      "message": "\u003e i think this is another argument for EINVAL --- the overflow\n \u003e behavior was never defined, and the behavior has already differed\n \u003e between releases.\n \u003e \n \u003e but, yeah, __builtin_add_overflow is a good idea.\n \u003e \n \u003e what app hit this, and what was their intention? (i\u0027m wondering\n \u003e whether we should abort instead of EINVAL to make the problem\n \u003e easier to debug.)\n\nThe problem is that it *didn\u0027t* overflow before. absolute_timespec_from_timespec is new from change I6b3b9b2feae03680654cd64c3112ce7644632c87 (\"Use FUTEX_WAIT_BITSET to avoid converting timeouts.\")\n\nI actually hit this while bringing up the Galaxy Nexus on Nougat, it appears to be in a number of Samsung RILs. The intention is something like \"if function X gets a timeout other than 0 use it, otherwise just use MAX_TIMEOUT\". I\u0027m just patching the conveniently-exported MAX_TIMEOUT symbol at runtime to avoid the overflow altogether.\n\nObviously, supporting stuff from the Galaxy Nexus isn\u0027t a concern here, and I don\u0027t know if any apps are doing this. I just know it\u0027s a bug.",
      "parentUuid": "31a6c1c4_124fea34",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f16a69fa_e966dde2",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-08-31T15:51:35Z",
      "side": 1,
      "message": "given that you\u0027re inside a !__LP64__, this case and the one below can\u0027t happen.\n\nwe should just use std::numeric_limits\u003ctime_t\u003e::max here.\n\n...except that this seems wrong. we should return EINVAL like we do when timespec_from_timeval fails.",
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31a6c1c4_2f92c903",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1072203
      },
      "writtenOn": "2016-08-31T18:18:39Z",
      "side": 1,
      "message": "\u003e given that you\u0027re inside a !__LP64__, this case and the one below\n \u003e can\u0027t happen.\n\nJust trying to be thorough, been taught not to assume time_t\u0027s size. I figured the compiler would be smart enough to optimize the extra away anyway.\n\n \u003e we should just use std::numeric_limits\u003ctime_t\u003e::max here.\n\nWas not aware that existed. That sounds much better.\n\n \u003e ...except that this seems wrong. we should return EINVAL like we do\n \u003e when timespec_from_timeval fails.\n\nThis created a behavior change though where this code is used. Considering this is all for legacy code I believe it should preserve the legacy behavior.",
      "parentUuid": "f16a69fa_e966dde2",
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31a6c1c4_cf269dd4",
        "filename": "libc/private/bionic_time_conversions.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-08-31T18:24:05Z",
      "side": 1,
      "message": "\u003e we should just use std::numeric_limits\u003ctime_t\u003e::max here.\n\nI don\u0027t think we have that available here?",
      "parentUuid": "f16a69fa_e966dde2",
      "revId": "ce989813c2338ae0c710b6938ddb49980954054e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}