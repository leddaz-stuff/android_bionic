{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e3aec2_36aaec16",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2021-10-29T05:36:17Z",
      "side": 1,
      "message": "Does this one belong in `libc_init_static` instead really? That only gets used additionally for regular `libc`, but I half-wonder if we\u0027re not going to see problems from the ifunc there too (but just aren\u0027t seeing it yet).",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d720fc2_9fc39735",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-10-29T05:51:41Z",
      "side": 1,
      "message": "I see code in libc_init_static.cpp for calling ifuncs, but I\u0027d guess that\u0027s not an issue with LTO? Outside of tests, the only \"attribute.*ifunc\" I see in bionic is in DEFINE_IFUNC_FOR in bionic_ifuncs.h, and DEFINE_IFUNC_FOR is only used in the arch-*/dynamic_function_dispatch.cpp files. There are also arch-*/static_function_dispatch.S files, but those are assembly.\n\nI\u0027m wondering if disabling LTO has any effect here. I think libc_nomalloc.a just collects the object files of its input libraries, so I\u0027d guess that disabling LTO on it wouldn\u0027t trigger a non-LLVM-IR build of the input archives\u0027 objects. Maybe only libc_dynamic_dispatch needs \"lto: { never: true }\"?",
      "parentUuid": "b6e3aec2_36aaec16",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92865cd0_9f25137a",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1087625
      },
      "writtenOn": "2021-10-29T06:27:47Z",
      "side": 1,
      "message": "If I remove it from libc_nomalloc, I get the following error:\n\nld.lld: error: relocation R_AARCH64_CALL26 cannot refer to absolute symbol: strcat\n\u003e\u003e\u003e defined in out/soong/.intermediates/bionic/libc/libc_nomalloc/android_arm64_armv8-a_static_apex10000/libc_nomalloc.a(strcat.o)\n\u003e\u003e\u003e referenced by string.h:106 (bionic/libc/include/bits/fortify/string.h:106)\n\u003e\u003e\u003e               lto.tmp:(socket_make_sockaddr_un(char const*, int, sockaddr_un*, unsigned int*))\nclang-13: error: linker command failed with exit code 1 (use -v to see invocation)",
      "parentUuid": "3d720fc2_9fc39735",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f06e576_fa069051",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1087625
      },
      "writtenOn": "2021-10-29T06:47:02Z",
      "side": 1,
      "message": "Turning off LTO for strcat.o can workaround this breakage.",
      "parentUuid": "92865cd0_9f25137a",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac5b80d4_d25eb676",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-29T15:59:48Z",
      "side": 1,
      "message": "that seems too fragile to be worth the trouble though? i wouldn\u0027t expect to see much LTO benefit with libc, since -- despite the fact that it\u0027s 1MiB of code, it\u0027s basically \"lots of tiny C programs that don\u0027t have much to do with each other\". it\u0027s just a big bag of stuff (where the compiler deciding to be \"clever\" and inline calls to other functions is almost always a *bug* anyway, since you should be able to intercept most stuff, and a lot of people rely on that). having LTO always off for libc seems like a feature rather than a bug to me? (and, indeed, the linker seems like the one place where that might not be true... that\u0027s a megabyte of code all pulling in the same direction, that users can\u0027t really influence...)",
      "parentUuid": "2f06e576_fa069051",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efe977c8_c4ba61b1",
        "filename": "libc/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1604,
      "author": {
        "id": 1087625
      },
      "writtenOn": "2021-11-03T14:57:53Z",
      "side": 1,
      "message": "Done. LTO turned off for all libc libraries.",
      "parentUuid": "ac5b80d4_d25eb676",
      "revId": "f8b4dfde3290783d9b06a1ddb64e6cfee7eef7b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}