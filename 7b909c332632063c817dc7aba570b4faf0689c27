{
  "comments": [
    {
      "key": {
        "uuid": "d3477f76_88abf22b",
        "filename": "libm/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-08-23T19:35:03Z",
      "side": 1,
      "message": "whitespace",
      "range": {
        "startLine": 62,
        "startChar": 55,
        "endLine": 62,
        "endChar": 56
      },
      "revId": "7b909c332632063c817dc7aba570b4faf0689c27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e7674f7_51f90793",
        "filename": "libm/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1331125
      },
      "writtenOn": "2018-09-03T13:02:13Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "d3477f76_88abf22b",
      "range": {
        "startLine": 62,
        "startChar": 55,
        "endLine": 62,
        "endChar": 56
      },
      "revId": "7b909c332632063c817dc7aba570b4faf0689c27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eedfab95_ec7ae34b",
        "filename": "libm/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-08-23T19:35:03Z",
      "side": 1,
      "message": "rintl can\u0027t affect the fenv on arm64, can it? so this can just be a one-liner (and in fake-long-double)?",
      "revId": "7b909c332632063c817dc7aba570b4faf0689c27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287181bf_879f7956",
        "filename": "libm/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1331125
      },
      "writtenOn": "2018-09-03T13:02:13Z",
      "side": 1,
      "message": "The generic version does:\n\nlibm/upstream-freebsd/lib/msun/src/s_rintl.c\n\n 56 long double\n 57 rintl(long double x)\n 58 {\n[...]\n 81         x +\u003d shift[sign];\n 82         x -\u003d shift[sign];\n[...]\n\nWhich can raise FE_INEXACT.",
      "parentUuid": "eedfab95_ec7ae34b",
      "revId": "7b909c332632063c817dc7aba570b4faf0689c27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98330cc8_309f5eb4",
        "filename": "libm/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1331125
      },
      "writtenOn": "2018-09-03T20:39:57Z",
      "side": 1,
      "message": "In fact I am not sure about the compiler runtime contract for routines for floating point emulation regarding floating point environment. I know at least for IBM long double FP emulation the libgcc routines does change the fenv on the default FP environment. However, at least for aarch64, clang/compiler-rt indeed seems to not use single/double FP operations so I think it should be safe to just call rintl without messing with fenv.",
      "parentUuid": "287181bf_879f7956",
      "revId": "7b909c332632063c817dc7aba570b4faf0689c27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}