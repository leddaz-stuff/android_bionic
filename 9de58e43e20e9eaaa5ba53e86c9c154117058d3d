{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8818daba_0c2f13a9",
        "filename": "libc/bionic/libc_init_static.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2021-01-13T23:05:12Z",
      "side": 1,
      "message": "Shouldn\u0027t it be level !\u003d M_HEAP_TAGGING_LEVEL_NONE?",
      "revId": "9de58e43e20e9eaaa5ba53e86c9c154117058d3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752b2cb8_c1f566ba",
        "filename": "libc/bionic/libc_init_static.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2021-01-13T23:39:29Z",
      "side": 1,
      "message": "__get_heap_tagging_level returns M_HEAP_TAGGING_LEVEL_TBI if there\u0027s no MTE support (and we only want to try and fallback to TBI if MTE was supported)",
      "parentUuid": "8818daba_0c2f13a9",
      "revId": "9de58e43e20e9eaaa5ba53e86c9c154117058d3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e8fcd35_cb1d2a92",
        "filename": "libc/bionic/libc_init_static.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2021-01-13T23:43:41Z",
      "side": 1,
      "message": "Okay, it looks like it can\u0027t return NONE.\n\nBut if MTE is supported then we will return on line 322 so we won\u0027t get here, right? So do we need this part of the condition at all?",
      "parentUuid": "752b2cb8_c1f566ba",
      "revId": "9de58e43e20e9eaaa5ba53e86c9c154117058d3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77410f93_c2727e7b",
        "filename": "libc/bionic/libc_init_static.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2021-01-14T01:10:57Z",
      "side": 1,
      "message": "On an aarch64 device without MTE support, and a binary that sets the ELF note, we reach this branch. Because the MTE prctl will fail, we want to execute this \"backup\" prctl to enable TBI instead.",
      "parentUuid": "1e8fcd35_cb1d2a92",
      "revId": "9de58e43e20e9eaaa5ba53e86c9c154117058d3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b08f66bc_18f86af5",
        "filename": "libc/bionic/libc_init_static.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2021-01-14T01:17:11Z",
      "side": 1,
      "message": "This code looks like it might do the same prctl(PR_SET_TAGGED_ADDR_CTRL, PR_TAGGED_ADDR_ENABLE) twice, but I do not think such path is possible.\n\nIt would be nice to make it clear. Ex. the default branch of the switch should bypass the first prctl. Logic could be like this:\ndo we want MTE (sync or async)? \u003d\u003e try prctl, return if successfull.\nif level\u003d\u003d sync/asan then level\u003dtbi\ndo we want TBI? \u003d\u003e try prctl, return if successful\nlevel\u003dnone",
      "parentUuid": "77410f93_c2727e7b",
      "revId": "9de58e43e20e9eaaa5ba53e86c9c154117058d3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}