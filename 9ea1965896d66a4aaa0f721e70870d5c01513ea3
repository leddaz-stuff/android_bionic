{
  "comments": [
    {
      "key": {
        "uuid": "d0959846_fce8887a",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 539,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T03:32:35Z",
      "side": 1,
      "message": "nit: maybe do an inert CL dependency pass to change _all_ NULL to nullptr?",
      "range": {
        "startLine": 539,
        "startChar": 12,
        "endLine": 539,
        "endChar": 16
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "132115d0_1cccab4f",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 539,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-02-07T16:39:36Z",
      "side": 1,
      "message": "In general, I really dislike doing this.  Updating style makes it harder to see why code was written via `git blame` and leaving the style alone makes it clear what code was written before/after we cared about g3 style.",
      "parentUuid": "d0959846_fce8887a",
      "range": {
        "startLine": 539,
        "startChar": 12,
        "endLine": 539,
        "endChar": 16
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6003d018_a22f3631",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 539,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T17:18:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "132115d0_1cccab4f",
      "range": {
        "startLine": 539,
        "startChar": 12,
        "endLine": 539,
        "endChar": 16
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "740c4b17_816513fb",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 307,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-02-07T02:21:39Z",
      "side": 1,
      "message": "Taking this from the original commit, but this does seem wrong.  I think there are two possibilities here:\n\n1) We continue with the is_oem_id() checks and only source the passwd/group files from /vendor, since in a Treble world, all vendor (oem) info should be on /vendor.  We would not use /system/etc/{passwd,group} in this case.\n\n2) We continue with the is_oem_id() checks for vendor, but also check !is_oem_id() \u0026\u0026 !is_valid_app_id() and after having checked android_ids, check /system/etc/{passwd,group}.  We could even move to a future where the android_ids array is deprecated in favor of those files, but honestly, I don\u0027t see a huge gain there.",
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ceaa59b_2d573bb1",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 307,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T03:32:35Z",
      "side": 1,
      "message": "[TL;DR] Yes to option 2. beware of /odm/etc/? Deprecate AID_BIN and AID_DAEMON if you can!\n\nAt incept, we built these files based on the collection of ids, allocating unique values, complaining if not unique. This was wrong minded since I did not conceptualize building /vendor separately, we were all this one big happy family back then. But in the _real_ treble world /system/etc/passwd should never contain oem ids, and /vendor/etc/passwd would.\n\nSo I side with option 2, but this will make the caller interesting since you are filtering the call to only support oem ids.\n\nWe did a cleanup pass replacing as many hard-coded AID_* references as possible with calls to getpwnam. Recognize that /system/etc/passwd can probably take a much distant future to contain the replacement for the android_ids array due to some level of momentum, so both the array and the private android_filesystem_config.h file. However, I can imagine _new_ and interesting contributions adding to /system/etc/passwd because there is more flexibility over the other fields, and we do not run the \u0027risk\u0027 of adding AID_* values, or when we want a uid, but not a gid. I would have liked to have added to /system/etc/passwd and /system/etc/group in https://android-review.googlesource.com/c/platform/system/core/+/608356 rather than add AID_BIN and AID_DAEMON as they now can be abused.\n\nSo, if you do implement /system/etc/passwd and /system/etc/group parsing, do revert c/608356 and add the start of ids that we do _not_ want AID_* associated with.\n\nAlso, gets interesting if we _also_ decide to support the /odm/etc/passwd file; but that collision dispute is between the odm and the partners ...",
      "parentUuid": "740c4b17_816513fb",
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0705b76d_83e8b9e7",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 307,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-02-07T16:35:54Z",
      "side": 1,
      "message": "\u003e Yes to option 2. \n\nSgtm.\n\n\u003ebeware of /odm/etc/? \n\nYes; I\u0027ve been purposefully ignoring that in this CL.  At some point we need to subdivide the \u0027OEM\u0027 range into Vendor/Odm/Product ranges for those three partitions.  I filed b/73062966 for this.\n\n\u003e Deprecate AID_BIN and AID_DAEMON if you can!\n\nYou mean that these only needed to be users and not groups, right?\n\nHow much do we gain if we allow a name to be specified as only a user or group?  The current scripts we have to convert from config.fs to passwd/group don\u0027t have an option to specify something as only a user or only a group.  Seems like we may just leave this as an Android-ism?",
      "parentUuid": "1ceaa59b_2d573bb1",
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "039f0323_21285b77",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 307,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T17:17:32Z",
      "side": 1,
      "message": "No, for these two uid and gid. But I really didn\u0027t want to _make_ AID_BIN or AID_DAEMON and hide them from the private/android_filesystem_config.h API. We can fix this recent transgression without breaking Androidism(s).\n\nI would prefer to grow in a static /system/etc/passwd and /system/etc/group file for runtime, than private/android_filesystem_config.h at build time if at all possible, but that may be just me fighting Androidism :-). The sad part is that one updates two UNIX standard files (passwd and group) instead of one file in a deliciously obscure location .../system/core/libcutils/include/private/android_filesystem_config.h.\n\nsuggestion: .../system/core/rootdir/passwd, and for Androidism\u0027s sake copy to /system/etc/passwd, and autogenerate for now /system/etc/group from the passwd file content?\n\nAnd yes, in the future, an agenda, there may be a need for a uid, without a corresponding gid to enforce refined DAC security. There are a potpourri of external applications and tests that never make the assumption they are the same, or that either one or the other exist (sameness is an Androidism). I figure Androidism that will remain is that we will likely _never_ define a gid with a different name matching a uid, that will create some ecosystem confusion.",
      "parentUuid": "0705b76d_83e8b9e7",
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e9494b_848c9b10",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 308,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T03:32:35Z",
      "side": 1,
      "message": "do not forget to have a companion sepolicy to make this world readable, /system/etc/passwd by default is AFAIK?, but /vendor/etc/passwd is _not_!",
      "range": {
        "startLine": 308,
        "startChar": 5,
        "endLine": 308,
        "endChar": 23
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed38b3b7_bdde4564",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 308,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-02-07T16:34:33Z",
      "side": 1,
      "message": "Right, I\u0027ll need to add that.",
      "parentUuid": "16e9494b_848c9b10",
      "range": {
        "startLine": 308,
        "startChar": 5,
        "endLine": 308,
        "endChar": 23
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ace190b_252d9783",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T03:32:35Z",
      "side": 1,
      "message": "Beware, the POSIX API for getpwnam_r supports propagation of errno from the operation(s), but it is the antipattern that is concerning, it is not in errno, but in the int returned from the function.",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 31
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50532c5d_0e213390",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-02-07T16:34:33Z",
      "side": 1,
      "message": "Hm.  I\u0027m okay with not propagating these errno\u0027s.  It will probably be masked in any case, since either:\n\n1) We fail to find an AID in these files, but we generate a generic oem one and thus return success with errno\u003d0\n2) We fail here and we fail later on too so we\u0027ll be returning an error later on anyway.",
      "parentUuid": "6ace190b_252d9783",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 31
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "482170cd_6fe24500",
        "filename": "libc/bionic/grp_pwd_file.cpp",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-02-07T17:17:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "50532c5d_0e213390",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 31
      },
      "revId": "9ea1965896d66a4aaa0f721e70870d5c01513ea3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}