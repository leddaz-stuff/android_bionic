{
  "comments": [
    {
      "key": {
        "uuid": "78fde205_7ad82163",
        "filename": "libc/private/bionic_ssp.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-14T00:32:48Z",
      "side": 1,
      "message": "FWIW, it looks like Clang\u0027s -fstack-protector instrumentation uses this variable:\n - on arm32\n - on 32-bit x86, before API 17\n\nIt always uses TLS for arm64 or x86_64.",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d508126c_c6537143",
        "filename": "libc/private/bionic_ssp.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-14T00:37:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78fde205_7ad82163",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d0b6dea_c2700007",
        "filename": "tools/versioner/tests/preprocessor/expected/foo.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-14T00:32:48Z",
      "side": 1,
      "message": "maybe this?\n\n  #if defined(__LP64__) || __ANDROID_API__ \u003e\u003d 13",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ffb0d24_f97ca02f",
        "filename": "tools/versioner/tests/preprocessor/expected/foo.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-14T00:37:46Z",
      "side": 1,
      "message": "that\u0027s then the same as the third example, right? (i\u0027m not sure exactly what these different cases were meant to cover. i\u0027m assuming they\u0027d be more interesting if the arm and x86 API levels were different?)",
      "parentUuid": "4d0b6dea_c2700007",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7faba4b4_3b07e958",
        "filename": "tools/versioner/tests/preprocessor/expected/foo.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-14T01:33:29Z",
      "side": 1,
      "message": "Given the comment on line 55, it seems that the __INTRODUCED_IN_64(21) is the important part of the test.\n\nI would guess that this file has to match exactly what the versioner generates for tests/preprocessor/headers/foo.h, though. Does \"bionic/tools/versioner/run_tests.py\" still pass?",
      "parentUuid": "8ffb0d24_f97ca02f",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9bda46f_af08a388",
        "filename": "tools/versioner/tests/preprocessor/expected/foo.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-02-14T01:50:39Z",
      "side": 1,
      "message": "It looks like the tests already fail:\n\n   $ lunch something (e.g. aosp_walleye)\n   $ export PATH\u003d$ANDROID_BUILD_TOP/prebuilts/clang-tools/linux-x86/bin:$PATH\n   $ cd $ANDROID_BUILD_TOP/bionic/tools/versioner\n   $ ./run_tests.py -f\n   ...\n   [FAIL] preprocessor: unexpected failure:\n   \n       Files out/foo.h and expected/foo.h differ\n       \n   ...\n   $ cd $ANDROID_BUILD_TOP/bionic/tools/versioner/tests/preprocessor\n   $ sh run.sh\n   Files out/foo.h and expected/foo.h differ\n   $ diff -U3 expected/foo.h out/foo.h\n   ...\n\nIt seems that the current versioner prebuilt is already omitting the MIPS targets from the #if guards.",
      "parentUuid": "7faba4b4_3b07e958",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b995e93_402bb868",
        "filename": "tools/versioner/tests/preprocessor/expected/foo.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-14T02:01:17Z",
      "side": 1,
      "message": "updated so the tests pass.",
      "parentUuid": "b9bda46f_af08a388",
      "revId": "d5666739b5721ce540586d25dade682c90fa9ead",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}