{
  "comments": [
    {
      "key": {
        "uuid": "df935016_03dd92ed",
        "filename": "linker/dlfcn.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-05-22T15:58:08Z",
      "side": 1,
      "message": "c style casts? hopefully this code should be deleted soon anyway, but use c++ casts in future.",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff965405_d28bf458",
        "filename": "linker/dlfcn.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-05-22T16:15:07Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "df935016_03dd92ed",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfa05c5b_3c431127",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-05-22T15:58:08Z",
      "side": 1,
      "message": "i don\u0027t think this is the right test change. i think you want this first part unconditional, and then you want three cases instead of two below where there was already a #if... now you\u0027ll have bionic32, bionic64, and glibc. (or a regex that makes bionic64 and glibc the same.)",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df935016_0339125d",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-05-22T16:15:07Z",
      "side": 1,
      "message": "actually glibc part is interesting.. I double checked - RTLD_DEFAULT is (void*)0, so it shouldn\u0027t pass.",
      "parentUuid": "bfa05c5b_3c431127",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df935016_8398c222",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-05-22T16:19:06Z",
      "side": 1,
      "message": "i think it\u0027s just relying on there not actually being a \"test\" symbol. so we might want to switch to \"a_symbol_that_does_not_exist\" for clarity.",
      "parentUuid": "df935016_0339125d",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfa05c5b_1c74150f",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-05-22T16:39:24Z",
      "side": 1,
      "message": "I see, there is a test for undefined symbol below. I think it is clearer if we just disable null-handle test for lp64 instead of making it about undefined symbol.",
      "parentUuid": "df935016_8398c222",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f9d5828_7b5d1f21",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-05-22T16:39:24Z",
      "side": 1,
      "message": "this",
      "revId": "ca1c80220e9b16fde7a761ca1c2c63dbe8071e0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}