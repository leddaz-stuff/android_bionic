{
  "comments": [
    {
      "key": {
        "uuid": "AAALFX///mg\u003d",
        "filename": "linker/linker_format.cpp",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-10-30T00:44:18Z",
      "side": 1,
      "message": "the compiler doesn\u0027t like this style:\n\n  warning: assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2 [-Wstrict-overflow]\n\ni\u0027m assuming that i\u0027ll pull this code out into its own library so i can reuse it in the malloc debugging code, and i\u0027ll \"fix\" it by not compiling that with -Wstrict-overflow\u003d5 :-)",
      "revId": "dd63affe695d499e365ce40b93fa4508f730de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALFX///m0\u003d",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-10-30T00:44:18Z",
      "side": 1,
      "message": "this is unused, which upsets the compiler. should we be using it, or should we remove it? are we supposed to be mapping whole pages in the mmap call below?",
      "revId": "dd63affe695d499e365ce40b93fa4508f730de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALG3///5M\u003d",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2012-10-30T01:25:36Z",
      "side": 1,
      "message": "yes, this seems odd. I\u0027m pretty sure that length doesn\u0027t have to be page aligned, because I think you can put in a file length from  stating a file. however, i\u0027m not sure what the semantics are if that length is in the middle of a file.",
      "parentUuid": "AAALFX///m0\u003d",
      "revId": "dd63affe695d499e365ce40b93fa4508f730de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALFH///ZM\u003d",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-10-30T01:41:42Z",
      "side": 1,
      "message": "to be clear: i\u0027m not asking about mmap(2). i know about that, and i could read the man page if i didn\u0027t :-)\n\nmy question is what the ELF specification says. are your mapped-in segments supposed to be rounded? or is L304 just foolish consistency that should be deleted?",
      "parentUuid": "AAALG3///5M\u003d",
      "revId": "dd63affe695d499e365ce40b93fa4508f730de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALG3///1c\u003d",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2012-10-30T06:31:37Z",
      "side": 1,
      "message": "well, I read the man page and the opengroup docs and still am unclear about mmap.\n\nin any case, in this code, before we load, we reserve the memory with phdr_table_reserve_memory, and that computes how much space to reserve with  phdr_table_get_load_size. looks like it doesn\u0027t care about page boundaries\n\nlooking at the spec, p_align can have a say in things but we say \"We will ignore the p_paddr and p_align fields of Elf32_Phdr for now.\"\n\nthat comment above is followed with:\n\n  - ranges do not necessarily start or end at page boundaries. Two distinct\n    segments can have their start and end on the same page. In this case, the\n    page inherits the mapping flags of the latter segment.\n\nfun fun. arm\u0027s processor supplement seems pretty lax about the alignment, x86 doesn\u0027t really talk about it, mips seems like historically they might have been pickier about these things.\n\ni think we are relying on code that cares to do the right when it creates the tables if it needs things on different pages? it seems clear from the comment that we expect this to happen. i bet the code might have been based on more particular code that might have had to support more architectures where it would have been a problem.",
      "parentUuid": "AAALFH///ZM\u003d",
      "revId": "dd63affe695d499e365ce40b93fa4508f730de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}