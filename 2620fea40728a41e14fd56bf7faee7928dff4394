{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1de0c04_81665921",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-01T01:36:35Z",
      "side": 1,
      "message": "+cferris: what do you think of my use of an overload here --- stupid or clever?\n\nit\u0027s annoying you can\u0027t turn a std::regex back into its pattern. and makes me wonder whether we should _only_ have the regex form of Run() but have it take a `const char*` instead. (though obviously that means rewriting all the existing ExecTestHelper tests to escape their last argument, so if that\u0027s the consensus then i\u0027ll volunteer myself to fix that [but let smoreland get his change in in the meantime].)",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ceb59527_5103dcd6",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2021-10-01T02:42:24Z",
      "side": 1,
      "message": "This looks good to me. since I think I\u0027ve done something like this in the recent past, I\u0027m going to call this clever.\n\nIt might simplify a few things if there is only the regex form, so I\u0027m all for a rewrite if you feel like you have time.",
      "parentUuid": "e1de0c04_81665921",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be20c467_9783ebc1",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-01T15:23:05Z",
      "side": 1,
      "message": "since i actually got this wrong (the failing tests are legit) and it\u0027s now \"tomorrow\" already, yeah, let me just do that... (if two overloads were too confusing to use correctly in the same CL that introduced the overload, that\u0027s a pretty bad sign :-) )",
      "parentUuid": "ceb59527_5103dcd6",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b2f7e50_baa4da61",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-01T18:01:42Z",
      "side": 1,
      "message": "I strongly prefer two calls (Run + check GetOutput) over combining them together. Checking the result of an execution should be orthogonal from specifying the execution to run. If we want \u0027contains substr\u0027, we shouldn\u0027t need another Run method, for instance.",
      "parentUuid": "be20c467_9783ebc1",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "737533f6_f25c0d8e",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-01T20:15:59Z",
      "side": 1,
      "message": "\u003e Checking the result of an execution should be orthogonal from specifying the execution to run.\n\nthe aim of most of these helpers is to reduce the friction for writing tests by removing the boilerplate, but also to encourage that you do actually test all things. this effectively lets us force you to _think about_ checking the output (even if we can\u0027t force you to check it, since there might reasonably be nothing practical to check).\n\nyou still can \"opt out\" and work with eth.GetOutput() directly if you have some reason to, but most callers shouldn\u0027t.\n\naka \"might the common case easy, and the uncommon cases possible\".\n\n\u003e If we want \u0027contains substr\u0027, we shouldn\u0027t need another Run method, for instance.\n\nwell, that specific case illustrates why a regex should probably be the default rather than a literal :-)",
      "parentUuid": "5b2f7e50_baa4da61",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55dd7758_61ebb1a7",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-01T20:45:38Z",
      "side": 1,
      "message": "Sorry, I don\u0027t buy it ðŸ˜Š\n\n\u003e  but also to encourage that you do actually test all things. this effectively lets us force you to _think about_ checking the output (even if we can\u0027t force you to check it, since there might reasonably be nothing practical to check).\n\nAn orthogonal API doesn\u0027t mean that a user can\u0027t be encouraged to check it out a result. For instance `struct ExecHelper { static [[nodiscard]] Result... Run(...); };` could achieve the same thing without sacrificing orthogonality of the API surface (one surface being \u0027run a binary\u0027 the other surface being \u0027ways to check test results\u0027).\n\n\u003e aka \"might the common case easy, and the uncommon cases possible\".\n\nOrthogonality makes maintaining and learning the API surface easier. People already know ASSERT_*/EXPECT_*, and with Run(..expected), they have to learn a new pattern in order to achieve a result. I think creating a \u0027parallel\u0027 API surface makes things harder.\n\n\u003e \u003e If we want \u0027contains substr\u0027, we shouldn\u0027t need another Run method, for instance.\n\u003e well, that specific case illustrates why a regex should probably be the default rather than a literal :-)\n\nThis was a bad example, because it underlaps with regex. You know what I mean, checking for valid parens (for non-pcre), checking if the output is a valid file on disk, checking the output is a prime number, etc... There are a million things you might want to do with the I/O output of a binary, and this has no impact on how the binary is run.",
      "parentUuid": "737533f6_f25c0d8e",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be1990cd_096c44d8",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-01T21:17:42Z",
      "side": 1,
      "message": "note that this is in _bionic_. i think we\u0027re in agreement for libbase test utilities, but within a project \"streamline your common case [even if it\u0027s not something everyone would want]\" makes sense.",
      "parentUuid": "55dd7758_61ebb1a7",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c264bd1b_a9a54c55",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-01T21:21:39Z",
      "side": 1,
      "message": "Definitely - though - I am thinking from my perspective as an outsider of bionic, and also people tend to copy code like this, and anyway - yeah, it doesn\u0027t really matter here (though maybe if these principles were applied everywhere by everyone for the last 40 years, we would have 10x productivity?). ;)\n\nWill you update this test to pass again and ASSERT_WSTRING -\u003e ASSERT_STRING?",
      "parentUuid": "be1990cd_096c44d8",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9530f9ad_a6dadc8e",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-01T21:27:28Z",
      "side": 1,
      "message": "yeah, sorry, i should have explicitly said: \"you\u0027ve suffered enough here already, i\u0027ll make sure this lands\" :-) current plan is to get the literal -\u003e regex switch in (https://android-review.googlesource.com/c/platform/bionic/+/1843499), then rebase this on top. (that CL turned out to be a lot smaller than i was expecting! if i\u0027d known i\u0027d probably have just included it in this!)",
      "parentUuid": "c264bd1b_a9a54c55",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97f86f43_448cf6cf",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-01T21:30:30Z",
      "side": 1,
      "message": "thank yoU!",
      "parentUuid": "9530f9ad_a6dadc8e",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcefe21c_62e13fb4",
        "filename": "tests/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-06T16:04:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "97f86f43_448cf6cf",
      "revId": "2620fea40728a41e14fd56bf7faee7928dff4394",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}