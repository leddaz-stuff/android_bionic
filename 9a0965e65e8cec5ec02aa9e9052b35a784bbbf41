{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d515e666_c4d1101f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-07-10T23:35:33Z",
      "side": 1,
      "message": "I think this check also needs to be looking at file_offset_? That field is non-zero for loading an ELF file within a ZIP file (APK).\n\nBut in general, I\u0027m trying to figure out how we handle reads past the end of the ELF file. It seems like something that ought to generate a reliable error, but I can\u0027t tell what the old or new behavior is.\n\nWe really ought to flag attempts to read past the end of the ELF file in the the ZIP file, not just past the end of the ZIP file, but LoadTask is propagating the size of the fd, not the size of the ZIP entry. Also, I think this CL is going to map the entire ZIP file when one of the ELF files is loaded? The ZIP file could be large-ish, but I guess there are good reasons to keep an APK file small, so maybe it\u0027s fine.",
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8549e79_1e2aeb15",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2024-07-11T14:03:17Z",
      "side": 1,
      "message": "Yes, you are right. If should be `if (file_size_ - file_offset_ \u003c static_cast\u003coff64_t\u003e(sizeof(header_)))`. Will fix.",
      "parentUuid": "d515e666_c4d1101f",
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf4951a_6cd68e4d",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-11T13:21:43Z",
      "side": 1,
      "message": "this 0 is wrong then, given your point about .so files embedded in .zip files?\n\ndo we not have a test for that case? that\u0027s quite an oversight in our testing if not!",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b958ce_95f8a789",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-11T13:21:43Z",
      "side": 1,
      "message": "(now you\u0027re making me look/think a bit harder, i think this use of mmap64() rather than mmap() _fixes_ several bugs for .so files in \u003e4GiB .zip files on ILP32. probably never happened/never likely to happen, but technically supported and broken before now.)",
      "range": {
        "startLine": 181,
        "startChar": 37,
        "endLine": 181,
        "endChar": 43
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75143a4d_e317fb64",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2024-07-11T14:03:17Z",
      "side": 1,
      "message": "This mmap64 maps the entire file, that\u0027s why it\u0027s 0. I can optimize the area we map to cover only `[file_offset_, max(ends of all sections we read)]` if that\u0027s desirable. Mapping the whole file was just simpler.",
      "parentUuid": "abf4951a_6cd68e4d",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28150458_143592ab",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-11T16:34:20Z",
      "side": 1,
      "message": "i think rprichard\u0027s point (which i\u0027d forgotten/didn\u0027t know) is that the \"open direct from zip file\" path comes through here too. in which case you might have a huge apk containing lots of .so files, and you\u0027d map the whole file for each .so file. that\u0027s potentially a lot of address space for ILP32. (the apk will contain all the java and assets and everything too, not just the .so files.)",
      "parentUuid": "75143a4d_e317fb64",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8b43da_912277c3",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2024-07-11T16:40:08Z",
      "side": 1,
      "message": "In such a case, do we instantiate a new `ElfReader` object and call `ElfReader::Read()` for each .so file in this .zip file? I think that is the case because `file_offset_` would be different for each .so file and it\u0027s set inside the `ElfReader` constructor.\n\nIf so, I can change this mmap64() call to map only `[file_offset_, max(ends of all sections we read)]` area, so even if there are multiple .so files in this .zip file we will always be mapping sections from only one .so. Would that address this concern?",
      "parentUuid": "28150458_143592ab",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "709724cc_b6dc56de",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-07-11T16:55:27Z",
      "side": 1,
      "message": "\u003e do we instantiate...\n\ni think so, yes. see open_library_in_zipfile() for the magic of \"where do the file_offset values come from?\".\n\n\u003e Would that address this concern?\n\ni think so, yes, though obviously my judgement is worth less than rprichard\u0027s :-)",
      "parentUuid": "ee8b43da_912277c3",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ec5da7_4e6e66f1",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2024-07-11T16:57:22Z",
      "side": 1,
      "message": "Ok, I\u0027ll post a new version implementing that and let\u0027s see where we end up. Thanks!",
      "parentUuid": "709724cc_b6dc56de",
      "range": {
        "startLine": 181,
        "startChar": 94,
        "endLine": 181,
        "endChar": 95
      },
      "revId": "9a0965e65e8cec5ec02aa9e9052b35a784bbbf41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}