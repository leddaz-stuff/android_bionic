{
  "comments": [
    {
      "key": {
        "uuid": "a328b4ae_365968ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-20T15:21:21Z",
      "side": 1,
      "message": "do you have examples?\n\nis there a reason why this only affects libc/libm/libdl, or do we need to do this more widely (or, better, fix whatever the bug is that\u0027s affecting the types that are impacted).\n\nis this new breakage (i.e. \"could this be lld?\") or long-standing?",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "a0b9dd428bd55d114c135d209c08df3f60239fc3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73603974_3393ee3d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-09-20T15:56:41Z",
      "side": 1,
      "message": "I\u0027m also curious about examples, because it seems like this could only impact C++ types according to https://clang.llvm.org/docs/UsersManual.html#cmdoption-fstandalone-debug. I don\u0027t think it\u0027s a bad idea to deliberately keep everything here for these libraries if there happen to be some C++ types that were getting dropped.",
      "parentUuid": "a328b4ae_365968ce",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "a0b9dd428bd55d114c135d209c08df3f60239fc3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc8b9fd0_ece4d1a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2018-09-20T18:14:12Z",
      "side": 1,
      "message": "It does not seem to affect types in libc... at least as far as I can see. We have encountered this problem in other NDK libraries, namely libvulkan.\n\nFor some types without this flag clang will decide to generate only DW_AT_decalration if they are not used in the object file but instead are passed through to a function in another library.\n\nThis in turn results in absence of information about types which leads our tools to sometimes mistakenly assume that types are compatible between different architectures where in fact they are not.\n\nSince it is not very easy to catch when it happens the safer solution would be to enable this flag for all NDK libraries.\n\nThis is longstanding behavior and it is not lld-related. I thought it was a bug but it seems to be intended behavior according to https://bugs.llvm.org/show_bug.cgi?id\u003d38822",
      "parentUuid": "73603974_3393ee3d",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "a0b9dd428bd55d114c135d209c08df3f60239fc3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}