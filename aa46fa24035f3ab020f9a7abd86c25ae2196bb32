{
  "comments": [
    {
      "key": {
        "uuid": "AAAA0n//+gE\u003d",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2010-07-08T22:31:12Z",
      "side": 1,
      "message": "just curious, why is this needed here and not the other libraries?\nSince it is quite unusual, I would appreciate if you added a comment above that line that explains why it is needed.",
      "revId": "aa46fa24035f3ab020f9a7abd86c25ae2196bb32",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA0n//+bg\u003d",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 1003004
      },
      "writtenOn": "2010-07-09T02:31:16Z",
      "side": 1,
      "message": "Because we have an undefined symbol error (dl_iterate_phdr) on x86? I confirm we got this error on building android-x86.\n\nOr, could you suggest a way to add the missed symbol?",
      "parentUuid": "AAAA0n//+gE\u003d",
      "revId": "aa46fa24035f3ab020f9a7abd86c25ae2196bb32",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA0n//+VE\u003d",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 1003360
      },
      "writtenOn": "2010-07-09T19:22:28Z",
      "side": 1,
      "message": "I thought that I had replied to this a few days ago...\n\nThe ARM has special case code that avoids this. I don\u0027t know why the ARM code for this is so complex... could you ask the internal developer to review?",
      "parentUuid": "AAAA0n//+bg\u003d",
      "revId": "aa46fa24035f3ab020f9a7abd86c25ae2196bb32",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA0n//+Fw\u003d",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 1000413
      },
      "writtenOn": "2010-07-12T22:40:21Z",
      "side": 1,
      "message": "dl_iterate_phdr is defined and provided by the dynamic linker so that the applications can lookup shared objects that are loaded. IIRC, this is used by the stack tracing code on x86.\n\nARM doesn\u0027t use dl_iterate_phdr for this (since this was a glibc, linux extension), but rather uses the dl_unwind_find_exidx which is part of the ARM EABI.\n\nI don\u0027t understand the problem though. What is using dl_iterate_phdr in libc? The only thing that I think should be in libc is the version of this function that exposes this for statically linked executables. What am I missing?",
      "parentUuid": "AAAA0n//+VE\u003d",
      "revId": "aa46fa24035f3ab020f9a7abd86c25ae2196bb32",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA03///+c\u003d",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 1003360
      },
      "writtenOn": "2010-07-13T17:30:48Z",
      "side": 1,
      "message": "On Linux, gl_iterate_phdr is provided as part of the glibc source.\nThere are separate versions for the static library and dynamic library versions.\nThis is analogous to what bionic does for ARM for dl_unwind_find_exidx.\n\nThe problem here is that bionic only is providing the static version of dl_iterate_phdr. The static version is quite simple since it doesn\u0027t have to crawl up the list of dynamic binaries to locate the correct one. The dynamic version is quite tightly tied to the bionic dynamic linker implementation.\n\nThe normal libc doesn\u0027t use this... it is used by libc_malloc_debug_leak. I don\u0027t know if libc_malloc_debug_leak is actually used anywhere. This version of libc calls the building GCC unwind code when it detects a problem. The built in GCC unwind code calls dl_iterate_phdr... and expects that it is defined by the C library. It isn\u0027t so defined for bionic.\n\nSO...\nThe allow_undefined is only a work-around and not really a very good one. We really need a dynamic implementation of dl_iterate_phdr. Very likely... there is one in the code that bionic/libc was based on.",
      "parentUuid": "AAAA0n//+Fw\u003d",
      "revId": "aa46fa24035f3ab020f9a7abd86c25ae2196bb32",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}