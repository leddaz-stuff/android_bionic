{
  "comments": [
    {
      "key": {
        "uuid": "AAAA/H///3U\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1471,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2011-03-01T14:54:17Z",
      "side": 1,
      "message": "I would prefer if you would perform the timeout check with the mutex unlock first.",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/H///lY\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1471,
      "author": {
        "id": 1000909
      },
      "writtenOn": "2011-03-02T17:38:47Z",
      "side": 1,
      "message": "I don\u0027t understand what you want : you want to move the mutex_unlock in the loop after the timeout check (ie do the timeout check with mutex lock) ?\n\nWon\u0027t that introduce extra contention on the mutex ?",
      "parentUuid": "AAAA/H///3U\u003d",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/X///cQ\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1471,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2011-03-18T17:00:24Z",
      "side": 1,
      "message": "I\u0027m talking about performing an initial timeout check *before* any mutex locking/unlocking, so you can return ETIMEDOUT immediately if needed. How this is implemented is not too important.",
      "parentUuid": "AAAA/H///lY\u003d",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/H///3w\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1476,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2011-03-01T14:54:17Z",
      "side": 1,
      "message": "You return an ETIMEDOUT with an unlocked mutex here, this is pretty bad. Please try to keep the same semantics, this is subtle.",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/H///3c\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1538,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2011-03-01T14:54:17Z",
      "side": 1,
      "message": "I would appreciate if you would add a comment here explaining that futex_wait() uses CLOCK_MONOTONIC timespec values, (so this specific change doesn\u0027t introduce a change in semantics).",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/H///lA\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1538,
      "author": {
        "id": 1000909
      },
      "writtenOn": "2011-03-02T17:51:42Z",
      "side": 1,
      "message": "I think the most important part is that in __pthread_cond_timedwait we convert it back to relative clock (because futex_wait take relative clock).\nAnd we use CLOCK_MONOTONIC (like in pthread_mutex_lock_timeout_np) because this prevent race against CLOCK_REALTIME modification.",
      "parentUuid": "AAAA/H///3c\u003d",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA/X///cM\u003d",
        "filename": "libc/bionic/pthread.c",
        "patchSetId": 1
      },
      "lineNbr": 1538,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2011-03-18T17:00:24Z",
      "side": 1,
      "message": "The thing is: the futex_wait() implementation depends on CLOCK_MONOTONIC, but this didn\u0027t appear in the original code at all (one need to look deep inside the kernel code to see this).\n\nIn this patch, you\u0027re making the clock explicit. It would be nice if you could add a comment explaining that this is to match the kernel implementation. This will prevent other people who modify this code to incorrectly change the clock, without realizing what\u0027s happening.\n\nActually, futex_wait() can use CLOCK_REALTIME too, if a special flag is used, but we don\u0027t need to worry about this here.",
      "parentUuid": "AAAA/H///lA\u003d",
      "revId": "a9e3c74d85d27bffd59637ab46ae9c1ef271fb44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}