{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ad6430f_471bfc5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-11T09:36:11Z",
      "side": 1,
      "message": "This LGTM. Let\u0027s invite owners.",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9908b66a_39cab24a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-11T12:38:41Z",
      "side": 1,
      "message": "Hi Elliott and Dan,\nThis is required from bionic to define a separate versioning for vendor and not adding more headers to NDK.\nThe CLs in the topic show how these versioning is used.",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba028ed_acc95fde",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-11T09:11:45Z",
      "side": 1,
      "message": "Does this work? __BIONIC_AVAILABILITY was already expanded above. Would re-defining it here affect the definitions above?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 32
      },
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2a39cdb_541e6d2b",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-11T09:24:33Z",
      "side": 1,
      "message": "I tested it here: https://cplayground.com/?p\u003dguanaco-aardvark-mouse\nI think the macros in a macro also expanded when used.",
      "parentUuid": "5ba028ed_acc95fde",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 32
      },
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "332f8bcf_32ef07bd",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-11T09:36:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b2a39cdb_541e6d2b",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 32
      },
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42b7abc_961ac810",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-11T23:25:45Z",
      "side": 1,
      "message": "can\u0027t you just `-include` where you\u0027re doing the `-D__ANDROID_VENDOR__`? that would let us avoid having a dependency _from_ libc on anything.",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc754ea_f3f4a589",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-12T04:03:40Z",
      "side": 1,
      "message": "Let me try adding `-include` for vendor builds.",
      "parentUuid": "c42b7abc_961ac810",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50b4f0fd_a0239039",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-11T23:25:45Z",
      "side": 1,
      "message": "do you have a concrete example _other_ than binder that needs this?\n\ni\u0027m still tempted to keep this out of the NDK and just have as the `else` in whatever\u0027s doing your other `__ANDROID_VENDOR__` stuff. and if binder is the only user, that seems right ... binder is a weird special case. (and it\u0027s unclear to me whether it\u0027s just a coincidence that you picked binder, or very much _not_ a coincidence, and it\u0027s that same \"special case\"-ness that makes binder weird from an ndk perspective that makes it the most interesting [or _only_ interesting?] case of overlap for you?)\n\non the other hand, if these annotations are needed for more typical api, is it all going to be as awful as the binder example looks? how are you planning to clean that up each year? just throw humans at it?",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20d6bfaa_6d7e61b2",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-11T23:30:39Z",
      "side": 1,
      "message": "(i\u0027m still interested in the answers to those questions, but this #define doesn\u0027t help you much anyway, right, because you\u0027ll still need to #define the no-op version in every header that uses it? in which case you might just want some other header file with all that boilerplate?\n\ni think cleaning up the _existing_ mess has been on the ndk api council\u0027s wish list for a long time, but i\u0027m not sure anyone\u0027s had a good suggestion of what/where this magic header should be...)",
      "parentUuid": "50b4f0fd_a0239039",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f8cf4a_b16c2e01",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-12T04:03:40Z",
      "side": 1,
      "message": "In the current tree, the binder is the only user of new LLNDK APIs. Working on this change, I assumed the new LLNDK APIs will be required from any vendors as that was what LLNDK was providing.\nHowever, with @jooyung@google.com\u0027s work on new LLNDK map definition for 202404 (aosp/2997316), we can limit the new LLNDK APIs from 202404.\n\nThis \u0027#define no-op\u0027 added here to cover NDK headers without defining a new NDK header of \u003candroid/llndk-versioning.h\u003e to include. For non-NDK headers, simply including \u003candroid/llndk-versioning.h\u003e clears all, but that\u0027s not allowed for NDK headers.",
      "parentUuid": "20d6bfaa_6d7e61b2",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57d1db00_82150d6b",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2024-03-12T05:33:38Z",
      "side": 1,
      "message": "Elliott, as Justin mentioned, NDK symbols won\u0027t be automatically LLNDK since V. So, V symbols in bionic libc are not available to vendor native modules. Can you check [the list of libc V symbols](https://cs.android.com/android/platform/superproject/+/master:bionic/libc/libc.map.txt;l\u003d1587-1603) and confirm that it\u0027s okay not to expose them to vendor modules.",
      "parentUuid": "b2f8cf4a_b16c2e01",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f51ca06_2de0d033",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-12T21:38:56Z",
      "side": 1,
      "message": "\u003e In the current tree, the binder is the only user of new LLNDK APIs.\n\nso should we just keep all this stuff in there for now? and worry about something more permanent if we still haven\u0027t got the real problem (missing api bumps) fixed next year?\n\n\u003e Can you check the list of libc V symbols and confirm that it\u0027s okay not to expose them to vendor modules.\n\nyeah, that seems fine.\n\nor, more flippantly: \"they didn\u0027t have them last year, so i don\u0027t see why they\u0027d _have_ to have them this year\" :-)",
      "parentUuid": "57d1db00_82150d6b",
      "revId": "26ad674a98b5c87549a782dbdd672f7c93376e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}