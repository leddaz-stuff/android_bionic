{
  "comments": [
    {
      "key": {
        "uuid": "de65092b_e5471965",
        "filename": "tests/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-09T02:07:02Z",
      "side": 1,
      "message": "ws\n\n(plus we\u0027ve used lower_case_style for stuff like stack protector and stack unwinding tests that don\u0027t correspond to a header file.)",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e570543_0ac4de75",
        "filename": "tests/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2013-11-12T18:39:53Z",
      "side": 1,
      "message": "You always review too quickly.\n\nOriginally, I was going to make this a class, so I did the upper lower stuff. It would be better to be consistent with the other stuff, so I\u0027ll make it lower case with underscores.",
      "parentUuid": "de65092b_e5471965",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e570543_3e4c7b58",
        "filename": "tests/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-12T18:58:23Z",
      "side": 1,
      "message": "feel free to add \"[WIP]\". (though i sometimes accidentally review those without noticing!)",
      "parentUuid": "3e570543_0ac4de75",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e5dfd5e_c7d65c8e",
        "filename": "tests/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-09T02:07:02Z",
      "side": 1,
      "message": "uint8_t* here and elsewhere.\n\nwhy malloc rather than new?",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e570543_0345e485",
        "filename": "tests/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2013-11-12T18:39:53Z",
      "side": 1,
      "message": "I guess I like the control that malloc gives. It also allows me to test with the exact alignment that malloc returns. I know that new probably gives me nearly the same control, but I\u0027m always afraid someone has overriden the new operator somewhere.",
      "parentUuid": "7e5dfd5e_c7d65c8e",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e570543_9e3dc7a8",
        "filename": "tests/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-12T18:58:23Z",
      "side": 1,
      "message": "if you can\u0027t trust yourself...\n\nplus, if you care about the alignment guarantees, you really ought to be asserting that.",
      "parentUuid": "3e570543_0345e485",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e570543_5e37af67",
        "filename": "tests/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2013-11-12T19:26:45Z",
      "side": 1,
      "message": "I don\u0027t care about the natural alignments of malloc per se, I\u0027m just paranoid and letting the tests run using the native malloc alignments. This is in case someone in the future does something crazy with the natural alignment, we\u0027ll still catch it. I agree that it\u0027s overkill, but it doesn\u0027t take that much time run with it.",
      "parentUuid": "3e570543_9e3dc7a8",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de65092b_45808d30",
        "filename": "tests/BufferTests.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-09T02:07:02Z",
      "side": 1,
      "message": "shouldn\u0027t there be some consts here somewhere?",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de65092b_6032d010",
        "filename": "tests/BufferTests.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2013-11-12T18:39:53Z",
      "side": 1,
      "message": "Not really. Even though the src is const for the functions, I actually do some initialization in the test_funcs, so I\u0027m modifying both src and dst.",
      "parentUuid": "de65092b_45808d30",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e5dfd5e_e400b119",
        "filename": "tests/BufferTests.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-12T18:58:23Z",
      "side": 1,
      "message": "but you\u0027re not modifying the data they point to?",
      "parentUuid": "de65092b_6032d010",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de65092b_e01ee0bb",
        "filename": "tests/BufferTests.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2013-11-12T19:26:45Z",
      "side": 1,
      "message": "Yes, I modify the src data to initialize it to a specific pattern. I could have made the generic runner a bit more complicated by using a separate init function to do a one time src init, but I decided to go this way. If you\u0027d prefer a separate init function and then make the src parameters const let me know.",
      "parentUuid": "7e5dfd5e_e400b119",
      "revId": "ab22a00636a8dbbd70db1d63076f1332d74bdedd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}