{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a2eeebc2_8de58188",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-26T16:44:21Z",
      "side": 1,
      "message": "(read to the end before doing anything, because i think the later suggestion is better than the earlier suggestion :-) )",
      "revId": "9f3c9fd2ea83af3cfc23c088698fd5ba33be8f2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "695a23db_e41b709d",
        "filename": "libc/stdio/vfprintf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 540,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-26T16:44:21Z",
      "side": 1,
      "message": "actually, we can clean this whole thing up (and declare the bool in a much smaller scope because we\u0027ll get rid of the gotos) by moving the \"translate `n` and `fast` into a flags change\" out into a function (which can go in printf_common.h so we don\u0027t need to duplicate so much code for wide and non-wide).",
      "revId": "9f3c9fd2ea83af3cfc23c088698fd5ba33be8f2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf46e0b_179ab580",
        "filename": "libc/stdio/vfprintf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 540,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-04-28T00:51:51Z",
      "side": 1,
      "message": "I am thinking of a function \n```\nint func (int *n, char *fmt, bool p) {\n   // declare bool\n   // switch for n \n   // return LLONGINT/SHORTINT/... according to p[printf_common or vsprintf]\n}\n```",
      "parentUuid": "695a23db_e41b709d",
      "revId": "9f3c9fd2ea83af3cfc23c088698fd5ba33be8f2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0218cd7_4ab98243",
        "filename": "libc/stdio/vfprintf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 540,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-28T16:07:43Z",
      "side": 1,
      "message": "well, you\u0027d need `char** fmt` in that case. i was actually just thinking that you can replace this part:\n```\n      case \u0027w\u0027:\n        n \u003d 0;\n        fast \u003d false;\n        ch \u003d *fmt++;\n        if (ch \u003d\u003d \u0027f\u0027) {\n          fast \u003d true;\n          ch \u003d *fmt++;\n        }\n        while (is_digit(ch)) {\n          APPEND_DIGIT(n, ch);\n          ch \u003d *fmt++;\n        }\n        switch (n) {\n          case 8: {\n            flags |\u003d CHARINT;\n            goto reswitch;\n          }\n          case 16: {\n            if (fast) {\n#if defined(__LP64__)\n              flags |\u003d LLONGINT;\n#endif\n            } else {\n              flags |\u003d SHORTINT;\n            }\n            goto reswitch;\n          }\n          case 32: {\n            if (fast) {\n#if defined(__LP64__)\n              flags |\u003d LLONGINT;\n#endif\n            }\n            goto reswitch;\n          }\n          case 64: {\n            flags |\u003d LLONGINT;\n            goto reswitch;\n          }\n          default: {\n            __fortify_fatal(\"%%w%s%d is unsupported\", fast ? \"f\" : \"\", n);\n            break;\n          }\n        }\n```\nwith something like this in the two files\n```\n      case \u0027w\u0027:\n        ch \u003d *fmt++;\n        bool f \u003d false;\n        if (ch \u003d\u003d \u0027f\u0027) {\n          fast \u003d true;\n          ch \u003d *fmt++;\n        }\n        int n \u003d 0;\n        while (is_digit(ch)) {\n          APPEND_DIGIT(n, ch);\n          ch \u003d *fmt++;\n        }\n        flags |\u003d w_to_flags(n, f);\n        goto reswitch;\n```\nand something like this in printf_common.h\n```\nstatic int w_to_flags(int n, bool f) {\n  if (n \u003d\u003d 8) return CHARINT;\n  if (f) return (sizeof(void*) \u003d\u003d 8) LLONGINT : 0;\n  if (n \u003d\u003d 16) return SHORTINT;\n  if (n \u003d\u003d 64) return LLONGINT;\n  __fortify_fatal(\"%%w%s%d is unsupported\", f ? \"f\" : \"\", n);\n}\n```\n\ni do like the idea of *also* factoring out the outer switch (the one with `case \u0027w\u0027:` etc) to reduce the duplication between the char and wchar_t variants, but that seems like a separate change, and given all the `goto`s in that switch, probably another place where we\u0027ll end up using #define :-(",
      "parentUuid": "fdf46e0b_179ab580",
      "revId": "9f3c9fd2ea83af3cfc23c088698fd5ba33be8f2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6111e4f_ad2c2bcf",
        "filename": "libc/stdio/vfprintf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 540,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-04-28T18:38:31Z",
      "side": 1,
      "message": "`w_to_flags` yes that\u0027s exactly what I think! I misunderstood and I thought this function was used in both case \u0027w\u0027 in vf(w)printf cpp files and printf_common.h file. That\u0027s why I add a boolean var `p`. Now I know what I should do! Thank you!",
      "parentUuid": "c0218cd7_4ab98243",
      "revId": "9f3c9fd2ea83af3cfc23c088698fd5ba33be8f2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}