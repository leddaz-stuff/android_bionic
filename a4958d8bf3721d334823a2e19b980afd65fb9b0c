{
  "comments": [
    {
      "key": {
        "uuid": "85a19dbc_e0c5a297",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T20:55:07Z",
      "side": 1,
      "message": "It would be really nice to see a comment with an overview of the data structure here.",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85efddfe_f0644009",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-24T22:13:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85a19dbc_e0c5a297",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d4052e_36187818",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T20:55:07Z",
      "side": 1,
      "message": "This seems expensive, especially since the current PTHREAD_KEYS_MAX seems fairly low.  Keep a per-thread count of the highest index that ever had a non-NULL slot?",
      "range": {
        "startLine": 62,
        "startChar": 27,
        "endLine": 62,
        "endChar": 51
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d4052e_96d98cb2",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-24T20:58:29Z",
      "side": 1,
      "message": "not worth it: this gets called once per thread, on exit.\n\nand this will change when we get round to removing the fixed-fixed buffer in a later change anyway.",
      "parentUuid": "45d4052e_36187818",
      "range": {
        "startLine": 62,
        "startChar": 27,
        "endLine": 62,
        "endChar": 51
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ab259e_7e0db1b3",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T20:55:07Z",
      "side": 1,
      "message": "acquire.  See below.",
      "range": {
        "startLine": 63,
        "startChar": 59,
        "endLine": 63,
        "endChar": 80
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "857c3df2_6b83dd71",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-24T22:13:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45ab259e_7e0db1b3",
      "range": {
        "startLine": 63,
        "startChar": 59,
        "endLine": 63,
        "endChar": 80
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ab259e_9e4abd6d",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T20:55:07Z",
      "side": 1,
      "message": "Pthread_key_create is also used to allocate the reserved slots?",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25d1d13f_35e630b3",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-24T20:58:29Z",
      "side": 1,
      "message": "see the comment in the next file :-)\n\n(it\u0027s a huge historical pain the \u0027c\u0027 \u003c \u0027h\u0027 so the interface always sorts before the implementation. we should fix that in our review tools.)",
      "parentUuid": "45ab259e_9e4abd6d",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4547a5ec_9e8dfd20",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T23:08:14Z",
      "side": 1,
      "message": "So should we be starting at zero here?  I read the comment as saying \"no\"?",
      "parentUuid": "25d1d13f_35e630b3",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4547a5ec_7e311160",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-24T23:20:26Z",
      "side": 1,
      "message": "depends what you mean. the c library itself uses the public API, so, yes, you need to start at 0 for the C library uses. but, yes, by the time user code is allocating keys, the low-numbered slots are already taken.",
      "parentUuid": "4547a5ec_9e8dfd20",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5214133_9912fb53",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-25T00:00:35Z",
      "side": 1,
      "message": "Is there any documentation forbidden pthread key start from 0? I didn\u0027t see any of that.",
      "parentUuid": "4547a5ec_7e311160",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5214133_59c1c326",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-25T00:03:20Z",
      "side": 1,
      "message": "no. everything\u0027s fine. hboehm is just confused because he didn\u0027t realize that we use pthread_key_create internally.\n\n(perhaps because of the TLS slots which really are magic, but which are now a separate data structure.)",
      "parentUuid": "a5214133_9912fb53",
      "range": {
        "startLine": 87,
        "startChar": 18,
        "endLine": 87,
        "endChar": 20
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65a669d5_ff653fac",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-24T20:55:07Z",
      "side": 1,
      "message": "I don\u0027t see the correctness argument for relaxed ordering here.  If one thread allocates and immediately deletes a key, the destructor assignment can become visible after the destructor assignment for the next reuse of the slot.  The ordering here requires care, though it may be OK to keep the relaxed ordering in setspecific and getspecific, where it matters.\n\nAt a minimum create needs to use acquire ordering and delete release ordering, since they acquire and release ownership of the destructor slot.",
      "range": {
        "startLine": 92,
        "startChar": 8,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85efddfe_1080e427",
        "filename": "libc/bionic/pthread_key.cpp",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-24T22:13:20Z",
      "side": 1,
      "message": "Done. Good concern!",
      "parentUuid": "65a669d5_ff653fac",
      "range": {
        "startLine": 92,
        "startChar": 8,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "a4958d8bf3721d334823a2e19b980afd65fb9b0c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}