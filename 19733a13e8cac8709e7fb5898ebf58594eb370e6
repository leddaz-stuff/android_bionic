{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "abb63b96_6f62122d",
        "filename": "libc/stdio/scanf_common.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-25T18:29:56Z",
      "side": 1,
      "message": "delete these (and the pragmas) and just use the template directly at the call sites.",
      "range": {
        "startLine": 116,
        "startChar": 11,
        "endLine": 116,
        "endChar": 20
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa763dd_e1721c81",
        "filename": "libc/stdio/scanf_common.h",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-05-31T00:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abb63b96_6f62122d",
      "range": {
        "startLine": 116,
        "startChar": 11,
        "endLine": 116,
        "endChar": 20
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a5bc037_d12e6e3d",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-25T18:29:56Z",
      "side": 1,
      "message": "why isn\u0027t this just `int`?\n\n(and then you don\u0027t need a template at all.)",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4a5cc7_b712b596",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-05-31T00:06:47Z",
      "side": 1,
      "message": "Already delete the template. And calling `wctob` to convert. If use `int`, the conversion[wint_t to int] will scan `\u003cw\u003e` into this switch, and causes `%w0 is unsupported`. The reason why `printf` works well because it makes sure that `%` must be the prefix. But in the scanf case, this is not ensured because of line 115.",
      "parentUuid": "1a5bc037_d12e6e3d",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ec6800f_15631be0",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-06T00:53:47Z",
      "side": 1,
      "message": "why are you calling wctob()? size is an integer that you\u0027re multiplying and adding digits[1] to, not a wide character.\n\n____\n1. those _digits_ are wide characters, but that\u0027s fine because unicode code points \u003c\u003d 0x7f are just ascii anyway, so `L\u00270\u0027 \u003d\u003d \u00270\u0027` and the `- \u00270\u0027` conversion works fine for ascii/utf8 char*s _and_ for unicode wchar_t strings.",
      "parentUuid": "2f4a5cc7_b712b596",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7db3af28_d1505f69",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-06-06T21:16:12Z",
      "side": 1,
      "message": "`wint_t c;               /* character from format, or conversion */` in line 80\nc is `wint_t` while `c` in `vfwprintf` is an integer https://source.corp.google.com/android/bionic/libc/stdio/vfwprintf.cpp;l\u003d155\n\nIf I use an `int` variable to replace `c`, the conversion will make `\u003cw\u003e` scanned and error report `%w0 is unsupported`.",
      "parentUuid": "2ec6800f_15631be0",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a00042_0fd149cd",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-06T22:39:21Z",
      "side": 1,
      "message": "no, why is `size` a `wint_t`? that doesn\u0027t make any sense. `size` is the 32 (as a *number*) from `L\"%w32d\"`. that\u0027s made up from `L\u00273\u0027` and `L\u00272\u0027` (which are indeed `wint_t`), but that isn\u0027t relevant.\n\n\u003e If I use an int variable to replace c, the conversion will make \u003cw\u003e scanned\n\nno, not to replace `c` --- to replace `size`, so that this code matches the code in printf().",
      "parentUuid": "7db3af28_d1505f69",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b92b142_9835aa0a",
        "filename": "libc/stdio/vfwscanf.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-06-07T21:18:29Z",
      "side": 1,
      "message": "I see! Thank you!",
      "parentUuid": "55a00042_0fd149cd",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 14
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd406756_a6337f7b",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-25T18:29:56Z",
      "side": 1,
      "message": "you can\u0027t reorder arguments for scanf.",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b1889d4_cb33e9b8",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-05-25T21:56:44Z",
      "side": 1,
      "message": "I think I should change the test name to something like `sscanf_w_combination`?",
      "parentUuid": "dd406756_a6337f7b",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983c8f30_f34cdcaf",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-25T22:24:43Z",
      "side": 1,
      "message": "is testing more than one format specifier in the same format string a useful test?\n\n(how do you know whether a test is useful or not? basically you ask yourself \"what extra coverage do i get from this test, that i don\u0027t get from existing tests?\". that helps you (a) slim a test down to the bit that actually matters [which makes it easier to read] and (b) name the test well, because now you have a clear and specific idea of exactly _what_ you\u0027re trying to test.)\n\n((i actually think there is some value to this test, though i think we could just improve the previous test instead... but the exercise of thinking \"why and how is this test useful, if at all?\" is a great exercise every time you\u0027re writing tests. though my personal experience is always that someone will point out a test i forgot to write :-) ))",
      "parentUuid": "4b1889d4_cb33e9b8",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "667c3850_1a001b79",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-06-01T18:48:08Z",
      "side": 1,
      "message": "Agree. I also think this test is useful. But I have a question about improvement: I think the goal is to see whether these numbers can be recognized and scanned properly. Do I need to mix with other types, like char?[I think these tests can prove everything works well, but it is fine to add more tests with mixing other types]",
      "parentUuid": "983c8f30_f34cdcaf",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3d3f503_49bae365",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-06T00:53:47Z",
      "side": 1,
      "message": "\u003e Do I need to mix with other types, like char?\n\ni suspect that might be a more useful test. i think the most likely bugs in this area are around pulling arguments of different sizes off the stack. so i\u0027d probably get rid of this, and just test these one at a time (like you already did in the previous test) but have some kind of \"test all the specifiers with a %c in between each one, because that\u0027s probably the most awkward case\" test? but at that point i remember that -- unlike printf(), where we literally did have this kind of problem -- all the scanf() arguments are _pointers_ and so they\u0027re all the same size.\n\nso this is probably useless after all. (and the existing sscanf_swscanf test already does the \"smoke test\" of \"can we just do a bunch of stuff at once\".)",
      "parentUuid": "667c3850_1a001b79",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8ca8df3_0464d145",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-06-06T21:16:12Z",
      "side": 1,
      "message": "okay I modify the test!",
      "parentUuid": "d3d3f503_49bae365",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ba3b52a_632c61d4",
        "filename": "tests/stdio_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3526,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-06-07T21:18:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8ca8df3_0464d145",
      "range": {
        "startLine": 3526,
        "startChar": 26,
        "endLine": 3526,
        "endChar": 46
      },
      "revId": "19733a13e8cac8709e7fb5898ebf58594eb370e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}