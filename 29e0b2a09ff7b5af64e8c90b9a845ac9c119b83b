{
  "comments": [
    {
      "key": {
        "uuid": "7f47cdec_61417034",
        "filename": "libc/bionic/sigqueue.cpp",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "don\u0027t need this any more.",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f47cdec_a18218e2",
        "filename": "libc/include/signal.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "i was wrong. POSIX explicitly says \"The \u003csignal.h\u003e header shall define the timespec structure as described in \u003ctime.h\u003e.\".\n\ntwo ways we can fix this:\n\n1. #include \u003ctime.h\u003e like you used to. the downside of this is that that gets us *everything* from \u003ctime.h\u003e, not just struct timespec.\n\n2. break struct timespec into its own header, probably in libc/include/machine/ with similar headers, and then #include \u003cmachine/timespec.h\u003e from both places. (and others? is there anywhere else that POSIX says you get timespec?)",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f44c9e8_e0cb3caf",
        "filename": "tests/pthread_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "okay, so now apart from the fact that this is worse because it uses a global, how does this differ from SpinFn?",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f47cdec_e1710084",
        "filename": "tests/signal_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "can we synchronize instead of sleeping?",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f44c9e8_a0d5344a",
        "filename": "tests/signal_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 364,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "no need to wait this long.",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd68940_a17786fb",
        "filename": "tests/signal_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 368,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-12-03T20:06:30Z",
      "side": 1,
      "message": "but we should probably assert that we waited at least as long as the timeout specified.",
      "revId": "29e0b2a09ff7b5af64e8c90b9a845ac9c119b83b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}