{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e764d09_0b5bf340",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-25T21:00:48Z",
      "side": 1,
      "message": "that still seems like the \"least worst\" option though?\n\ni don\u0027t think adding a new API makes any sense --- no-one will use it.\n\n(if you do want to go this route, the libc-coord list is probably the place to start? or persuade linux that maybe darwin shouldn\u0027t be the only kernel with posix_spawn...)",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9272df3b_fa147350",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-25T21:38:21Z",
      "side": 1,
      "message": "With this patch the users who likely actually matter will use it, i.e. posix_spawn and (with a separate patch) Java. I don\u0027t think we need to do more than that (e.g. persuade apps to use it).\n\nThe idea behind making it a public API is that apps have the option of using it if they need to (e.g. they use stack tagging in their internal testing builds and have a custom process launcher). But if you think this is too far-fetched we can make it a platform-private API for now.\n\nIt may be worth considering bringing this up on libc-coord, but I guess it wouldn\u0027t be necessary if we add it as a platform-private API. Maybe we can start with a private API and in parallel I will see if I can find some time to start a thread on libc-coord.",
      "parentUuid": "6e764d09_0b5bf340",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d351c8c_fff921ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-25T23:57:07Z",
      "side": 1,
      "message": "\u003e But if you think this is too far-fetched we can make it a platform-private API for now.\n\nyeah, there\u0027s that, but i\u0027m also assuming we end up needing to make vfork() \u003d\u003d fork() for MTE in the end anyway?\n\n\u003e Maybe we can start with a private API\n\nthat sounds like a better place to start. (he says, not really understanding how ART deals with stuff like this. but that\u0027s going to be a problem for them to solve no matter what we do, other than switching them to fork().)",
      "parentUuid": "9272df3b_fa147350",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d64a7a22_01b5b221",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-26T00:46:19Z",
      "side": 1,
      "message": "\u003e yeah, there\u0027s that, but i\u0027m also assuming we end up needing to make vfork() \u003d\u003d fork() for MTE in the end anyway?\n\nNot necessarily. The plan would be to leave vfork() in place with its caveats, and recommend that developers move to another API if they need stack MTE to work correctly. If we don\u0027t expose vforkrun() as a public API, we can recommend moving to posix_spawn().",
      "parentUuid": "6d351c8c_fff921ff",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99955fb3_c1e568ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-26T21:20:22Z",
      "side": 1,
      "message": "\u003e Not necessarily. The plan would be to leave vfork() in place with its caveats, and recommend that developers move to another API if they need stack MTE to work correctly.\n\nthat seems like a barrier to MTE use amongst developers though? vfork() is probably magic left behind by the ancients to most people (as it is at google).\n\n\u003e If we don\u0027t expose vforkrun() as a public API, we can recommend moving to posix_spawn().\n\ni\u0027ve no idea what (if anything) apps use vfork() for but every time i look, most of the platform uses do have a reason.\n\ni note that ndk_translation implements vfork() as fork() for app code (because it needs to do translation), so there\u0027s some precedent for \"this is fine\"...",
      "parentUuid": "d64a7a22_01b5b221",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f435a0f3_c5565791",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-26T22:50:10Z",
      "side": 1,
      "message": "\u003e that seems like a barrier to MTE use amongst developers though? vfork() is probably magic left behind by the ancients to most people (as it is at google).\n\nThis would only apply to stack MTE. However, I remembered that at least as currently implemented, stack MTE in apps would generally require a custom system image because the zygote doesn\u0027t enable stack MTE and it can\u0027t be turned on at runtime (you can build an executable with stack MTE, but most app developers don\u0027t ship executables). So I don\u0027t think it would affect normal app developers. Which I guess is an argument for not introducing a new public API at this point, because it solves a problem that no app developers will currently face.\n\n\u003e i\u0027ve no idea what (if anything) apps use vfork() for but every time i look, most of the platform uses do have a reason.\n\nI guess the reason for Java is:\n- fork() is too slow\n- posix_spawn() is not flexible enough (don\u0027t know if this is actually true)\n\nI\u0027m not aware of other users.\n\n\u003e i note that ndk_translation implements vfork() as fork() for app code (because it needs to do translation), so there\u0027s some precedent for \"this is fine\"...\n\nThe calls to vfork() from Java and posix_spawn() are from platform code so they would be calling the real vfork(), right? It would mean making fork() \u003d\u003d vfork() with stack MTE would affect more things than in the ndk_translation case.\n\nSo the position would be \"we don\u0027t care about the performance difference of stack MTE images, and the behavioral differences of vfork() probably don\u0027t matter\". I\u0027m not super comfortable with that (I don\u0027t like to rely on \"probably\") but I guess I could live with it.\n\nIt would mean going back to something like aosp/2507976 then, which I now realize is incorrect because it isn\u0027t calling the pre/post-fork handlers. That CL would need to be changed to call the handlers (i.e. move the new asm code to the top of the function and have it tail call `fork`), and get rid of the hardcoded constants.\n\nIf/when we propose to allow app developers to use stack MTE in the future, I would be less comfortable with not introducing a new API for accessing the real vfork(), because we don\u0027t know whether app developers will need it.",
      "parentUuid": "99955fb3_c1e568ef",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36df9b4e_92be5890",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-26T22:57:24Z",
      "side": 1,
      "message": "\u003e * fork() is too slow\n\u003e * posix_spawn() is not flexible enough (don\u0027t know if this is actually true)\n\nyeah, these are the two most common reasons i see for non-libcore use cases too. (the former being more common than the latter, because most people don\u0027t even know about posix_spawn(). but a quick code search turns up at least one user doing something you can\u0027t do with posix_spawn().)\n\n\u003e So the position would be \"we don\u0027t care about the performance difference of stack MTE images, and the behavioral differences of vfork() probably don\u0027t matter\". I\u0027m not super comfortable with that (I don\u0027t like to rely on \"probably\") but I guess I could live with it.\n\nyeah, i\u0027m fairly comfortable with the performance half, but the behavioral side is a lot more dodgy.\n\n\u003e It would mean going back to something like aosp/2507976 then, which I now realize is incorrect because it isn\u0027t calling the pre/post-fork handlers. \n\n(which is one of the _other_ reasons we see for vfork() --- deliberately avoiding calling the atfork handlers. simpleperf does this, for example, though that may only be on the host?)\n\n\u003e If/when we propose to allow app developers to use stack MTE in the future, I would be less comfortable with not introducing a new API for accessing the real vfork(), because we don\u0027t know whether app developers will need it.\n\nyeah, but that\u0027s a completely different conversation then. (we might even want to change the header so that you don\u0027t _get_ vfork() if you\u0027re building with MTE.)",
      "parentUuid": "f435a0f3_c5565791",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52fa6fdb_4bfee96c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-26T23:03:27Z",
      "side": 1,
      "message": "\u003e (which is one of the other reasons we see for vfork() --- deliberately avoiding calling the atfork handlers. simpleperf does this, for example, though that may only be on the host?)\n\nAren\u0027t the atfork handlers needed with fork() so that we aren\u0027t left with potential deadlocks in the child? This problem doesn\u0027t exist with vfork() because the child runs concurrently with the other threads in the same address space, so there\u0027s no potential for deadlock.",
      "parentUuid": "36df9b4e_92be5890",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66ab49f6_e9c795ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-26T23:04:58Z",
      "side": 1,
      "message": "\u003e Aren\u0027t the atfork handlers needed with fork() so that we aren\u0027t left with potential deadlocks in the child?\n\nprepare to be very sad...\n\nhttps://source.corp.google.com/android/system/extras/simpleperf/app_api/cpp/simpleperf.cpp;l\u003d306",
      "parentUuid": "52fa6fdb_4bfee96c",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dad4adc3_f4b28d8e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-26T23:20:22Z",
      "side": 1,
      "message": "Yuck. Worse, https://google.com/search?q\u003dgsl_library_close seems to imply that this is a device thing. That basically puts us between a rock and a hard place with vfork(): if we don\u0027t call handlers, we risk deadlocks. If we do, we risk bad behavior from badly written atfork handlers. Although ndk_translation may seem to be an existence proof against deadlocks in apps, it isn\u0027t really, because the most likely vfork() callers i.e. Java and posix_spawn() aren\u0027t affected.\n\nSo I don\u0027t know, maybe this CL (while leaving the API private) is actually the least worst option?",
      "parentUuid": "66ab49f6_e9c795ac",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91de7cec_97eba3c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-27T00:03:23Z",
      "side": 1,
      "message": "\u003e Although ndk_translation may seem to be an existence proof against deadlocks in apps, it isn\u0027t really, because the most likely vfork() callers i.e. Java and posix_spawn() aren\u0027t affected.\n\nOn the other hand, I don\u0027t think Java or posix_spawn() call any APIs that may deadlock before calling exec(), so maybe not calling the handlers is okay.",
      "parentUuid": "dad4adc3_f4b28d8e",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e3bcb67_6011871b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-27T21:11:15Z",
      "side": 1,
      "message": "\u003e On the other hand, I don\u0027t think Java or posix_spawn() call any APIs that may deadlock before calling exec(), so maybe not calling the handlers is okay.\n\nit\u0027s certainly the easiest option. (but you\u0027re not wrong that this is a behavior difference. but presumably any issues would be easy to spot and diagnose? and seem unlikely anyway?)",
      "parentUuid": "91de7cec_97eba3c0",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff889b6c_3d629b38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-05-06T02:01:11Z",
      "side": 1,
      "message": "\u003e it\u0027s certainly the easiest option. (but you\u0027re not wrong that this is a behavior difference. but presumably any issues would be easy to spot and diagnose? and seem unlikely anyway?)\n\nDone: aosp/2507976",
      "parentUuid": "5e3bcb67_6011871b",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "670ff766_54285747",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-25T20:45:31Z",
      "side": 1,
      "message": "enh: Ping.",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428e8f0e_91d926e5",
        "filename": "libc/include/android/vforkrun.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-25T21:00:48Z",
      "side": 1,
      "message": "(or did you not mean to put this here, and intended this to be in \u003cplatform/\u003e instead? at the moment the declaration is public but the definition is private.)",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0982656_1683c951",
        "filename": "libc/include/android/vforkrun.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2023-04-25T21:38:21Z",
      "side": 1,
      "message": "For the definition I was waiting for it to become possible to add this to LIBC_V.",
      "parentUuid": "428e8f0e_91d926e5",
      "revId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "AIDL-API-Review",
        "description": {
          "value": "Submit requirement for the AIDL-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(.*/)?aidl_api/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:AIDL-API-Review AND -label:AIDL-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(.*/)?aidl_api/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(.*/)?aidl_api/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:AIDL-API-Review AND -label:AIDL-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "API-Review",
        "description": {
          "value": "Submit requirement for the API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:API-Review\u003dMAX AND -label:API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\"","project:device/generic/vulkan-cereal","project:platform/external/qemu","project:platform/hardware/interfaces","project:toolchain/go","project:platform/prebuilts/go/darwin-x86","project:platform/prebuilts/go/linux-x86","project:platform/system/tools/xsdc","project:platform/external/gfxstream-protocols","project:platform/system/libvintf","file:\"^xsd/\"","project:platform/frameworks/av","file:\".*/xmlparser/.*\"","project:platform/external/icu","file:\".*android_icu4j/api/legacy_platform/.*\"","project:platform/tools/base","file:\".*build-system/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:API-Review=MAX AND -label:API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Build-Team-Review",
        "description": {
          "value": "Build team review is required"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Build-Team-Review\u003dMAX AND -label:Build-Team-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"Import translations.\"","message:\"DO NOT MERGE ANYWHERE\"","branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Build-Team-Review=MAX AND -label:Build-Team-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the Code-Review requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Code-Review\u003dMIN AND (label:Code-Review\u003dMAX,user\u003dnon_uploader OR (label:Code-Review\u003dMAX AND (label:Exempt\u003d+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Code-Review=MIN AND (label:Code-Review=MAX,user=non_uploader OR (label:Code-Review=MAX AND (label:Exempt=+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MIN","label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX","label:Exempt=+1","uploader:1474732","project:platform/developers/docs","project:platform/frameworks/support"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers"]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "DrNo-Review",
        "description": {
          "value": "Submit requirement for the DrNo-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:DrNo-Review\u003dMAX AND -label:DrNo-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/heads/oreo-cts-dev","branch:refs/heads/oreo-mr1-cts-dev","branch:refs/heads/oreo-vts-dev","branch:refs/heads/oreo-mr1-vts-dev","branch:refs/heads/nougat-cts-dev","branch:refs/heads/nougat-mr1-cts-dev","branch:refs/heads/pie-cts-dev","branch:refs/heads/pie-vts-dev","branch:refs/heads/android10-tests-dev","branch:refs/heads/android11-tests-dev","branch:refs/heads/android12-tests-dev","branch:refs/heads/android12L-tests-dev","branch:refs/heads/android13-tests-dev","branch:^refs/heads/.*-gsi","branch:refs/heads/emu-32-dev"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:DrNo-Review=MAX AND -label:DrNo-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Lint",
        "description": {
          "value": "Submit requirement for the Lint requirement"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Lint\u003dMIN AND (label:Lint\u003d+2 OR -label:Lint\u003d-1)"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Lint=MIN AND (label:Lint=+2 OR -label:Lint=-1)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Lint=MIN","label:Lint=+2","label:Lint=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1"]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "NDK-API-Review",
        "description": {
          "value": "Submit requirement for the NDK-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^.*\\\\.map\\\\.txt$\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:NDK-API-Review\u003dMAX AND -label:NDK-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^.*\\\\.map\\\\.txt$\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^.*\\\\.map\\\\.txt$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:NDK-API-Review=MAX AND -label:NDK-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Open-Source-Licensing",
        "description": {
          "value": "Submit requirement for the Open-Source-Licensing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Open-Source-Licensing\u003d0 OR (-label:Open-Source-Licensing\u003dMIN AND ((label:Open-Source-Licensing\u003dMAX AND label:Open-Source-Licensing\u003d-1) OR -label:Open-Source-Licensing\u003d-1))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Open-Source-Licensing=0 OR (-label:Open-Source-Licensing=MIN AND ((label:Open-Source-Licensing=MAX AND label:Open-Source-Licensing=-1) OR -label:Open-Source-Licensing=-1))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Open-Source-Licensing=0","label:Open-Source-Licensing=MIN","label:Open-Source-Licensing=MAX","label:Open-Source-Licensing=-1","label:Open-Source-Licensing=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1"]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Presubmit-Verified",
        "description": {
          "value": "Submit requirement for the Presubmit-Verified requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Presubmit-Verified\u003d-2 AND (label:Bypass-Presubmit\u003d+1 OR label:Presubmit-Verified-Together\u003d+1 OR (-label:Presubmit-Verified\u003d-1 AND (label:Presubmit-Verified\u003d+2 OR label:Presubmit-Verified\u003d+1)))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bypass-Presubmit\u003d+2 OR is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert AND -label:Presubmit-Verified\u003d-2)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Presubmit-Verified=-2 AND (label:Bypass-Presubmit=+1 OR label:Presubmit-Verified-Together=+1 OR (-label:Presubmit-Verified=-1 AND (label:Presubmit-Verified=+2 OR label:Presubmit-Verified=+1)))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Presubmit-Verified=-2","label:Bypass-Presubmit=+1","label:Presubmit-Verified-Together=+1","label:Presubmit-Verified=-1","label:Presubmit-Verified=+2","label:Presubmit-Verified=+1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bypass-Presubmit=+2 OR is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert AND -label:Presubmit-Verified=-2)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bypass-Presubmit=+2","is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Presubmit-Verified=-2"]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Qualcomm-Review",
        "description": {
          "value": "Submit requirement for the Qualcomm-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Qualcomm-Review\u003dMAX AND -label:Qualcomm-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\"","project:\"^.*/vendor/(qcom|bsp).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Qualcomm-Review=MAX AND -label:Qualcomm-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f2f2df5d5f0dd13a42f4429680f0d2c580df38a3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}