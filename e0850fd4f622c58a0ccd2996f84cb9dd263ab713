{
  "comments": [
    {
      "key": {
        "uuid": "2c65fb2f_7141a692",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 53,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "pass a single bool argument",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1142f21_169436df",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 53,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c65fb2f_7141a692",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05607946_0f5c5d80",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "storing a dispatch pointer \"for later\" will break things if other malloc is initialized after us",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 27
      },
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "556a2c00_503f9cb7",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Fixed as part of rework, gwp_asan_initialize is now called during zygote mallopt() and libc init.",
      "parentUuid": "05607946_0f5c5d80",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 27
      },
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca89e77e_25d8cb90",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "zygote_child \u003d\u003d nullptr\nis this ever true?",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "492ba936_ff74ce0c",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "I don\u0027t see any places currently - but malloc_debug does the same check (https://cs.android.com/android/platform/superproject/+/master:bionic/libc/malloc_debug/malloc_debug.cpp;l\u003d260?q\u003ddebug_initialize) :). Happy to kill if you want.",
      "parentUuid": "ca89e77e_25d8cb90",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73da94fb_c2fa1256",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "what about app_process64?\nAlso, is it not zygote/zygote64 at this point yet?",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b60cf74f_b3a51c60",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-02-04T02:25:46Z",
      "side": 1,
      "message": "I tried this and it\u0027s still app_process by this time. I think both zygote are app_process at this point, but it\u0027s worth verifying.",
      "parentUuid": "73da94fb_c2fa1256",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd3cca5f_68434b0a",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-02-04T05:01:37Z",
      "side": 1,
      "message": "Comparing the process name seems like a bit of a hack. I wonder whether this would be better done using an ELF note or something.",
      "parentUuid": "b60cf74f_b3a51c60",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312814a2_49891ea0",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Looks to me that they\u0027re app_process32/app_process64. Have made the change to fix it for 64-bit. Worth a discussion - do we want GWP-ASan for 32-bit?",
      "parentUuid": "b60cf74f_b3a51c60",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "072f2072_4e1dbcff",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-04T18:08:30Z",
      "side": 1,
      "message": "_we_ probably don\u0027t care too much, but there are definitely OEMs who\u0027re shipping 32-bit devices who complain about not being able to use shiny new things like hwasan there.\n\nwhat would 32-bit support cost on our side? i\u0027m assuming it\u0027s basically free?",
      "parentUuid": "312814a2_49891ea0",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54636b5d_78dc9e88",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T18:22:43Z",
      "side": 1,
      "message": "Major: GWP-ASan comes with a tuneable increase in RSS when turned on. With 32 sampled allocations (current settings), this amounts to 16KiB Metadata + 64KiB lost memory (assuming 50% loss factor. free()\u0027d allocations have 0% loss, live allocations have sizeof(alloc)-sizeof(page) loss) \u003d 80KiB.\n\nMinor: On chromium, we found that the smaller 32-bit address space, combined with hardware errors, meant that we were more likely to have false-positive GWP-ASan crashes. Without GWP-ASan, we\u0027d still crash, but now we are more likely to *think* that GWP-ASan caused it as the HW failure can fall easier into the GWP-ASan region.\n\nI think we should go with 32-bit, 80KiB per sampled process seems very reasonable to me.",
      "parentUuid": "072f2072_4e1dbcff",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77112f53_257b02a9",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-04T19:10:08Z",
      "side": 1,
      "message": "yeah, sgtm. we should document this in a README.md for gwp-asan though, to make OEMs aware (both of the fact that they can use this on LP32, but also what\u0027s likely to cause trouble).",
      "parentUuid": "54636b5d_78dc9e88",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50d06dfd_abdc2d49",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-10T23:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77112f53_257b02a9",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c08819_84aa599f",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "why not call InitGwpAsan directly?",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a497151_5a08cd1f",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-02-04T02:25:46Z",
      "side": 1,
      "message": "Agreed, no reason to call the higher level function.",
      "parentUuid": "c3c08819_84aa599f",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12eed93a_eb800b28",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a497151_5a08cd1f",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82f7145e_3c8ac41f",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "heapprofd returns -1 here",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bc4876_92804f06",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82f7145e_3c8ac41f",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68376395_0fe182e6",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "It might be easier to simply declare an extern global for this and the dispatch table below.",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95636b5a_d04c6ebe",
        "filename": "libc/bionic/gwp_asan_wrappers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68376395_0fe182e6",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20786eba_f4ce0ffc",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "please call it for what it does, i.e. bool no_warning_if_fails, or may_fail, something like that",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfeb49fc_d2e04608",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-02-04T02:25:46Z",
      "side": 1,
      "message": "Yeah, maybe instead warn_on_init_fail and then you can have the warn_on_init_fail down below, rather than the negative.",
      "parentUuid": "20786eba_f4ce0ffc",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf2dfef0_31ba6271",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfeb49fc_d2e04608",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "575ea2c0_e49c3079",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 4
      },
      "lineNbr": 431,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-02-03T19:15:10Z",
      "side": 1,
      "message": "this needs to be done in mallopt, too",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72bffc9_58cd0c9f",
        "filename": "libc/bionic/malloc_common_dynamic.cpp",
        "patchSetId": 4
      },
      "lineNbr": 431,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "575ea2c0_e49c3079",
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb5ef188_44c57d40",
        "filename": "libc/platform/bionic/malloc.h",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-02-04T02:25:46Z",
      "side": 1,
      "message": "What happens if it is not single-threaded? Will it fail/crash, or something else?",
      "range": {
        "startLine": 102,
        "startChar": 14,
        "endLine": 102,
        "endChar": 62
      },
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92260db1_23639351",
        "filename": "libc/platform/bionic/malloc.h",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-02-04T17:20:07Z",
      "side": 1,
      "message": "All uninitialised threads will take 2^32 mallocs() to realise that they can actually receive sampled allocations. You also get some racy behaviour, which can manifest in a crash if you call free() from T1 while T2 is calling init().\n\nIf there\u0027s the possibility of calling init() from multiple threads concurrently, or call init() more than once, you\u0027re going to have a bad time.",
      "parentUuid": "eb5ef188_44c57d40",
      "range": {
        "startLine": 102,
        "startChar": 14,
        "endLine": 102,
        "endChar": 62
      },
      "revId": "e0850fd4f622c58a0ccd2996f84cb9dd263ab713",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}