{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1148e1_59aa4ee4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-09-11T16:05:46Z",
      "side": 1,
      "message": "one of these days you\u0027re going to have to explain to me how you still get real work done during perf despite having reports!\n\nin the meantime, as soon as there\u0027s a gap in perf (and danalbert\u0027s back to review my changes upstream), i\u0027ll see about getting this stuff fixed in libc++ instead.",
      "range": {
        "startLine": 14,
        "startChar": 24,
        "endLine": 14,
        "endChar": 57
      },
      "revId": "2ebdbe0d47ba464185472b650cc2f99510e7668a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bea75d65_a4e2af13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-09-14T03:29:09Z",
      "side": 1,
      "message": "Haha, perhaps I did the perf poorly :)\n\nYeah, fixing this in libc++ would be the best, although I am not sure if we can make such an Android-specific change to libc++. In addition, what shall be the behavior if the builtin_available check fails?\n\ninline long double nexttoward(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {\n  if (__builtin_available(android 18, *)) {\n    return ::nexttowardl(__lcpp_x, __lcpp_y);\n  } else {\n    ???\n  }\n}",
      "parentUuid": "8f1148e1_59aa4ee4",
      "range": {
        "startLine": 14,
        "startChar": 24,
        "endLine": 14,
        "endChar": 57
      },
      "revId": "2ebdbe0d47ba464185472b650cc2f99510e7668a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e11a9724_b6f389cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-01-14T18:05:53Z",
      "side": 1,
      "message": "...or should we suppress the warning? e.g.\n\n```\ninline long double nexttoward(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {\n#pragma clang diagnostic push                                                                                                                                                                                                                              \n#pragma clang diagnostic ignored \"-Wunguarded-availability\" \n    return ::nexttowardl(__lcpp_x, __lcpp_y);\n#pragma clang diagnostic pop\n}\n```",
      "parentUuid": "bea75d65_a4e2af13",
      "range": {
        "startLine": 14,
        "startChar": 24,
        "endLine": 14,
        "endChar": 57
      },
      "revId": "2ebdbe0d47ba464185472b650cc2f99510e7668a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c4d6cfc_297e15bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-14T19:12:51Z",
      "side": 1,
      "message": "why wouldn\u0027t we just go with https://android-review.googlesource.com/c/platform/external/libcxx/+/1427569 ? that\u0027s basically a \"crappy backport\" of the forthcoming compiler behavior change to the library instead.",
      "parentUuid": "e11a9724_b6f389cc",
      "range": {
        "startLine": 14,
        "startChar": 24,
        "endLine": 14,
        "endChar": 57
      },
      "revId": "2ebdbe0d47ba464185472b650cc2f99510e7668a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}