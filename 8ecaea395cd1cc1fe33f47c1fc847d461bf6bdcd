{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "480afad2_d50ce43e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T21:35:43Z",
      "side": 1,
      "message": "TBH, I don\u0027t understand what the comment above __unsafe_check_mul_overflow is getting at.\n\nThis patch is an alternative to aosp/3047054.",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c3792ba_fa29b1bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2024-04-17T21:59:52Z",
      "side": 1,
      "message": "IIRC, I wrote `__unsafe_check_mul_overflow` for use in contexts where `__size_mul_overflow` wouldn\u0027t work at all (read: `diagnose_if` conditions, which had to be 100% handled in clang\u0027s constexpr evaluator, regardless of lang/standard).\n\nThe best explanation I can offer for \"what did it _mean_,\" is \"meh, if an intrinsic is available, it\u0027s probably going to do a better job. Also it\u0027s potentially easy to mishandle this. Just ask people to use the `__size_mul_overflow` thing.\"",
      "parentUuid": "480afad2_d50ce43e",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eebd7bc4_9e416c65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T22:47:42Z",
      "side": 1,
      "message": "It\u0027s been a recurring theme in C++ generally of \"should this function have been constexpr?\" but especially for the compiler builtins which IIRC need to be explicitly marked as such in clang (so if no one does so, users get confusing error messages about their functions not being evaluateable in constexpr contexts).  Clang produces a error when using this builtin in constexpr contexts.",
      "parentUuid": "8c3792ba_fa29b1bd",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5894d74_1a6d08cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T23:23:35Z",
      "side": 1,
      "message": "Ah ctrl+z saved me!\n\nhttps://godbolt.org/z/aE1dE9a81 demonstrates the issue George is referring to.  I haven\u0027t tried replacing it to see what breaks but I\u0027m guessing we don\u0027t want to break `if constexpr (strlen(...`.  Though there is a builtin for \"are we being evaluated in constexpr context...might be able to use that here.",
      "parentUuid": "eebd7bc4_9e416c65",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06dd4180_c7a98938",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T23:26:32Z",
      "side": 1,
      "message": "https://godbolt.org/z/K11hrqn9K \u003e:)",
      "parentUuid": "a5894d74_1a6d08cc",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "018cc37e_1565bcc6",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-04-17T21:50:12Z",
      "side": 1,
      "message": "we actually need this? might be less bad to make `total` unsigned long, lose the cast here, and get a free \"conversion\" in the fread() and __check_buffer_access() calls?\n\n(why did they get `__builtin_*_overflow_p()` right [type-generic], but but `__builtin_*_overflow()`?)",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a41ecaf_0f3fd271",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T21:52:58Z",
      "side": 1,
      "message": "```\nbionic/libc/bionic/fortify.cpp:113:61: error: cannot initialize a parameter of type \u0027unsigned long *\u0027 with an rvalue of\n type \u0027size_t *\u0027 (aka \u0027unsigned int *\u0027)\n  113 |   if (__predict_false(__builtin_umull_overflow(size, count, \u0026total))) {\n      |                                                             ^~~~~~\nbionic/libc/include/sys/cdefs.h:138:48: note: expanded from macro \u0027__predict_false\u0027\n  138 | #define __predict_false(exp)    __builtin_expect((exp) !\u003d 0, 0)\n      |                                                   ^~~\n```\notherwise",
      "parentUuid": "018cc37e_1565bcc6",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370c0a89_a1ae62d5",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T21:54:33Z",
      "side": 1,
      "message": "\u003e might be less bad to make total unsigned long, lose the cast here, and get a free \"conversion\" in the fread() and __check_buffer_access() calls?\n\nYeah, that looks better and works. Let me upload a new patchset.",
      "parentUuid": "8a41ecaf_0f3fd271",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79d3e006_85c542a2",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T21:56:02Z",
      "side": 1,
      "message": "Done but PTAL",
      "parentUuid": "370c0a89_a1ae62d5",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a77ea27_4345635c",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-04-17T21:56:24Z",
      "side": 1,
      "message": "(i hate c programmers. `size_t` is a useful concept, damn it --- just ask java!)",
      "parentUuid": "370c0a89_a1ae62d5",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55caba9e_3c00d424",
        "filename": "libc/bionic/fortify.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2024-04-17T21:57:31Z",
      "side": 1,
      "message": "\u003e i hate c programmers.\n\nWell, I hate to break it to you...\n\n/me holds up mirror",
      "parentUuid": "6a77ea27_4345635c",
      "range": {
        "startLine": 104,
        "startChar": 48,
        "endLine": 104,
        "endChar": 80
      },
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ed9aaf9_cc4f5115",
        "filename": "libc/include/sys/cdefs.h",
        "patchSetId": 1
      },
      "lineNbr": 326,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-04-17T21:50:12Z",
      "side": 1,
      "message": "by virtue of being _u_ mul, i\u0027d argue it definitely does make an assumption about its arguments being positive. or is this really making the positive vs non-negative distinction? oh, this is actually `((-1 / x) \u003c y)`?\n\ni\u0027ll be honest i don\u0027t know why _this_ macro isn\u0027t just replaceable with `__builtin_mul_overflow_p()`... hopefully gbiv will either give us the comment we should write, or say \"yeah, this has outlived its purpose now\" :-)",
      "revId": "8ecaea395cd1cc1fe33f47c1fc847d461bf6bdcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}