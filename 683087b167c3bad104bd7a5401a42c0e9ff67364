{
  "comments": [
    {
      "key": {
        "uuid": "7c444057_cf37dd5b",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-04T00:04:52Z",
      "side": 1,
      "message": "I would add another comment here:\n\n/*\n * Memory ordering requirements for Posix semaphores appear unclear\n * and are currently interpreted inconsistently.\n * We conservatively prefer sequentially consistent operations for now.\n * CAUTION: This is more conservative than some other major\n * implementations, and may change if and when the issue is resolved.\n */\n\nIt will be interesting to see if we observe any real performance regressions.",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 3
      },
      "revId": "683087b167c3bad104bd7a5401a42c0e9ff67364",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c293c84_0e0debae",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-04T00:04:52Z",
      "side": 1,
      "message": "I actually think this one can remain relaxed, since we don\u0027t successfully return unless the compare_exchange below succeeds.",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 54
      },
      "revId": "683087b167c3bad104bd7a5401a42c0e9ff67364",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c293c84_8edf9b85",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-02-04T00:04:52Z",
      "side": 1,
      "message": "I think this can also remain relaxed.  If we exit without the compare_exchange, the world is broken anyway.  We\u0027ll inherently miss the release operation, which seems far more critical.\n\n(An error return for that case would make a lot more sense to me, but indeed seems to be disallowed.)",
      "range": {
        "startLine": 186,
        "startChar": 27,
        "endLine": 186,
        "endChar": 54
      },
      "revId": "683087b167c3bad104bd7a5401a42c0e9ff67364",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}