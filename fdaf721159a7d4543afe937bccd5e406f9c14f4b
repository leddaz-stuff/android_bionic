{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f527e38c_13c8b495",
        "filename": "libc/arch-riscv64/bionic/setjmp.S",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-02-21T11:20:18Z",
      "side": 1,
      "message": "For my understanding, why do we keep low and high bits separately? What happened with the low bits so that they need restoring? Why isn\u0027t x18 just used for shadow stack always, and an extra register a4 is neeed for the low bits?",
      "range": {
        "startLine": 252,
        "startChar": 17,
        "endLine": 252,
        "endChar": 20
      },
      "revId": "fdaf721159a7d4543afe937bccd5e406f9c14f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532bc2fd_f44d9ad4",
        "filename": "libc/arch-riscv64/bionic/setjmp.S",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-02-21T18:48:50Z",
      "side": 1,
      "message": "it\u0027s just so we don\u0027t have such a convenient gadget for malware to get the SCS stack pointer... we only store the \"surprising\" bits.\n\ni think the key non-obvious things to realize are:\n\n1. since it only contains return addresses, the _shadow_ stack size is a very small fixed size for all threads: 8KiB.\n\n2. setjmp()/longjmp() _between_ threads is undefined behavior (and not supported on Android).\n\nso the _high_ bits of x18 _must_ be the same; the only question is \"where in the _same_ 8KiB block is the pointer currently?\". so that\u0027s all we store in the jmp_buf.\n\n(it does seem worth me elaborating on this a bit, probably in one of the existing SCS-related comment blocks, but i\u0027m not sure _which_... maybe the long one in pthread_internal.h?)",
      "parentUuid": "f527e38c_13c8b495",
      "range": {
        "startLine": 252,
        "startChar": 17,
        "endLine": 252,
        "endChar": 20
      },
      "revId": "fdaf721159a7d4543afe937bccd5e406f9c14f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2adef260_ca3fe3ac",
        "filename": "libc/arch-riscv64/bionic/setjmp.S",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-02-22T12:20:06Z",
      "side": 1,
      "message": "Thanks for the explanation! Definitely worth adding a comment, but you have a much better idea where it should be.",
      "parentUuid": "532bc2fd_f44d9ad4",
      "range": {
        "startLine": 252,
        "startChar": 17,
        "endLine": 252,
        "endChar": 20
      },
      "revId": "fdaf721159a7d4543afe937bccd5e406f9c14f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03ef9235_cc835ac3",
        "filename": "libc/arch-riscv64/bionic/setjmp.S",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-02-23T01:22:35Z",
      "side": 1,
      "message": "heh, if neither of us are feeling brave enough to pick _one_ place, i\u0027ve expanded the already-longest comment, and made the others all refer to that. (i\u0027ve done a little SEO too so that all of the macros are mentioned in the big comment now, increasing the chances a prospective reader will find it even if they\u0027re just grepping for a macro.)",
      "parentUuid": "2adef260_ca3fe3ac",
      "range": {
        "startLine": 252,
        "startChar": 17,
        "endLine": 252,
        "endChar": 20
      },
      "revId": "fdaf721159a7d4543afe937bccd5e406f9c14f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}