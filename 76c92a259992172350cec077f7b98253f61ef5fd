{
  "comments": [
    {
      "key": {
        "uuid": "4377f97f_c4a8c820",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2017-01-18T20:49:16Z",
      "side": 1,
      "message": "I think it is ok to fail if we somehow ended up with overlapping mmaps from shared libs. It should not happen, right? Maybe just replace CHECK with __libc_fatal()?",
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4377f97f_647a948d",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2017-01-18T21:14:28Z",
      "side": 1,
      "message": "It\u0027s possible in theory because of MAP_FIXED mappings that can not be realigned. ART does that. I\u0027ve never seen it happen with cfi-enabled libraries in practice.\n\nLet\u0027s do the kUncheckedShadow thing for now.",
      "parentUuid": "4377f97f_c4a8c820",
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4377f97f_6fca6d27",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2017-01-18T21:28:53Z",
      "side": 1,
      "message": "I think linker always checks for this kind of stuff by doing mmap with hint first and failing if the requested region in not mappable.\n\nIt is still possible for caller to do map_fixed/unmap and then call the linker - but in this case I feel like aborting is safer than letting dso maps to overlap.\n\nSame goes for the case when caller wants to use already reserved space.. if any of it belongs to already loaded library it will not end well.",
      "parentUuid": "4377f97f_647a948d",
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8852ac9_628fb613",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2017-01-18T21:32:38Z",
      "side": 1,
      "message": "The dsos do not really overlap. This check fires if the property of kLibraryAlignmentBits does not hold, i.e. there is more than one library inside a kLibraryAlignment-sized and -aligned region.",
      "parentUuid": "4377f97f_6fca6d27",
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4377f97f_848fb0bb",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 144,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2017-01-18T20:49:16Z",
      "side": 1,
      "message": "does it save anything?",
      "range": {
        "startLine": 144,
        "startChar": 74,
        "endLine": 144,
        "endChar": 87
      },
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4377f97f_242b3ca1",
        "filename": "linker/linker_cfi.cpp",
        "patchSetId": 20
      },
      "lineNbr": 144,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2017-01-18T21:14:28Z",
      "side": 1,
      "message": "Yeah, the mapping is like 4MB on Aarch64, and its RSS is ~20KB.",
      "parentUuid": "4377f97f_848fb0bb",
      "range": {
        "startLine": 144,
        "startChar": 74,
        "endLine": 144,
        "endChar": 87
      },
      "revId": "76c92a259992172350cec077f7b98253f61ef5fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}