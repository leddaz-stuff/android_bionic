{
  "comments": [
    {
      "key": {
        "uuid": "a2e32149_7abe74da",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-03-04T19:58:05Z",
      "side": 1,
      "message": "so this is a more interesting test than the old one, which just fucked with the TLS slot value. this is actually testing what we\u0027re looking for. unfortunately, it doesn\u0027t fix the bug that got me looking at this code in the first place, which is that this test fails on x86-64.\n\nideas?",
      "revId": "dc27dc77ef56f5d87392585a38603a5be24dfed7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e21b5959_83d4fec1",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-03-05T00:20:01Z",
      "side": 1,
      "message": "Is it possible that x86_64 is optimizing away this code? Maybe it can tell that buf is never used, and only on the stack.",
      "parentUuid": "a2e32149_7abe74da",
      "revId": "dc27dc77ef56f5d87392585a38603a5be24dfed7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f705ddfe_fc25c9a4",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-03-05T00:24:22Z",
      "side": 1,
      "message": "Nope, disassembly shows the loop for this.",
      "parentUuid": "e21b5959_83d4fec1",
      "revId": "dc27dc77ef56f5d87392585a38603a5be24dfed7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02214d86_4d15d15d",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1079129
      },
      "writtenOn": "2016-03-06T05:00:55Z",
      "side": 1,
      "message": "This function invokes undefined behavior, so its not particularly surprising that the test case does funny things when compiled for different archs.\n\nAt optimization levels O1 and O2 GCC essentially turned this into a loop that doesn\u0027t store anything:\n\n 4005d0:       48 83 c0 01             add    $0x1,%rax\n  4005d4:       48 89 c2                mov    %rax,%rdx\n  4005d7:       48 29 ca                sub    %rcx,%rdx\n  4005da:       48 81 fa 87 00 00 00    cmp    $0x87,%rdx\n  4005e1:       7e ed                   jle    4005d0 \u003c_Z27modify_stack_protector_testv+0x20\u003e\n\nnotice there\u0027s no actual movb $0x0, buf\n\nFor whatever reason at no optimization (-O0) gcc is aligning the buffer or something so there is 8 bytes of padding between the end of the buffer and the start of the cookie so at -O0 this code just writes 0\u0027s to that padding location, leaving the cookie in its original state.\n\nThe following works on -m32 and x86_64 at all optimization levels:\ngcc version 4.9.3 (Ubuntu 4.9.3-8ubuntu2~14.04) \n\n        volatile char* p \u003d buf;\n        while ((p - buf) \u003c static_cast\u003cint\u003e(sizeof(buf) + sizeof(void*) * 2))\n                *p++ \u003d \u0027\\0\u0027;\n\nIt\u0027s possible that this clobbers a saved base pointer when cross compiled to arm and aarch64, but since we will should call __stack_chk_fail and abort() it shouldn\u0027t matter.",
      "parentUuid": "e21b5959_83d4fec1",
      "revId": "dc27dc77ef56f5d87392585a38603a5be24dfed7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "778e4df1_c0723e6f",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-03-07T20:07:46Z",
      "side": 1,
      "message": "that doesn\u0027t work for me (with GCC or clang). and i do get the movb:\n\n  322860:       c6 40 ff 00             movb   $0x0,-0x1(%rax)\n  322864:       48 89 c2                mov    %rax,%rdx\n  322867:       48 29 ca                sub    %rcx,%rdx\n  32286a:       48 ff c0                inc    %rax\n  32286d:       48 81 fa 90 00 00 00    cmp    $0x90,%rdx\n  322874:       7c ea                   jl     322860 \u003cmodify_stack_protector_test()+0x30\u003e",
      "parentUuid": "02214d86_4d15d15d",
      "revId": "dc27dc77ef56f5d87392585a38603a5be24dfed7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}