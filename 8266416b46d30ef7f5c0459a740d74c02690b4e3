{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c6bd4d82_b1e4a6d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T22:42:14Z",
      "side": 1,
      "message": "(even if you do want to do more, i think what you have here is fine to go in as-is...)",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "702ed441_e65aa8e1",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:13:22Z",
      "side": 1,
      "message": "should we move them into the linker tests if this is causing confusion?",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "995ea3e6_298a4364",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T22:18:51Z",
      "side": 1,
      "message": "Is it causing confusion? I added the note because:\n - The function was a bit tricky, so I thought it\u0027d be helpful to call out the unit tests for it.\n - Usually bionic-unit-tests is a superset of bionic-unit-test-static, but that\u0027s not the case for these tests that access Bionic internals directly. The same is true for the bionic_allocator_test.cpp test:\n   ```\n   // Test internal parts of Bionic that aren\u0027t exposed via libc.so.\n   \"bionic_allocator_test.cpp\",\n   \"static_tls_layout_test.cpp\",\n   ```\n\nBut I do see that `:elf_note_sources` also being tested in linker-unit-tests, so maybe that\u0027s the right place for testing Bionic\u0027s internals directly? There is a complication: bionic-unit-test-static can easily access Bionic\u0027s internals because it\u0027s linked against libc.a, whereas linker-unit-tests must include the parts of Bionic it wants to test. It\u0027s dubious to include all of bionic_elf_tls.cpp in linker-unit-tests because parts of it would interfere with the actual ELF TLS implementation in linker[64] and libc.so (e.g. `__libc_tls_generation_copy`, `TLS_GET_ADDR/__tls_get_addr`). It\u0027s easy to fix by splitting StaticTlsLayout out into its own file, and that\u0027s actually what I did initially before realizing I didn\u0027t have to.\n\nI think I can clarify the comment (or just remove it), and if we want to move this internal testing into linker-unit-tests, that can be a separate commit, which would involve splitting out StaticTlsLayout into a separate file.",
      "parentUuid": "702ed441_e65aa8e1",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7940443a_346f0ddb",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T22:42:14Z",
      "side": 1,
      "message": "oh, yeah, i definitely didn\u0027t mean to do that in this already large and complicated cl. i just thought \"if the linker guy didn\u0027t think the location of these tests was obvious, are we better off moving them to match his expectations rather than commenting the mismatch?\" :-)\n\n(and, yeah, fully agree that this is a weird corner case where neither option seems 100% right.)\n\n((thanks to mainline, i only ever run the static tests anyway, unless i _have_ to run the dynamic ones!))",
      "parentUuid": "995ea3e6_298a4364",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1875ad30_c5dfcb6c",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 373,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:13:22Z",
      "side": 1,
      "message": "still don\u0027t want to log that we\u0027re ignoring this?",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97e6ed87_29a13554",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 373,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T22:18:51Z",
      "side": 1,
      "message": "It didn\u0027t really seem necessary to me, but I think I can add it.\n\nMaybe log when the ELF file is loaded? That is, log in `register_soinfo_tls` when `g_static_tls_finished` is true.\n\nI\u0027m wondering whether it\u0027s safe to log from `__tls_get_addr`, but I don\u0027t know that it wouldn\u0027t be. Maybe we wouldn\u0027t want to log while signals are blocked and `modules.rwlock` is held? I don\u0027t know that for sure, though.\n\nPractically, a log message should include the name of the ELF file, which is technically available via `TlsModule::soinfo_ptr` but it\u0027s inconvenient because this is libc and not the loader, so `soinfo_ptr` has type `void*`. We also don\u0027t want to log every time a thread allocates the memory. It might be better to omit the log if no thread ever accesses the TLS memory, but I don\u0027t think we need to ensure that.\n\nI\u0027ll look at adding a log message in `register_soinfo_tls`.",
      "parentUuid": "1875ad30_c5dfcb6c",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b9eca6_a19bc612",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 373,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T22:42:14Z",
      "side": 1,
      "message": "ah, again, i hadn\u0027t really thought about the \"we\u0027re actually in libc for this bit\" side of things. yeah, although i do fear that future rprichard will be scratching his head at weird behavior, maybe it\u0027s not worth the trouble.\n\nif we\u0027re claiming that nothing uses non-0 atm, should we abort()?",
      "parentUuid": "97e6ed87_29a13554",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de08a1b_5d589836",
        "filename": "libc/bionic/bionic_elf_tls.cpp",
        "patchSetId": 8
      },
      "lineNbr": 373,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T23:43:46Z",
      "side": 1,
      "message": "\u003e if we\u0027re claiming that nothing uses non-0 atm, should we abort()?\n\nLLD generally does ensure that (p_vaddr % p_align) is zero, but it\u0027s described as a workaround for broken dynamic loaders:\n\nhttps://github.com/llvm/llvm-project/blob/1918d4bcb21af6a7e4de32073455ac51f2f9673f/lld/ELF/Writer.cpp#L2616-L2634\n\n(FWIW: The freebsd link in the commit message is a patch fixing static TLS layout for FreeBSD x86/x86_64.)\n\nIt would be nice to have a better way to test this, like an LLD flag to disable the workaround, but we also don\u0027t expect ordinary LLD users to request the behavior. LLD happens to generate a non-zero skew amount for greater-than-page alignment, but that\u0027s not really intentional, it seems. My other way of testing non-zero skew is with a C program using elf.h and mmap to modify an ELF file\u0027s PT_TLS segment.",
      "parentUuid": "14b9eca6_a19bc612",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b54334b_c24da9b5",
        "filename": "tests/elftls_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 96,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:13:22Z",
      "side": 1,
      "message": "not needed any more",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6893865d_25988d32",
        "filename": "tests/elftls_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 96,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T23:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b54334b_c24da9b5",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc8ee46_cd913e7f",
        "filename": "tests/elftls_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:13:22Z",
      "side": 1,
      "message": "not needed any more",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e45afa9_ec315ab3",
        "filename": "tests/elftls_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T23:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcc8ee46_cd913e7f",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70eb54e9_29036fd7",
        "filename": "tests/static_tls_layout_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:13:22Z",
      "side": 1,
      "message": "call it _words instead then?",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c4c2076_d6d88d5b",
        "filename": "tests/static_tls_layout_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-20T23:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70eb54e9_29036fd7",
      "revId": "8266416b46d30ef7f5c0459a740d74c02690b4e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}