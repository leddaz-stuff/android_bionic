{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b179e6a8_ba9934bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-24T19:08:40Z",
      "side": 1,
      "message": "is this _only_ for modprobe, or do you have other stuff you need to run? (i suspect that toybox, for example, doesn\u0027t cope with no /proc, so you\u0027d probably end up having to mount /proc anyway if you want to run more stuff.)",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "918c1a59_26a17a61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-24T22:31:28Z",
      "side": 1,
      "message": "toolbox\u0027s modprobe is the only known user and I suppose this is very much unlikely there will be any other.\n\nToybox\u0027s modprobe should work as well, I\u0027ve recently pushed a patch to remove the need for /proc.",
      "parentUuid": "b179e6a8_ba9934bf",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f25f6fe_e7a2bac4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-24T22:40:51Z",
      "side": 1,
      "message": "yeah, but _other_ stuff in toybox (and bionic) relies on /proc. (there\u0027s a lot of stuff that\u0027s implemented via /proc/self/fd, for example.)\n\nmy question is --- \"is toolbox modprobe the only binary you ever need to be able to run before /proc is mounted?\". if so (and you\u0027ve already tested toolbox modprobe and it\u0027s fine with just this), i think this change probably makes sense. if not, i don\u0027t think we should try to go down the route of working around _every_ use of /proc in bionic and/or toybox, and should just make sure you mount /proc nice and early instead...",
      "parentUuid": "918c1a59_26a17a61",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d9b44e_9be77cc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-24T22:51:07Z",
      "side": 1,
      "message": "I don\u0027t think we\u0027ll ever need to run anything else than modprobe so early.\n\nAlso, following a conversation with my colleagues, we decided to not enable the generic function that allows the kernel to run any binary and instead to force it to modprobe only (and also only during the kernel init)\n\nSo no other binary will be able to run before /init.",
      "parentUuid": "1f25f6fe_e7a2bac4",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e783aa2_a06e1bbd",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "type*\n\nshouldn\u0027t this be const?",
      "range": {
        "startLine": 206,
        "startChar": 42,
        "endLine": 206,
        "endChar": 48
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "374fe850_c85ee2ba",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e783aa2_a06e1bbd",
      "range": {
        "startLine": 206,
        "startChar": 42,
        "endLine": 206,
        "endChar": 48
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffede8ae_8d150e77",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "do we still need this if we have your more general workaround?",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de46a128_8bbe1926",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Nope and it actually simplifies everything!",
      "parentUuid": "ffede8ae_8d150e77",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05ca902d_646a089b",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "size_t",
      "range": {
        "startLine": 224,
        "startChar": 4,
        "endLine": 224,
        "endChar": 7
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "798568c4_aa00433c",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05ca902d_646a089b",
      "range": {
        "startLine": 224,
        "startChar": 4,
        "endLine": 224,
        "endChar": 7
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf2af8e_7deef8ec",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "probably clearer the other way round? (especially because /proc/self/exe being accessible is the _expected_ case.)",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38097b17_2eded269",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cf2af8e_7deef8ec",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f219b0f8_955f438c",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 243,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "(if you\u0027re going to fix my ugly orthography, probably better to switch from `\u0027` to `\\\"` than to just delete it :-) )",
      "range": {
        "startLine": 243,
        "startChar": 35,
        "endLine": 243,
        "endChar": 36
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5aef8dce_2852bb3a",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 243,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f219b0f8_955f438c",
      "range": {
        "startLine": 243,
        "startChar": 35,
        "endLine": 243,
        "endChar": 36
      },
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d28a0f8_195b53b1",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-25T00:34:55Z",
      "side": 1,
      "message": "ah, given where result_path_len ends up, probably just have an assignment to `result.path` in both branches? std::string will do the strlen() for you if you just pass a const char* [in the arg_path case], and you can leave this as-is in the readlink() case?",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df1f2497_375e942a",
        "filename": "linker/linker_main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1951687
      },
      "writtenOn": "2023-01-25T10:46:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d28a0f8_195b53b1",
      "revId": "fd33b0c6856866004e5cfc2c8fb3f65bc8fcfe5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}