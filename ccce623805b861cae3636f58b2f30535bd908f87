{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "76bbe21a_24159f0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-21T17:18:58Z",
      "side": 1,
      "message": "Note that I had to bypass repo\u0027s upload verification for this.  It seemed to want to copy the whole .rs file into the NOTICE file.  I assume that\u0027s because the license parsing code doesn\u0027t understand Rust comments (I think the license in our file is already there).  Elliott, what should I do about this?",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03ec89c0_34bb74c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-21T17:32:05Z",
      "side": 1,
      "message": "Looking into this a bit, it seems like generate_notice.py is having the problem I described above.  The issue is that it doesn\u0027t know where the license ends as we use Rust // comments instead of /* */ ones.  We could use the latter, but that is discouraged by Rust style guides (both upstream\u0027s and ours).\n\nElliott, would you prefer we use /* */ comments anyway?  Should we have the Python script recognize //! as an end marker (which denotes a module-level rustdoc comment string, so is a bit of a hack, but might work)?  Or should we add some recognizable string in a comment?",
      "parentUuid": "76bbe21a_24159f0c",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c1529f9_686b2028",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-07-21T23:46:42Z",
      "side": 1,
      "message": "Assuming generate_notice.py is for bionic only, I\u0027d suggest just using /* */, since we\u0027re unlikely to put a bunch of Rust in here, and I\u0027m not even certain it will be this library\u0027s final form.",
      "parentUuid": "03ec89c0_34bb74c7",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c263daa7_129b7050",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-22T19:40:07Z",
      "side": 1,
      "message": "Yup.",
      "parentUuid": "1c1529f9_686b2028",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "277906e7_49de65c0",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-07-21T21:20:30Z",
      "side": 1,
      "message": "can we keep this either in its own directory, or at least in the system_properties/Android.bp?\n\nis there a reason why this isn\u0027t going into rust proper? they already have bindings for bionic in general, right? shouldn\u0027t this just be in there?",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c5cae3_a2e8bf0e",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-21T22:24:24Z",
      "side": 1,
      "message": "Sure, I\u0027ve moved this into rust/Android.bp.\n\nBy Rust proper you mean the upstream libc crate, which contains bindings to libc?  I had assumed that this was Android/bionic-specific and so wouldn\u0027t fit into that crate, which is more targeted at libc.  But I don\u0027t know too much about bionic, so do you think that\u0027s wrong?",
      "parentUuid": "277906e7_49de65c0",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84958c1f_1ea2ccb3",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-07-21T22:49:34Z",
      "side": 1,
      "message": "\u003e By Rust proper you mean the upstream libc crate, which contains bindings to libc? \n\ncorrect.\n\n\u003e I had assumed that this was Android/bionic-specific and so wouldn\u0027t fit into that crate, which is more targeted at libc. \n\nbut it\u0027s not like every libc is the same. i assumed they\u0027d gone the \"ruby route\" of exposing the union of what their supported systems offer (with compile/run-time failures if you use something that isn\u0027t on the system you\u0027re actually building for/running on), rather than the \"java route\" of only exposing the intersection (so you can\u0027t say \"this code only runs on X, so i know i can use X-specific feature Y\"). assuming they were sensible and pragmatic, it seems like the libc crate would be the right place for this?",
      "parentUuid": "23c5cae3_a2e8bf0e",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d0a8e5_af99d36e",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-21T22:51:38Z",
      "side": 1,
      "message": "+Matt, who probably knows the libc crate better than I do.  What do you think?  (For your context, this is currently basically a copy-paste of keystore2\u0027s existing property wrapper that Paul wrote a while ago.)",
      "parentUuid": "84958c1f_1ea2ccb3",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd3def5c_0b5269ac",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-07-21T22:58:01Z",
      "side": 1,
      "message": "(oh, yeah, to be clear: i think this is a less bad home than the current home, so i\u0027ll +2 this anyway, but longer term i think we should try to _not_ have a parallel \"stuff that should be in the libc crate\" crate :-) )",
      "parentUuid": "45d0a8e5_af99d36e",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fabb98a_66f17cda",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-07-21T23:46:42Z",
      "side": 1,
      "message": "We can expose the C functions to the upstream libc crate if it hasn\u0027t already been done - we already have android specific functions like `set_abort_message` exposed there.\n\nThe code in this library would *not* be appropriate for the upstream libc crate.\n\nI\u0027m also not certain this crate should live in the bionic repo (maybe some kind of `librustutils` ?), but I agree that this is a better place for it to live than in keystore.",
      "parentUuid": "bd3def5c_0b5269ac",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2024a63b_ef1f4a41",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-07-22T00:41:22Z",
      "side": 1,
      "message": "\u003e The code in this library would *not* be appropriate for the upstream libc crate.\n\nah, yeah, good point. the libbase API is what we\u0027d have liked to have in libc if it had been possible, but it wasn\u0027t, so it\u0027s not.\n\nthe bindings seem like they should move upstream though.\n\n\u003e I\u0027m also not certain this crate should live in the bionic repo (maybe some kind of `librustutils` ?)\n\nyeah, once you split the bindings out this becomes more like the rust \"libbase\" --- \"stuff that should have been in the standard library [at least from an Android perspective] but isn\u0027t\"[1]. but this is fine for now...",
      "parentUuid": "7fabb98a_66f17cda",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36ad24a7_c7ab083c",
        "filename": "libc/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 2533,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-22T19:40:07Z",
      "side": 1,
      "message": "We\u0027ll discuss in one of our team meetings where to move this, but as agreed we\u0027ll merge it now.",
      "parentUuid": "2024a63b_ef1f4a41",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d4e53d8_14d659ba",
        "filename": "libc/rust/system_properties.rs",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-07-21T21:20:30Z",
      "side": 1,
      "message": "yeah, just use a regular /* */ comment for this. the script\u0027s not clever enough, and we\u0027re not likely to have the time or motivation to enhance it to better support rust bindings.",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8ea6352_03245fff",
        "filename": "libc/rust/system_properties.rs",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-07-21T22:24:24Z",
      "side": 1,
      "message": "Done (note that these two files happened to have slightly different formatting in the first lines of their copyrights, so I had to tweak them to be the same to avoid adding two entries).",
      "parentUuid": "5d4e53d8_14d659ba",
      "revId": "ccce623805b861cae3636f58b2f30535bd908f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}