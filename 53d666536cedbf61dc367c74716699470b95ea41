{
  "comments": [
    {
      "key": {
        "uuid": "99020a8c_4951259c",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2015-10-16T20:42:14Z",
      "side": 1,
      "message": "torne: Can chrome use ANDROID_DLEXT_LOAD_AT_FIXED_ADDRESS instead of this one?",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d98ba26e_f014605a",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-17T23:48:25Z",
      "side": 1,
      "message": "FWIW, this would make ART incompatible with PaX ASLR. What\u0027s the reason for requiring a fixed address? Could it just reserve a bunch of virtual memory and then have a way of query how much was used, so it knows how much is free?",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91146d4_5e0b1169",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T15:31:18Z",
      "side": 1,
      "message": "Could you explain this, please? We already *must* load the oat file at a certain address (that\u0027s randomized at first boot), this only shifts the complete loading to the linker (in case of \"PIC\" code we\u0027re falling back to ART\u0027s loader right now, which has issues, e.g., no native unwind support).",
      "parentUuid": "d98ba26e_f014605a",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9e22645_21fa2e6f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T20:20:13Z",
      "side": 1,
      "message": "AFAICT it must work without that address hint then. The important part seems to be MAP_32BIT on 64-bit.",
      "parentUuid": "f91146d4_5e0b1169",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9c30674_5c80b13a",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T20:21:17Z",
      "side": 1,
      "message": "Is it just a way to leave room for the garbage collected heap to expand in-place without having to relocate everything?",
      "parentUuid": "f9e22645_21fa2e6f",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f3ea1a_84efca6e",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T20:46:23Z",
      "side": 1,
      "message": "I don\u0027t follow your comment.\n\nNo, the hint is required for our PIC mode. In non-PIC, the boot.oat has a non-zero vaddr and that takes care of things. In PIC mode, we want to have both ASLR (so the boot.art is copied and patched into /data) *and* be able to load boot.oat from /system without patching, but it still *must* follow immediately after the art file in memory. So we cannot use a non-zero vaddr (because patching/ASLR of boot.art would invalidate it) and a zero vaddr doesn\u0027t work either (as it allows the linker to load things anywhere).",
      "parentUuid": "f9c30674_5c80b13a",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}