{
  "comments": [
    {
      "key": {
        "uuid": "99020a8c_4951259c",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2015-10-16T20:42:14Z",
      "side": 1,
      "message": "torne: Can chrome use ANDROID_DLEXT_LOAD_AT_FIXED_ADDRESS instead of this one?",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f26ee4_848b7421",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 345,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T23:26:40Z",
      "side": 1,
      "message": "Dimitry, this needs MAP_FIXED when we have the strict_hint, or it will with high probability fail on PaX as mentioned by Daniel.",
      "range": {
        "startLine": 345,
        "startChar": 21,
        "endLine": 345,
        "endChar": 48
      },
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ee3638_1de2f387",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 345,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:30:32Z",
      "side": 1,
      "message": "The problem with MAP_FIXED here is that something else could map the region in the meantime (ART can guarantee that won\u0027t happen but Bionic can\u0027t really do that because it\u0027s just library code).",
      "parentUuid": "b9f26ee4_848b7421",
      "range": {
        "startLine": 345,
        "startChar": 21,
        "endLine": 345,
        "endChar": 48
      },
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9e866f8_546f82e8",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 345,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:31:20Z",
      "side": 1,
      "message": "It\u0027s not the end of the world though as a RANDMMAP exception for stuff like app_process will work fine, but it\u0027s a slight step backwards.",
      "parentUuid": "79ee3638_1de2f387",
      "range": {
        "startLine": 345,
        "startChar": 21,
        "endLine": 345,
        "endChar": 48
      },
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d98ba26e_f014605a",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-17T23:48:25Z",
      "side": 1,
      "message": "FWIW, this would make ART incompatible with PaX ASLR. What\u0027s the reason for requiring a fixed address? Could it just reserve a bunch of virtual memory and then have a way of query how much was used, so it knows how much is free?",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91146d4_5e0b1169",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T15:31:18Z",
      "side": 1,
      "message": "Could you explain this, please? We already *must* load the oat file at a certain address (that\u0027s randomized at first boot), this only shifts the complete loading to the linker (in case of \"PIC\" code we\u0027re falling back to ART\u0027s loader right now, which has issues, e.g., no native unwind support).",
      "parentUuid": "d98ba26e_f014605a",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9e22645_21fa2e6f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T20:20:13Z",
      "side": 1,
      "message": "AFAICT it must work without that address hint then. The important part seems to be MAP_32BIT on 64-bit.",
      "parentUuid": "f91146d4_5e0b1169",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9c30674_5c80b13a",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T20:21:17Z",
      "side": 1,
      "message": "Is it just a way to leave room for the garbage collected heap to expand in-place without having to relocate everything?",
      "parentUuid": "f9e22645_21fa2e6f",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f3ea1a_84efca6e",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T20:46:23Z",
      "side": 1,
      "message": "I don\u0027t follow your comment.\n\nNo, the hint is required for our PIC mode. In non-PIC, the boot.oat has a non-zero vaddr and that takes care of things. In PIC mode, we want to have both ASLR (so the boot.art is copied and patched into /data) *and* be able to load boot.oat from /system without patching, but it still *must* follow immediately after the art file in memory. So we cannot use a non-zero vaddr (because patching/ASLR of boot.art would invalidate it) and a zero vaddr doesn\u0027t work either (as it allows the linker to load things anywhere).",
      "parentUuid": "f9c30674_5c80b13a",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9975aa40_91a07e9b",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T22:46:26Z",
      "side": 1,
      "message": "I\u0027m just wondering about it because it does work fine with my port of PaX in Lollipop (boot.oat ends up after boot.art, but at a location chosen by PaX), and this new method looks like it wouldn\u0027t work anymore. It might already be broken in master though, I don\u0027t know. This is what the address space looks like right now:\n\nhttps://gist.github.com/thestinger/2faf8b849a050fdd1ac5",
      "parentUuid": "99f3ea1a_84efca6e",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b90b4ea8_9f24dec4",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T22:55:19Z",
      "side": 1,
      "message": "I\u0027m curious how you think that the location is chosen by PaX.\n\nART itself randomizes the boot.art address on first boot, when it is either compiled from source or patched from the preopted file in /system. The address in your link is perfectly inside the range (current base address is 0x70000000 for arm32, and we add +-0x1000000).\n\nIn L, and for the art file in general, we don\u0027t use the dynamic loader. We mmap ourself, with MAP_FIXED. If you wanted to change that, you\u0027d have to do relocations at runtime, and we don\u0027t support that (it removes half of the advantage of having a boot image - file-backed mostly clean heap full of preloaded classes).",
      "parentUuid": "9975aa40_91a07e9b",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ee3638_fd3f479f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:01:57Z",
      "side": 1,
      "message": "Ah, I didn\u0027t realize you used MAP_FIXED. I thought it was just passing a hint (without MAP_FIXED) and that this was just a MAP_32BIT address chosen by PaX. As long as it\u0027s still using MAP_FIXED then nothing will break with PaX (it\u0027s far from ideal security-wise though) but passing only a hint will just be ignore, and that seems to be what this Bionic code is doing (since it can\u0027t be sure that other threads aren\u0027t going map stuff, resulting in memory corruption).",
      "parentUuid": "b90b4ea8_9f24dec4",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19c1ba6c_e0935698",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:04:40Z",
      "side": 1,
      "message": "The worst-case scenario is that I\u0027ll need to give a RANDMMAP exception to ART stuff (stronger ASLR isn\u0027t really accomplishing anything for ART at the moment anyway) but I just wanted to make you aware of a use case where the code here might be problematic.",
      "parentUuid": "79ee3638_fd3f479f",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79fd56bf_4e3a42ff",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-19T23:26:40Z",
      "side": 1,
      "message": "The requirement of MAP_FIXED is actually correct, dimitry will have to add that (when I mentioned MAP_FIXED, that is when we use the ART internal loader).\n\nWe\u0027re aware that this isn\u0027t optimal from a *security* perspective, as it\u0027s somewhat of a one-time ASLR (once per install/OTA per device). However, for boot time and memory savings, this is as good as it gets. If you want to read up on what academia thinks we should do, google for Morula.",
      "parentUuid": "19c1ba6c_e0935698",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ee3638_7defb76f",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:30:32Z",
      "side": 1,
      "message": "Well, we already just use exec spawning across the board on CopperheadOS (excluding system_server itself due to breakage without preloading, but it ends up being the only thing sharing ASLR bases and the SSP canary with the Zygote). It could be optimized with a pre-spawning pool but it\u0027s much less necessary with ART than it was with Dalvik. AFAIK the base image issue wasn\u0027t looked at in the Morula paper.",
      "parentUuid": "79fd56bf_4e3a42ff",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59fdf2e7_1fd94756",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 3
      },
      "lineNbr": 351,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-10-19T23:32:29Z",
      "side": 1,
      "message": "(I guess the Morula paper was before ART, too)",
      "parentUuid": "79ee3638_7defb76f",
      "revId": "53d666536cedbf61dc367c74716699470b95ea41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}