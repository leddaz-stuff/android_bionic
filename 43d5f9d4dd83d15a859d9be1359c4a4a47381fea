{
  "comments": [
    {
      "key": {
        "uuid": "3bf0f293_1bfbecd3",
        "filename": "libc/bionic/libc_init_common.cpp",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-01-21T23:48:00Z",
      "side": 1,
      "message": "This is called from __libc_init_globals, which is called from __real_libc_init **before** __libc_init_common. Tagged pointer support in the kernel is initialized with a prctl that is called from __libc_init_common.\n\nAs a result, this must always fail on a new kernel. Also, the tests must fail (because the tests detect kernel support much later and would get the correct result). How did this even pass presubmits? Is the old kernel not that old after all?",
      "revId": "43d5f9d4dd83d15a859d9be1359c4a4a47381fea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "348f3e58_78f3efe1",
        "filename": "libc/bionic/libc_init_common.cpp",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-01-21T23:51:22Z",
      "side": 1,
      "message": "Right, so bionic tests run in presubmit _only_ on crosshatch_hwasan.\nWe kind of shot ourselves in the foot here.",
      "parentUuid": "3bf0f293_1bfbecd3",
      "revId": "43d5f9d4dd83d15a859d9be1359c4a4a47381fea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f95afd4_fb0a64bf",
        "filename": "libc/bionic/libc_init_common.cpp",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-01-22T01:06:46Z",
      "side": 1,
      "message": "Even better, the \"new\" kernel is 4.14+, and crosshatch is on 4.9. We do not plan to backport below 4.14, so crosshatch will never get the \"real\" tagged pointer support.\n\nI think it is fine and we should require the \"real\" tagged pointer support for this feature. Otherwise we end up in a situation where mprotect(malloc()) may or may not work, and get test failures like the one that triggered the revert. That particular test failure can be fixed in ART, of course, but I don\u0027t like to leave this behavior undefined, given that it will be supported in all future devices, both with tagged pointers and with MTE.",
      "parentUuid": "348f3e58_78f3efe1",
      "revId": "43d5f9d4dd83d15a859d9be1359c4a4a47381fea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}