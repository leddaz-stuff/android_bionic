{
  "comments": [
    {
      "key": {
        "uuid": "d06c3e17_2ace0735",
        "filename": "libc/include/string.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-04-18T23:03:39Z",
      "side": 1,
      "message": "unused?",
      "revId": "4ae773633aac9ceba5ec62bb8e1aa22c3c56ebde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f055c239_bd51c767",
        "filename": "libc/include/string.h",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-04-18T23:05:35Z",
      "side": 1,
      "message": "used on line 167 and 175",
      "parentUuid": "d06c3e17_2ace0735",
      "revId": "4ae773633aac9ceba5ec62bb8e1aa22c3c56ebde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06c3e17_0a622b86",
        "filename": "libc/include/string.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-04-19T00:58:22Z",
      "side": 1,
      "message": "After line 155, can you add:\n\n    void* result \u003d __builtin_memchr(s, c, n);\n    if (__builtin_constant_p(result)) {\n        return result;\n    }\n\nIf the results of __builtin_memchr() can be determined at compile time, there\u0027s no need to call __memchr_chk at runtime.",
      "revId": "4ae773633aac9ceba5ec62bb8e1aa22c3c56ebde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06c3e17_ca9953f8",
        "filename": "libc/include/string.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-04-19T01:41:21Z",
      "side": 1,
      "message": "actually, nevermind on this. I don\u0027t think it makes a difference...",
      "parentUuid": "d06c3e17_0a622b86",
      "revId": "4ae773633aac9ceba5ec62bb8e1aa22c3c56ebde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06c3e17_0a94ebba",
        "filename": "libc/include/string.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1069238
      },
      "writtenOn": "2015-04-19T01:45:21Z",
      "side": 1,
      "message": "I don\u0027t think a pointer to a usable object can ever be considered constant due to position independence. It can only happen with NULL or some integer constant encoded as a pointer.\n\nThis experiment seems to confirm it:\n\n#include \u003cstdio.h\u003e\n\nint main(void) {\n  const char buf[10];\n  printf(\"%d\\n\", __builtin_constant_p(buf));\n  return 0;\n}\n\nThe compiler could probably make the assumption for non-PIC code, but it\u0027s not that clever.",
      "parentUuid": "d06c3e17_ca9953f8",
      "revId": "4ae773633aac9ceba5ec62bb8e1aa22c3c56ebde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}