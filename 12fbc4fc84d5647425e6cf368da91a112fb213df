{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e187206_bafb183b",
        "filename": "libc/bionic/atexit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-10-17T01:44:57Z",
      "side": 1,
      "message": "Should this be made inline? Same for below.\n\nOr is clang smart enough to inline it already?",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 40
      },
      "revId": "12fbc4fc84d5647425e6cf368da91a112fb213df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8749e3f_29ade20f",
        "filename": "libc/bionic/atexit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-10-17T01:44:57Z",
      "side": 1,
      "message": "I know this isn\u0027t code you are working on, but I worry this doesn\u0027t handle overflow the best way. It depends on the capacity overflows on multiplication to find and then abort.\n\nI think it would be better to do a __builtin_mul_overflow and since this is only used in one place put it there. Especially, since this could cause an abort, while all of the other failures in expand_capacity result in an error and a log message, but the process doesn\u0027t end. I don\u0027t know which is better though.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 29
      },
      "revId": "12fbc4fc84d5647425e6cf368da91a112fb213df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9151df00_27a76c8c",
        "filename": "libc/bionic/atexit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-10-17T01:44:57Z",
      "side": 1,
      "message": "Is this meant to be bytes or number of entries? It seems like you use it as bytes in this function, but it is called as if it\u0027s the start entry and len is the last entry. Especially, when you pass in capacity_ since that is the total capacity of entries, not bytes.",
      "range": {
        "startLine": 163,
        "startChar": 53,
        "endLine": 163,
        "endChar": 58
      },
      "revId": "12fbc4fc84d5647425e6cf368da91a112fb213df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e188210_f4f4df9c",
        "filename": "libc/bionic/atexit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-10-18T19:27:11Z",
      "side": 1,
      "message": "Actually, I realized that is using the right value, but names of the functions and variables fooled me. I would suggest that start be start_index and len be num_indices. Then rename the round functions to something like round_index_XXX so it\u0027s clear that these are operating on indices and not on byte values.",
      "parentUuid": "9151df00_27a76c8c",
      "range": {
        "startLine": 163,
        "startChar": 53,
        "endLine": 163,
        "endChar": 58
      },
      "revId": "12fbc4fc84d5647425e6cf368da91a112fb213df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}