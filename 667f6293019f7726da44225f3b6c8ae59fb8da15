{
  "comments": [
    {
      "key": {
        "uuid": "1fbfa8df_acdd4def",
        "filename": "libc/bionic/c16rtomb.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "these are called high and low surrogates (see http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf#G2630).",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_df9fff51",
        "filename": "libc/bionic/c16rtomb.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2014-06-03T17:33:47Z",
      "side": 1,
      "message": "Both seem to be correct: http://www.unicode.org/faq/utf_bom.html#utf16-2",
      "parentUuid": "1fbfa8df_acdd4def",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_73ae1c89",
        "filename": "libc/bionic/c16rtomb.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T19:20:22Z",
      "side": 1,
      "message": "icu4c and Java use high and low, though, so we should stick to them. (that\u0027s why i\u0027d never come across leading and trailing before.)",
      "parentUuid": "bf505ca5_df9fff51",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fbfa8df_ac7c2d3e",
        "filename": "libc/bionic/c16rtomb.cpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "type* here and elsewhere.",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df4350e0_466328e6",
        "filename": "libc/bionic/c16rtomb.cpp",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "wouldn\u0027t this be simpler rewritten as\n\n  if (is_low_surrogate(c16)) {\n  } else if (is_high_surrogate(c16)) {\n  } else {\n  }\n\n?",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df4350e0_863ff0d1",
        "filename": "libc/bionic/mbrtoc16.cpp",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "multibyte? do you mean surrogate pairs?",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dffef0bb_730a8241",
        "filename": "libc/bionic/mbrtoc16.cpp",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2014-06-03T17:33:47Z",
      "side": 1,
      "message": "Strictly speaking, surrogate pairs are multibyte characters :) This comment should actually be gone completely though. It\u0027s a left over from when I was just returning 4 (incorrect for finishing incomplete sequences).",
      "parentUuid": "df4350e0_863ff0d1",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfcdbca8_20425f75",
        "filename": "libc/bionic/mbstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "i still don\u0027t understand why these aren\u0027t member functions.",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_dfa4df95",
        "filename": "libc/bionic/mbstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2014-06-03T17:33:47Z",
      "side": 1,
      "message": "That approach would make sense to me. I\u0027ll save it for another patch though.",
      "parentUuid": "bfcdbca8_20425f75",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfcdbca8_00476384",
        "filename": "libc/include/uchar.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "blank line between comment and #ifndef",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df4350e0_8682903e",
        "filename": "libc/private/bionic_mbstate.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "comment saying that these values are specified by POSIX.",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfcdbca8_402d5bc8",
        "filename": "libc/private/bionic_mbstate.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "seems odd to declare mbsinit here.",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_70985295",
        "filename": "libc/private/bionic_mbstate.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2014-06-03T17:33:47Z",
      "side": 1,
      "message": "Whoops. It\u0027s also in wchar.h, but definitely shouldn\u0027t be here.",
      "parentUuid": "bfcdbca8_402d5bc8",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfcdbca8_a6e6884d",
        "filename": "tests/Android.mk",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-06-03T16:58:37Z",
      "side": 1,
      "message": "cferris: don\u0027t we need to use the usual #if !defined(__GLIBC__) to get these tests into CTS? (annoying though that is.)",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_42955659",
        "filename": "tests/Android.mk",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-06-03T19:40:16Z",
      "side": 1,
      "message": "Yes, you need to at least get the test to compile otherwise these tests will not work properly in CTS.\n\nYou might need to use the trick to only include uchar.h if the glibc version is high enough since I don\u0027t think all versions of glibc support it. I think 2.17 is the first to support it but I\u0027m not positive.",
      "parentUuid": "bfcdbca8_a6e6884d",
      "revId": "667f6293019f7726da44225f3b6c8ae59fb8da15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}