{
  "comments": [
    {
      "key": {
        "uuid": "6e4d383c_9e98f4d4",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-17T22:11:14Z",
      "side": 1,
      "message": "are they?",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72c7efa8_5cdf4bfd",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-17T22:13:31Z",
      "side": 1,
      "message": "0b1011\n0b0100\n\n? maybe bitset XOR of each other is better wording?",
      "parentUuid": "6e4d383c_9e98f4d4",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e280514c_8a2de524",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-17T22:20:57Z",
      "side": 1,
      "message": "Ah ok. Maybe 2\u0027s complement is the right term?\n\nI don\u0027t actually remember why this property is so important.\n\nA 1 in the lowest bit could be nice to catch any kind of arithmetic overflows that only touch the LSB.",
      "parentUuid": "72c7efa8_5cdf4bfd",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eb556f7_735c9da4",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-17T22:33:16Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to have a zero lowest bit then? I feel like an overflow that writes the LSB is much more likely to write a \u00271\u0027 than a \u00270\u0027.\n\nAlso if we caught this bug during free() - it would be an invalid free anyway.",
      "parentUuid": "e280514c_8a2de524",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c12f853_d19ec631",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-17T22:50:46Z",
      "side": 1,
      "message": "yeah, I don\u0027t think it matters one way or the other",
      "parentUuid": "3eb556f7_735c9da4",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9f65d7_fbadc817",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-20T16:45:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1c12f853_d19ec631",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "167c31d0_904ae857",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-04-17T22:22:39Z",
      "side": 1,
      "message": "Idea: maybe copy one of the address bits of the pointer into the high bit? This way, pointers *sometimes* get the high bit set and *sometimes* don\u0027t, making it more difficult to depend on one representation or the other. As a pure local ALU operation, this copying should be cheap.",
      "range": {
        "startLine": 50,
        "startChar": 41,
        "endLine": 50,
        "endChar": 45
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e13cfed5_7919ffc1",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-17T22:27:30Z",
      "side": 1,
      "message": "I think this is a reasonable strategy, but I\u0027m worried that having a non-deterministic crash might be more confusing for some developers. I can imagine a scenario where under GDB (i.e. no ASLR) a crash might not repro, but running with ASLR it does 50% of the time...",
      "parentUuid": "167c31d0_904ae857",
      "range": {
        "startLine": 50,
        "startChar": 41,
        "endLine": 50,
        "endChar": 45
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aff800e_d6d446aa",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-17T22:50:46Z",
      "side": 1,
      "message": "We discussed, at some point, the idea of using some kind of quick crc-like function to determine the tag. I think the only arguments against were performance (on malloc stress benchmarks that are sensitive even to a single cycle on the fast path) and determinism.\n\nI kind of like this idea. Consider that otherwise we may end up with code that implicitly depends on the highest bit of address being 1. Such code would only run on Android.\n\nAnother note - with MTE, we still want to set the highest half-byte to a non-zero value.",
      "parentUuid": "e13cfed5_7919ffc1",
      "range": {
        "startLine": 50,
        "startChar": 41,
        "endLine": 50,
        "endChar": 45
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6453191c_eff057f1",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-20T16:45:11Z",
      "side": 1,
      "message": "I think if we want to CRC, we should probably do it in a follow up - but happy to investigate later. Okay with this patchset for now to catch \"negative pointer\" use?",
      "parentUuid": "5aff800e_d6d446aa",
      "range": {
        "startLine": 50,
        "startChar": 41,
        "endLine": 50,
        "endChar": 45
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b064d3ec_2eab57a8",
        "filename": "libc/bionic/malloc_tagged_pointers.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-04-20T20:57:29Z",
      "side": 1,
      "message": "(resolving)",
      "parentUuid": "6453191c_eff057f1",
      "range": {
        "startLine": 50,
        "startChar": 41,
        "endLine": 50,
        "endChar": 45
      },
      "revId": "b125ca48de1f5960c1ef606120d3c5c0869cd075",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}