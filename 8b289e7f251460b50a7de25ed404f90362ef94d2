{
  "comments": [
    {
      "key": {
        "uuid": "84d6ed80_7edb39f9",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:19:22Z",
      "side": 1,
      "message": "\"The name\"? say where that comes from.",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d6ed80_59bf6f97",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T17:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84d6ed80_7edb39f9",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_7f61778e",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:19:22Z",
      "side": 1,
      "message": "USE_LIBRARY_FD, since we already have two fds?",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_1a2de182",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T17:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4a77122_7f61778e",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_9fa8a368",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:19:22Z",
      "side": 1,
      "message": "can we get a version number in here, or a size_t in android_dlopen_ext (like the existing r_debug or dl_iterate_phdr respectively)? i worry about our ability to add stuff after we ship L otherwise.\n\n(obviously that\u0027s fine in a different change.)\n\nor are we confident that everything we\u0027ll ever want to add will be guarded by a new flag?\n\nshould we group the fields and add comments pointing to the flags they correspond to?",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "041cbd1d_19b20feb",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2014-07-02T16:23:31Z",
      "side": 1,
      "message": "My intent was that everything would be guarded by a flag and we would only extend the structure downward. Since 0 is a valid fd, you can\u0027t just use a size and memset() the struct to zero, and I really don\u0027t like the idea that callers would have to initialise every field they know about to a specific \"safe\" value. But, ultimately the API is up to you :)\n\nGrouping the fields and commenting them to indicate which flag(s) use them seems like a good idea though, yes.",
      "parentUuid": "a4a77122_9fa8a368",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_1f3af351",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:27:37Z",
      "side": 1,
      "message": "i\u0027m just trying to think ahead, since we won\u0027t get another chance to fix broken ABI like we did with LP64. since the communication via this struct is in one direction, i can\u0027t think of a case in which having the flags guard the fields won\u0027t be sufficient. i _think_ we\u0027d only need versioning if we were communicating back, but the \u0027const\u0027 ensures we\u0027re not.\n\nif no one can think of a counter-example, i think it\u0027s just paranoia and can be ignored.",
      "parentUuid": "041cbd1d_19b20feb",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_bf911f01",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T16:30:10Z",
      "side": 1,
      "message": "I\u0027m hopping 32 flags is going to be \"enough for everyone\".. I will add version, just in case we ran out of flags :)",
      "parentUuid": "041cbd1d_19b20feb",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_9ff0a347",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:36:43Z",
      "side": 1,
      "message": "or just use uint64_t flags. we\u0027ll have moved on to other things before the other 59 flags get used...\n\nactually, fuck it --- you can use your last flag as ANDROID_DLEXT_USE_FLAGS2 and add a flags2 field anyway.",
      "parentUuid": "a4a77122_bf911f01",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d6ed80_f948e373",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T16:45:01Z",
      "side": 1,
      "message": "good point.",
      "parentUuid": "a4a77122_9ff0a347",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44d07588_c8e26f3e",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2014-07-02T16:47:31Z",
      "side": 1,
      "message": "Yeah, we should probably go with uint64_t flags. If we need more than 64 we can extend it with a flag, but that\u0027s unlikely.",
      "parentUuid": "84d6ed80_f948e373",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64dbb9ad_8c96c7f4",
        "filename": "libc/include/android/dlext.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T17:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44d07588_c8e26f3e",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64dbb9ad_4c216fbd",
        "filename": "linker/linker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:19:22Z",
      "side": 1,
      "message": "we should copy libnativehelper/include/libnativehelper/ScopedFd.h into bionic\u0027s private includes instead.\n\n(in general, when writing something like this, try to make it have the same API as a standard smart pointer.)\n\nan additional question (that applies to the existing one too) is what we want to do with errno if the close fails.",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d6ed80_f96c638b",
        "filename": "linker/linker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T17:23:44Z",
      "side": 1,
      "message": "Done. With errno, we can clear it, but I would rather just leave it alone.",
      "parentUuid": "64dbb9ad_4c216fbd",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a77122_bf1e3ff4",
        "filename": "linker/linker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 773,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-07-02T16:19:22Z",
      "side": 1,
      "message": "should we switch to __PRETTY_FUNCTION__ rather than correct these one by one?",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64dbb9ad_cc4efff4",
        "filename": "linker/linker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 773,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2014-07-02T17:23:44Z",
      "side": 1,
      "message": "logging deserves separate change.. TRACE should also be changed to TRACE_TYPE, to enable filtering in LD_DEBUG...",
      "parentUuid": "a4a77122_bf1e3ff4",
      "revId": "8b289e7f251460b50a7de25ed404f90362ef94d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}