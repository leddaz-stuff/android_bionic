{
  "comments": [
    {
      "key": {
        "uuid": "bb1267d6_32f4167e",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-01T01:48:18Z",
      "side": 1,
      "message": "(btw, after we\u0027d asked \"does anyone use this\", the next day anwarg mentioned that this is sometimes useful.)",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1be45325_b545822a",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-01T02:03:45Z",
      "side": 1,
      "message": "Interesting; looks like we\u0027re stuck without pthread mutexes here then.",
      "parentUuid": "bb1267d6_32f4167e",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bf38fea_d875e1d8",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-01T02:06:23Z",
      "side": 1,
      "message": "i think that\u0027s fine. bionic internal code should probably be using Lock anyway.",
      "parentUuid": "1be45325_b545822a",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbe987fc_baf8d56e",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-01T01:48:18Z",
      "side": 1,
      "message": "why static?",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db0f1bb0_de40251c",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-01T02:03:45Z",
      "side": 1,
      "message": "Stack frame limits for libc prevent a PATH_MAX size char[] from being on the stack and the comment above describes why dynamic allocation isn\u0027t doable.  I can add a line about the stack frame limits if it makes it more clear.",
      "parentUuid": "bbe987fc_baf8d56e",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbe987fc_da2dd985",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-01T02:06:23Z",
      "side": 1,
      "message": "ah, yes, you\u0027d told me that before. yeah, comment that directly here (rather than adding it to the comment block above; folks are more likely to look one line above than 10 ;-) ).",
      "parentUuid": "db0f1bb0_de40251c",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fba69f26_8e76bbba",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-01T22:49:24Z",
      "side": 1,
      "message": "That said, these functions need to be thread safe, so that static wouldn\u0027t work.  Latest patch uses anonymous mappings instead.",
      "parentUuid": "bbe987fc_da2dd985",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb8433f_7381ba68",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2015-12-01T23:23:47Z",
      "side": 1,
      "message": "Instead of using mmap, should we instead use `#pragma GCC diagnostic ignored \"-Wframe-larger-than\u003d\"` for this function?\n\nWas there a particular reason for limiting the amount of stack usage? My first thought was a tiny sigaltstack, but the change that added the warning fixed tmpfile, which isn\u0027t async signal safe.",
      "parentUuid": "fba69f26_8e76bbba",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b17f3fd_1a62fd1a",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-01T23:42:20Z",
      "side": 1,
      "message": "I would agree with that.  The stack size limitation is generic for all of libc from what I understand to ensure that core library calls don\u0027t blow up the stack, but it probably is fair to treat system properties separately than the core functionality.\n\nIf we agree to making this exception then that can definitely clean up some of this ugliness.",
      "parentUuid": "9bb8433f_7381ba68",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b17f3fd_0ef63fbb",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-02T21:56:25Z",
      "side": 1,
      "message": "the main goal with the stack frame limit was to avoid code like localtime requiring two 64KiB buffers on the stack at the same time. this broke everyone who was trying to use small stacks (which they probably shouldn\u0027t have been doing, but 128KiB is definitely unreasonable).\n\naiui though, we chose a limit of 2048 so that code that used PATH_MAX would work. all i see in this function is one 1024-byte char[] and one 4-byte int. why are we hitting the limit here?",
      "parentUuid": "1b17f3fd_1a62fd1a",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb8433f_ca8f0751",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-02T22:20:20Z",
      "side": 1,
      "message": "PATH_MAX is 4096 is not 1024 so that\u0027s why I\u0027m hitting the limit.",
      "parentUuid": "1b17f3fd_0ef63fbb",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1deb19_eaa92fb8",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-12-02T22:27:33Z",
      "side": 1,
      "message": "ah, yes, i think i may have done that on purpose to stop us from accidentally hard-coding filename limits. here it doesn\u0027t matter, since these aren\u0027t general-purpose filenames. so maybe #define PROPERTY_FILENAME_MAX 1024?",
      "parentUuid": "9bb8433f_ca8f0751",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb18759_0bcc71b2",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 17
      },
      "lineNbr": 729,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-12-02T22:48:40Z",
      "side": 1,
      "message": "I had in a previous patch set a hardcoded max size for the context that I would read from property_contexts and therefore limit the maximum filesize, but that was rejected since selinux doesn\u0027t restrict the length of a context.  If we can agree defining a maximum here is acceptable, then I\u0027ll make that change.\n\nIn my opinion, 1024 is plenty reasonable.  \n\nIn theory we could limit the prefix (/dev/__properties__) size and then the total size of the allowable properties, but just having one limit and aborting in init if any property file exceeds it is probably sufficient.",
      "parentUuid": "5b1deb19_eaa92fb8",
      "revId": "4ef3676d72d420b393e358a825c39fc39c42ac24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}