{
  "comments": [
    {
      "key": {
        "uuid": "0f3a11a9_4fbdc4e5",
        "filename": "libc/bionic/lfs64_support.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "\u003cftw.h\u003e",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_62a45221",
        "filename": "libc/bionic/lfs64_support.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f3a11a9_4fbdc4e5",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef1f7d43_044bb6e7",
        "filename": "libc/bionic/lfs64_support.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "type* here and elsewhere.",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9559be_016c6e89",
        "filename": "libc/bionic/lfs64_support.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef1f7d43_044bb6e7",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_8fa08cb5",
        "filename": "libc/include/ftw.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "personally i\u0027d clean up the declarations while i\u0027m here, but that\u0027s optional. especially for a header file where upstream hasn\u0027t changed in over a decade. we\u0027ll never be back here. (unless we go to the next level and actually add _FILE_OFFSET_BITS. given that an LFS64 stdio might not be possible, we should think about whether we\u0027d be happy offering a _FILE_OFFSET_BITS that works for everything except stdio. is that better or worse than offering nothing?)",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9559be_019e2e51",
        "filename": "libc/include/ftw.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T18:06:26Z",
      "side": 1,
      "message": "Just to be sure I got the entire comment:\n\nBy \"clean up\" you mean typedef-ing the arg functions? And then, if we decide to add the _FILE_OFFSET_BITS to adapt(typedef/define) ftw function argument to use stat64?.\n\nHaving a partial support for _FILE_OFFSET_BITS looks less than ideal. I\u0027m not necessary against partial support but just thinking loud: As an user I\u0027m assuming (is it a good assumption?) that most of the time you\u0027ll end up needing smth from stdio and if you hit a wall there you\u0027ll be very frustrated (over and over again)...\n\nAs a related note which might worth an offline discussion: I\u0027m a bit confused about how _FILE_OFFSET_BITS (would) interact with our changes for x64 where most of the functions already operate on a 64bit off_t. Based on my current understanding the flag is used to alter the off_t size to support LFS. If we\u0027re already moving to support LFS by default on x64 does _FILE_OFFSET_BITS become redundant or it\u0027s just future proof to eventually move beyond 32/64 bits off_t.",
      "parentUuid": "0f3a11a9_8fa08cb5",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef1f7d43_07fd7887",
        "filename": "libc/include/ftw.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T18:28:27Z",
      "side": 1,
      "message": "sorry, no, not unless glibc has typedefs. i actually just meant losing the tabs and going with type* spacing. but don\u0027t worry about it. this isn\u0027t one of the header files we\u0027re constantly editing (which is a sign we should reformat) or one of the header files that upstream is constantly editing (which is a sign we should minimize our diffs). it really doesn\u0027t matter.\n\n_FILE_OFFSET_BITS is basically a no-op on LP64; it\u0027s just so you have source compatibility with LP32. you have two choices really: you can write your code with 64 everywhere (so \"struct stat64 sb; fstat64(fd, \u0026 sb);\"...) or you can write your code with no 64s but use _FILE_OFFSET_BITS to flip the switch so the non-64 names (via macro magic) get you the 64 types/symbols.\n\none interesting thing (that sucks for us) is that the BSDs had a 64-bit off_t even on LP32. so the stuff we\u0027re reusing just assumes that off_t and the non-64 functions are all fine. which, as you say, will be true for LP64, but is not true for LP32.\n\ni guess my thinking with this LFS64 work is that there will be a point where people are developing on LP64 by default and LP32 will be the legacy side that doesn\u0027t get the attention, so having _FILE_OFFSET_BITS would -- modulo stdio -- hopefully make things easier to port code developed on LP64 to LP32. i\u0027m not sure how much it really matters in practice, though, because (a) bionic historically hasn\u0027t had many of the LFS64 functions so you\u0027d only be able to run such code \u003e\u003d the next release and (b) we\u0027ve had surprisingly few complaints about our 32-bit off_t so it seems like there aren\u0027t that many people dealing with large files? or if they are they\u0027re just opening, reading, and closing? dunno. but if we don\u0027t implement the LFS64 functions now, i do know that if we ever do need/want to offer this, that\u0027s a whole extra release cycle developers have to wait until they can make use of this stuff.",
      "parentUuid": "cf9559be_019e2e51",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc0199f4_fb138f74",
        "filename": "libc/include/ftw.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "got it. thx!",
      "parentUuid": "ef1f7d43_07fd7887",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef469d41_f3d2df9e",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "this comment should go inside the \"else\".",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9559be_e1b302ce",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef469d41_f3d2df9e",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_2f26b89b",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "you could stat fpath and check that tflag is correct?\n\noh, you have a struct stat already... any time you see void* you\u0027re probably missing a template parameter :-)",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c156131_59de0384",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "I used void* to avoid yet another pair of 32/64 bit functions (before realizing that I could use reinterpret cast) :)\n\ndone.",
      "parentUuid": "0f3a11a9_2f26b89b",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_0f21fc83",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "not really a no-op then...",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc0199f4_3bfa17e2",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f3a11a9_0f21fc83",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_ef34b0c0",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-24T17:18:24Z",
      "side": 1,
      "message": "(i thought there was a named constant for this, but it looks like that\u0027s a GNU extension we don\u0027t have.)",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_e01a16fe",
        "filename": "tests/ftw_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-24T19:00:20Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "0f3a11a9_ef34b0c0",
      "revId": "34730865d13258b4eee7d0246b564e309cdfc370",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}