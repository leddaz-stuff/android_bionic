{
  "comments": [
    {
      "key": {
        "uuid": "9dc95918_f2996e63",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 87,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "Is this transition necessary/useful?\n\nAfaiu, it requires a very specific interleaving: a shutting-down heapprofd hooks instance calling Reset after the bionic side has been re-signalled (and it going through the ephemeral hook stage). In that case, isn\u0027t it better for the ephemeral hook to stay (and the DispatchReset to be a nop), to eventually trigger re-initialization for the new session?\n\n(+- tricky interleavings of \u003e2 heapprofd \"requests\", that I haven\u0027t thought through).",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 37
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deda9e55_1071e963",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 87,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "You are right. Removing this transition.",
      "parentUuid": "9dc95918_f2996e63",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 37
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2180985_54afdc60",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 95,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "Design question: this list of states does a good job of naming the steps of the intialization, but at the same time has redundancies. kInstallingEphemeralHook, kRemovingEphemeralHook, kInstallingHook, kUninstallingHook don\u0027t have to exist as they will never be compared-against (i.e they\u0027re the \"B\" step within A-\u003eB-\u003eC transition in a ModifyGlobals critical section).\n\nWould it be perhaps easier to describe (\u0026 understand) the state machine if only the observable states were included? I think the diagram above is unnecessarily scary as a result of including the transient states. OTOH I can see how the states would be harder to name.",
      "range": {
        "startLine": 95,
        "startChar": 5,
        "endLine": 95,
        "endChar": 25
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07978fea_f8552147",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 95,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "I thought about adding a generic kBusy or something state for the in-between, but thought this was more explicit and easier to read. WDYT?",
      "parentUuid": "c2180985_54afdc60",
      "range": {
        "startLine": 95,
        "startChar": 5,
        "endLine": 95,
        "endChar": 25
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43bcebac_772eea7c",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 97,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "I\u0027d remove these comments, as they\u0027re a very implementation-centric way of describing which states are transient vs not. (I don\u0027t think the reader particularly cares about what gGlobalsMutating is when looking over the states enum.)\n\n(if keeping the comments, I believe kRemovingEphemeralHook also would need it)",
      "range": {
        "startLine": 97,
        "startChar": 30,
        "endLine": 97,
        "endChar": 96
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fa48991_b5d4ca15",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 97,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43bcebac_772eea7c",
      "range": {
        "startLine": 97,
        "startChar": 30,
        "endLine": 97,
        "endChar": 96
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc6559fd_a7484720",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 104,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "nit: already described by the diagram comment",
      "range": {
        "startLine": 103,
        "startChar": 20,
        "endLine": 104,
        "endChar": 74
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4875bec_ece88d40",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 104,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc6559fd_a7484720",
      "range": {
        "startLine": 103,
        "startChar": 20,
        "endLine": 104,
        "endChar": 74
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9be5a4f_5bcb46cb",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 111,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "* comments are the wrong way around\n* the phrasing around \"concurrent calls will fail\" is a bit odd (it\u0027s one-way), while what we\u0027re trying to say that kWithLock serialize, but otherwise all invocations of ModifyGlobals can fail.\n* (for the flag, consider using something like \"test-and-set an atomic flag\" instead of \"flip an atomic variable\")",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 111,
        "endChar": 82
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9b9d40a_832d16d0",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 111,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9be5a4f_5bcb46cb",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 111,
        "endChar": 82
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49d48e86_99708f0c",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 115,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "optional: \"MaybeModifyGlobals\"? Otherwise the callsites look like this always succeeds (as none of them check the return value).",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 18
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d349f44a_109a1fa4",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 115,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49d48e86_99708f0c",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 18
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4277d6e2_46e08884",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 127,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "nit: maybe drop this fragment, since it would be a bit misleading if it was logged from some of the callers (e.g. DispatchReset).",
      "range": {
        "startLine": 127,
        "startChar": 19,
        "endLine": 127,
        "endChar": 41
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9290fc12_90f8a394",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 127,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4277d6e2_46e08884",
      "range": {
        "startLine": 127,
        "startChar": 19,
        "endLine": 127,
        "endChar": 41
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e033db22_787170e4",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 148,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "for my understanding: is the state atomic purely for the two short-circuit loads at the start of the HandleHeapprofdSignal, and DispatchReset? Otherwise, all comparisons/changes are nested within the flag-protected ModifyGlobals regions, right?\n\nWDYT about moving those two short-circuit paths inside ModifyGlobals, and making this a normal static variable? Might end up simplifying some of conditions (that currently use cmpxchg), and might be easier to understand for the reader (fewer atomics around).\n\nOTOH there\u0027s some argument about future changes that might be easier with an atomic state...\n\n(HeapprofdRememberHookConflict would need to be wrapped in a ModifyGlobals, with a comment clarifying that is cannot race due to being called at init)",
      "range": {
        "startLine": 148,
        "startChar": 7,
        "endLine": 148,
        "endChar": 14
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "002decfb_4ce30564",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 148,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "I think it is fundamentally neater not to conflate the state machine with that most modifications happen to use another lock.\n\nFor instance: another possibility to implement this is to exchange the state first, then try ModifyGlobals, if fails swap back to were we were before. That might be neater for locking purposes (less contention), but not for this CL.",
      "parentUuid": "e033db22_787170e4",
      "range": {
        "startLine": 148,
        "startChar": 7,
        "endLine": 148,
        "endChar": 14
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a74fc4f_52a6c843",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 285,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "|expected2| is technically more correct here, right? (shouldn\u0027t matter in practice though)",
      "range": {
        "startLine": 285,
        "startChar": 62,
        "endLine": 285,
        "endChar": 70
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787535c9_5d34e39f",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 285,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a74fc4f_52a6c843",
      "range": {
        "startLine": 285,
        "startChar": 62,
        "endLine": 285,
        "endChar": 70
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b12e4394_6fb22c4e",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 317,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "if keeping gHeapprofdState as atomic (see other comments): consider simplifying to seq_cons here, since it\u0027s the only non-default memory order in this file at this point.",
      "range": {
        "startLine": 317,
        "startChar": 62,
        "endLine": 317,
        "endChar": 82
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14d35c86_b6cfe7f1",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 317,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b12e4394_6fb22c4e",
      "range": {
        "startLine": 317,
        "startChar": 62,
        "endLine": 317,
        "endChar": 82
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f495a4d_30ec82cf",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 398,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "optional: this particular case is not as erroneous as the others if we\u0027re running in a multi-threaded program, I could see a slightly softer wording / WARN level being applicable here instead.",
      "range": {
        "startLine": 396,
        "startChar": 0,
        "endLine": 398,
        "endChar": 20
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2b0a727_ceb66b48",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 398,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f495a4d_30ec82cf",
      "range": {
        "startLine": 396,
        "startChar": 0,
        "endLine": 398,
        "endChar": 20
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f225ef00_62935840",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 404,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-03-08T18:58:27Z",
      "side": 1,
      "message": "nit: there are still some stale references to the old atomic booleans",
      "range": {
        "startLine": 404,
        "startChar": 23,
        "endLine": 404,
        "endChar": 47
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cb3d073_0b45d2c0",
        "filename": "libc/bionic/malloc_heapprofd.cpp",
        "patchSetId": 28
      },
      "lineNbr": 404,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-03-10T11:22:42Z",
      "side": 1,
      "message": "Good catch. I think this was actually wrong the way it was.",
      "parentUuid": "f225ef00_62935840",
      "range": {
        "startLine": 404,
        "startChar": 23,
        "endLine": 404,
        "endChar": 47
      },
      "revId": "99c2bd08c27b9cc5fc9cadd14fc3653953e213f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}