{
  "comments": [
    {
      "key": {
        "uuid": "0f3a11a9_4d523955",
        "filename": "libc/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:18:19Z",
      "side": 1,
      "message": "no, the stdio directory is unsorted cruft, as explained in HACKING.txt. our stuff goes in bionic/. (though not everything in bionic is ours, it\u0027s close.)\n\nalso, our stuff should be C++.",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_8d3c21f9",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:18:19Z",
      "side": 1,
      "message": "no, always #include the file you\u0027re defining stuff from instead.",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_9f029726",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T16:45:35Z",
      "side": 1,
      "message": "Just so I understand, why is it sufficient to delegate to mkstemp ? Does it use O_LARGEFILE by default ? Do we not want to support O_LARGEFILE ? (btw. is this guaranteed to be on a filesystem that supports large files ? Aren\u0027t some of our Sdcard file systems fat32 ?)\n\nPerhaps add a comment here (or somewhere where people will find it) explaining this ?",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_ba73f1ff",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-21T17:07:56Z",
      "side": 1,
      "message": "Yes, delegation will work in this case because our open is actually open64 and it will force O_LARGEFILE by default.\n\nI\u0027m not sure what you mean with \"Do we not want to support O_LARGEFILE?\"\n\nI don\u0027t think this is guaranteed to be on a file system that supports large files. In that case write will fail and I\u0027m not sure we can do anything about it.\n\nNote that although this works is not necessary the cleanest way since internally mkstemp make use of stat and lstat (without 64).",
      "parentUuid": "ef985df7_9f029726",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9559be_1b83fb78",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T17:13:35Z",
      "side": 1,
      "message": "I wanted to know which of the options it was. (is it on by default / is it supported..)\n\nPlease add a comment that we open with O_LARGEFILE by default. It isn\u0027t obvious that freebsd code uses our version open without looking through several header files.",
      "parentUuid": "af64a5c8_ba73f1ff",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_7f230bb9",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-21T17:15:13Z",
      "side": 1,
      "message": "It is by default. I will also add comments to make it clear.",
      "parentUuid": "cf9559be_1b83fb78",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f78b56e_e0820b3e",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:18:19Z",
      "side": 1,
      "message": "note that in the same way we don\u0027t have a non-O_LARGEFILE open, we don\u0027t have a 32-bit struct stat; our [lf]?stat \u003d\u003d [lf]?stat64. that\u0027s why we get away with this kind of thing.\n\ni don\u0027t think it\u0027s worth commenting because it\u0027s (a) so widespread and (b) something you need to check on a case-by-case basis.\n\nwhat might be worth doing is putting all these hacks together in the same lfs64_support.cpp file?\n\n(google3-style 2-space indent for new code.)",
      "parentUuid": "af64a5c8_ba73f1ff",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_1f45a762",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T17:24:18Z",
      "side": 1,
      "message": "I would like to see a single comment somewhere explaining why we get away with this. It\u0027s obvious to maintainers, but IMO still worth mentioning.\n\nThe comment should be a union of what you(calin) said about defaulting to O_LARGEFILE and what enh said about [lf]?state \u003d\u003d .. 64",
      "parentUuid": "2f78b56e_e0820b3e",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_b02cd6ad",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:39:46Z",
      "side": 1,
      "message": "but that\u0027s what i said about it being a case-by-case thing. you need to know whether the stuff you transitively depend on is 64-bit by default or not. and that depends on the implementation not having changed since last time you looked.\n\nin the special case of mkstemp/mkstemp64 i think mkstemp must always be a valid mkstemp64. i don\u0027t think it would be possible to observe any difference. mkstemp must use O_CREAT|O_EXCL, so the file you get must be empty so even if we had a non-O_LARGEFILE open it wouldn\u0027t matter. this special case is safe because it\u0027s just inherently safe. there\u0027s no need for mkstemp64 other than orthogonality of naming.",
      "parentUuid": "ef985df7_1f45a762",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_7df5d3f4",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T18:08:16Z",
      "side": 1,
      "message": "Ok, I still don\u0027t get it - First I thought it was \"widespread\" i.e , the same set of reasons are valid for several functions - and then you\u0027ve told me this needs to be checked through on a case by case basis.\n\nEither way, I still think this requires an explanatory comment as to why it\u0027s safe. If it varies from case to case, then all cases should have their corresponding explanation.\n\nI won\u0027t insist on it because I normally ignore most comments and look at code anyway. (But I still think it is generally useful)\n\nLet\u0027s move on :)",
      "parentUuid": "0f3a11a9_b02cd6ad",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_ffdabb5c",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-21T18:16:31Z",
      "side": 1,
      "message": "I already added a comment. I think it does no harm, and might benefit others who look at the implementation, even if it applies just in this case.",
      "parentUuid": "af64a5c8_7df5d3f4",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_b0fcd657",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T18:22:52Z",
      "side": 1,
      "message": "yeah, i think i confused things by going from the general to the specific. i was trying to be helpful, honest :-)\n\nin general: there are things you never have to worry about, like open versus open64, and the stat family. they\u0027re all clean, all the time.\n\nin general: you need to look at the function you\u0027re calling and work out the transitive closure of everything it calls and decide whether those calls are LFS64-clean. (but, as noted above, you can automatically cross open and the stats off your list.)\n\ni think my aversion to adding a comment here is that it\u0027s exactly the kind of comment that goes stale. it would be making claims about some other part of the system. that\u0027s why i\u0027ve been trying to add tests (like for the rlimit64 stuff, say), because you can\u0027t fool tests. sometimes it\u0027s hard though.\n\n\n\nhere\u0027s where it gets more confusing: i was about to give an example of a very similar function where it might matter (in a world where our open !\u003d open64)... and realized that that function is mkstemp, which returns an int.\n\nthis, in case you\u0027re wondering, is why i said you should never redeclare functions and must always #include the declaring header file :-)\n\n\n\n\nso going back to the tests: you can use fcntl F_GETFL  to check that the fd you get back is an O_LARGEFILE fd, right? i think that\u0027s the right way to give ourselves confidence in our LFS64 stuff.",
      "parentUuid": "af64a5c8_7df5d3f4",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef985df7_1fa927a2",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T18:30:42Z",
      "side": 1,
      "message": "Comments getting stale is a valid concern, and is a bit of a philosphical debate really. (Though it should be obvious I wasn\u0027t suggesting comments as a substitute for real tests.)\n\nI\u0027ll follow the usual conflict resolution procedure for instances where I disagree with enh, which is to follow enh\u0027s advice.",
      "parentUuid": "0f3a11a9_b0fcd657",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f78b56e_53b0fbd7",
        "filename": "libc/stdio/mkstemp64.c",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T18:36:37Z",
      "side": 1,
      "message": "(to be clear, i still think we might want to end up moving the lfs64 stuff together into one file and have an explanation at the top. though that would mean even fewer places where we can use __strong_reference. my feeling is to come back at the end. in cases where there\u0027s a _subtle_ reason why something works, we should comment. and in every case where we can think of a test, we should write one. the fcntl thing hadn\u0027t occurred to me before.)",
      "parentUuid": "ef985df7_1fa927a2",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f5e2dff_a23c9fd1",
        "filename": "tests/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:18:19Z",
      "side": 1,
      "message": "should be in stdlib_test.cpp, which already exists. i think HACKING.txt mentions this?",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_9ad8edc1",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T16:45:35Z",
      "side": 1,
      "message": "move this variable down with the other member variables. Also, it can be const. (as can int fd)",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_6d28d5ab",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:18:19Z",
      "side": 1,
      "message": "this seems odd. a template that defaults to mkstemp would seem slightly less odd, i think.",
      "parentUuid": "af64a5c8_9ad8edc1",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_9a538d5d",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T17:24:18Z",
      "side": 1,
      "message": "TBH. I don\u0027t think there\u0027s a very big difference between these two options. They\u0027re both a bit odd...",
      "parentUuid": "0f3a11a9_6d28d5ab",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_f0365efd",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-02-21T17:39:46Z",
      "side": 1,
      "message": "yeah, but the template seems less unnatural since this is a compile-time rather than run-time choice.\n\nthe other alternative would be to duplicate the code in the tests that specifically test mkstemp/mkstemp64, but that didn\u0027t seem particularly useful. (although you could then test things like \"what happens if there are too few Xs?\" or \"what happens if the path doesn\u0027t exist?\" and so on.)",
      "parentUuid": "af64a5c8_9a538d5d",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_ddfc1fe0",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T18:08:16Z",
      "side": 1,
      "message": "Yeah, that\u0027s a fair point. \n\nThough to be pedantic, templates make it *look* like a compile decision (and that\u0027s still a win). The compiler might or might not optimize the code away depending on the code, unless we implement the specialization ourselves.",
      "parentUuid": "0f3a11a9_f0365efd",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_3d143b5f",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-02-21T18:16:31Z",
      "side": 1,
      "message": "I don\u0027t think it really matters for this (small) case. I agree that it\u0027s a bit odd but it\u0027s an easy way out without duplicating or messing the other tests. \n\nHaving said that, templating sounds nice and it has the mentioned benefits, so I will change:)",
      "parentUuid": "af64a5c8_ddfc1fe0",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_5d11ef6d",
        "filename": "tests/TemporaryFile.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-02-21T18:18:43Z",
      "side": 1,
      "message": "In case I wasn\u0027t clear, I do think that a template matters here for readability :) It makes it much clearer that it\u0027s a compile time decision (as enh pointed out)",
      "parentUuid": "af64a5c8_3d143b5f",
      "revId": "98e4b3f42b3380afa289d20523183e6ba51959fd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}