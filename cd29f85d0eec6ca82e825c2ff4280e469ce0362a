{
  "comments": [
    {
      "key": {
        "uuid": "218e78b3_d1c0941c",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-10-26T20:33:32Z",
      "side": 1,
      "message": "If we are starting a new thread via pthread_create, no need to set it.\nIf we are starting a new thread not via pthread_create, __get_thread() is invalid.\nIf we are starting a new process via clone, we need to set it.",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c918eb_6e3b838f",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-26T22:52:58Z",
      "side": 1,
      "message": "I didn\u0027t see an obvious way (other than modifying all the bionic assembler code) to pass that kind of info down into __start_thread.",
      "parentUuid": "218e78b3_d1c0941c",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_71a50088",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-10-26T20:33:32Z",
      "side": 1,
      "message": "This is not correct, self is the parent thread, I can\u0027t think up a situation that it equals child_tid.\n\nWe don\u0027t have need to create new thread via clone(), and it is almost impossible to do so (as it can\u0027t init tls for the new thread). So only consider init tid for new process here.\nHow about code like below:\n\nbool create_new_process \u003d !(flags \u0026 CLONE_THREAD);\nif (create_new_process) {\n  parent_pid \u003d self-\u003einvalidate_cached_pid();\n  parent_tid \u003d self-\u003etid;\n  self-\u003etid \u003d 0;\n}\n...\nclone() system calls\n...\n\n// we don\u0027t handle the situation using clone() to create new threads because the tls array can\u0027t be initialized properly.\n\nif (create_new_process) {\n  if (clone_result \u003d\u003d 0) {\n    // this is the child process.\n    pid_t tid \u003d syscall(__NR_gettid);\n    __get_thread()-\u003etid \u003d tid;\n    self-\u003eset_cached_pid(tid);\n\n  } else if (clone_result \u003e 0) {\n    // this is the parent process.\n    self-\u003etid \u003d parent_tid;\n    self-\u003eset_cached_pid(parent_pid);\n  }\n}\n\nand in __start_thread(), we can check if __get_thread()-\u003etid \u003d\u003d 0 before make syscall(gettid).",
      "range": {
        "startLine": 91,
        "startChar": 20,
        "endLine": 91,
        "endChar": 24
      },
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c918eb_8ef7df6f",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-26T22:52:58Z",
      "side": 1,
      "message": "\u003e This is not correct, self is the parent thread, I can\u0027t think up a situation that it equals child_tid.\n\nAfter forking a new process, shouldn\u0027t self should still work for the current thread in the child? The two values will be unequal if you do a direct clone without padding in child_tid.\n\n \u003e We don\u0027t have need to create new thread via clone(), and it is almost impossible to do so (as it can\u0027t init tls for the new thread). So only consider init tid for new process here.\n \u003e How about code like below:\n \u003e \n \u003e bool create_new_process \u003d !(flags \u0026 CLONE_THREAD);\n \u003e if (create_new_process) {\n \u003e   parent_pid \u003d self-\u003einvalidate_cached_pid();\n \u003e   parent_tid \u003d self-\u003etid;\n \u003e   self-\u003etid \u003d 0;\n \u003e }\n \u003e ...\n \u003e clone() system calls\n \u003e ...\n \u003e \n \u003e // we don\u0027t handle the situation using clone() to create new threads because the tls array can\u0027t be initialized properly.\n \u003e \n \u003e if (create_new_process) {\n \u003e   if (clone_result \u003d\u003d 0) {\n \u003e     // this is the child process.\n \u003e     pid_t tid \u003d syscall(__NR_gettid);\n \u003e     __get_thread()-\u003etid \u003d tid;\n \u003e     self-\u003eset_cached_pid(tid);\n \u003e \n \u003e   } else if (clone_result \u003e 0) {\n \u003e     // this is the parent process.\n \u003e     self-\u003etid \u003d parent_tid;\n \u003e     self-\u003eset_cached_pid(parent_pid);\n \u003e   }\n \u003e }\n \u003e \n \u003e and in __start_thread(), we can check if __get_thread()-\u003etid \u003d\u003d 0 before make syscall(gettid).\n\nI tried this and got hangs in the pthread tests, which I think are related to using CLONE_CHILD_CLEARTID futex. I think there is also an issue with doing this in the sched.clone test (see below comment).",
      "parentUuid": "218e78b3_71a50088",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_83fec243",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-10-26T18:12:06Z",
      "side": 1,
      "message": "should `fn \u003d\u003d nullptr` be the guard then? it\u0027s not obvious to me that these two are equivalent.",
      "range": {
        "startLine": 92,
        "startChar": 7,
        "endLine": 92,
        "endChar": 39
      },
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_63c456f9",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-10-26T18:17:55Z",
      "side": 1,
      "message": "Should we just use CLONE_CHILD_SETTID pointing to self-\u003etid always, and copy it into the user\u0027s pointer if they passed the flag themselves? This saves us a syscall in this case.",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_638b76a9",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-10-26T18:23:58Z",
      "side": 1,
      "message": "i don\u0027t think you want to write your child\u0027s tid into your own tid field :-)",
      "parentUuid": "218e78b3_63c456f9",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_e65f94f8",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-10-26T19:45:46Z",
      "side": 1,
      "message": "CLONE_CHILD_SETTID claims to set the tid in only the child\u0027s memory (although, if they pass CLONE_VM, the child and parent have the same address space. I\u0027m not sure we can even sensibly handle CLONE_VM if it\u0027s not coming from our pthread functions.)\n\nMaybe we should have a pthread_create_np with custom clone flags for people who really need to mess with this stuff? It would have been useful for the debuggerd patchset I\u0027m working on now.",
      "parentUuid": "218e78b3_638b76a9",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_3107f880",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-10-26T20:33:32Z",
      "side": 1,
      "message": "currently there is no need to for using clone() to create new thread directly.",
      "parentUuid": "218e78b3_e65f94f8",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_91c1acea",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-10-26T20:50:03Z",
      "side": 1,
      "message": "I used it to be able to free up file descriptors in a signal handler without closing any actual file descriptors: https://android.googlesource.com/platform/system/core/+/master/debuggerd/client/debuggerd_client.cpp#262\n\nI think it solves the use case that prompted this, so there are at least two potential users.",
      "parentUuid": "218e78b3_3107f880",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_31b7f826",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-10-26T21:31:54Z",
      "side": 1,
      "message": "I see. For debuggerd_client, maybe we can add a new field in pthread_attr_t, to pass in the clone_flag. So it no longer needs to use clone() to create new threads.",
      "parentUuid": "218e78b3_91c1acea",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c918eb_ce00b7b2",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-26T22:52:58Z",
      "side": 1,
      "message": "I looked into using CLONE_CHILD_SETTID but it drew out another problem: the sched.clone test uses clone(..., CLONE_VM ...) and that makes writing the cached value in clone() trickier.",
      "parentUuid": "218e78b3_31b7f826",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_c3f7ea6e",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-10-26T18:12:06Z",
      "side": 1,
      "message": "maybe add a comment here, or add `fn !\u003d nullptr \u0026\u0026` --- something to make it a bit clearer why it\u0027s not always valid to reset. (i think you\u0027re right, but i had to think for a while to work out what\u0027s going on here.)",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c918eb_6b8d354b",
        "filename": "libc/bionic/clone.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-26T22:52:58Z",
      "side": 1,
      "message": "I think the existing comment covers this pretty well (\"We\u0027re in the parent...\"). The value of fn doesn\u0027t influence things here because of the fixup work done in fork() and pthread_create(). If those functions didn\u0027t set_cached_pid() themselves, then not having this condition would result in the wrong value of getpid() being set in the child.",
      "parentUuid": "218e78b3_c3f7ea6e",
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_66e9c4cb",
        "filename": "tests/unistd_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 579,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-10-26T20:33:32Z",
      "side": 1,
      "message": "this is not used in GetTidCachingPthreadStartRoutine, why pass it?",
      "range": {
        "startLine": 579,
        "startChar": 75,
        "endLine": 579,
        "endChar": 85
      },
      "revId": "cd29f85d0eec6ca82e825c2ff4280e469ce0362a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}