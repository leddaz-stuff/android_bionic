{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44cd97a4_404b8fb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-12T22:56:30Z",
      "side": 1,
      "message": "thanks for the quick review!",
      "revId": "0e8c182da967f136ef1233414d2970861d801987",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb816f2f_db8f92ec",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2023-12-13T18:06:43Z",
      "side": 1,
      "message": "We\u0027d better use an atomic static variable in multi-thread environment.\nWe can use atomic_init like below:\n\n  static atomic_int lock_op \u003d 0;\n  int op \u003d atomic_load_explicit(\u0026lock_op, memory_order_relaxed);\n  if (op \u003d\u003d 0) {\n    uint32_t tmp \u003d 0;\n    if (__futex(\u0026tmp, FUTEX_LOCK_PI2, 0, nullptr, 0) \u003d\u003d 0) {\n      __futex(\u0026tmp, FUTEX_UNLOCK_PI, 0, nullptr, 0);\n      op \u003d FUTEX_LOCK_PI2;\n    } else {\n      op \u003d FUTEX_LOCK_PI;\n    }\n    atomic_store_explicit(\u0026lock_op, op, memory_order_relaxed);\n  }\n  \nOr we can use pthread_once() to initialize a static global variable supports_PI2.",
      "range": {
        "startLine": 90,
        "startChar": 15,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "0e8c182da967f136ef1233414d2970861d801987",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb59da8e_e958739c",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2023-12-13T20:14:52Z",
      "side": 1,
      "message": "On further inspection, you are absolutely right!\n\nThe atomic static variable is faster after the initialization, as it only requires a ARM ldr to read.  The downside for the atomic static variable is that the initialization may occur multiple times.\n\nThe C++ Meyer\u0027s singleton guarantees only one initialization but may block. After initialization, the clang implementation requires 2 ARM ldar instructions (which impose a memory barrier) rather than a single ldr, so it is slower. It is **particularly bad** to use here because the clang implementation of the singleton eventually recurses into the pthread library anyhow, see implementation of clang cxa_guard_acquire (!)\n\nhttps://cs.android.com/android-llvm/toolchain/llvm-project/+/master:libcxxabi/src/cxa_guard.cpp;drc\u003d57b08b0944046a6a57ee9b7b479181f548a5b9b4;l\u003d173\n\nThe pthread_once() would be recursively calling into the bionic library as well :-).\n\nSee the disassembled code here for the atomic approach and the C++ Meyer\u0027s approach:\nhttps://www.godbolt.org/z/9xrc3a1rx",
      "parentUuid": "eb816f2f_db8f92ec",
      "range": {
        "startLine": 90,
        "startChar": 15,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "0e8c182da967f136ef1233414d2970861d801987",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de47ff1b_d4a42fa1",
        "filename": "libc/bionic/bionic_futex.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2023-12-13T23:07:30Z",
      "side": 1,
      "message": "Thanks for the change and detailed analysis! Note that \u003catomic\u003e isn\u0027t supported here. So atomic_int comes from \u003cbits/stdatomic.h\u003e, as in https://cs.android.com/android/platform/superproject/+/master:bionic/libc/include/stdatomic.h;l\u003d131. So we have to use atomic_load/store instead of assignment operator.\nBy default, atomic operations use memory_order_seq_cst barrier. But since there is no data to sync here, I feel using memory_order_relaxed is enough.",
      "parentUuid": "bb59da8e_e958739c",
      "range": {
        "startLine": 90,
        "startChar": 15,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "0e8c182da967f136ef1233414d2970861d801987",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}