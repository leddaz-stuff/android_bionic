{
  "comments": [
    {
      "key": {
        "uuid": "7689e6a7_bf767771",
        "filename": "libc/bionic/pthread_barrier.cpp",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-11-10T02:11:51Z",
      "side": 1,
      "message": "This can\u0027t work.  Once we\u0027re past this statement, destroy sees this thread as done.  But we\u0027re still touching the barrier.",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 103
      },
      "revId": "6554f882b4ab53db58b4ee0a46f5ce0ae8245975",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96d1fa8e_7ceb41ce",
        "filename": "libc/bionic/pthread_barrier.cpp",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-11-10T22:09:23Z",
      "side": 1,
      "message": "If barrier is destroyed and the memory is no longer accessible after this line. __futex_wake_ex(\u0026barrier-\u003ethread_counter_can_enter) returns EFAULT. If the same address is used for futex_wait in other places, it doesn\u0027t matter because we always check conditions besides futex_wait() to avoid spurious wakeups.",
      "parentUuid": "7689e6a7_bf767771",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 103
      },
      "revId": "6554f882b4ab53db58b4ee0a46f5ce0ae8245975",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}