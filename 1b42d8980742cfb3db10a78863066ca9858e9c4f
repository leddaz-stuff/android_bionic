{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d96754e8_d18678ae",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T06:17:50Z",
      "side": 1,
      "message": "Previously, this code used the global _nres defined here:\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_state.c;l\u003d139?q\u003d_nres\n\nNow instead it uses the thread-local res_state. This subtly changes the semantics for callers which set the RES_USE_DNSSEC or RES_RECURSE options and then call res_mkquery(), expecting a query with the AD or RD bit set:\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_mkquery.c;l\u003d148\n\nSo I think it would be safer to follow this course:\n\n1. Leave res_mkquery() in its current state of misery\n2. Add a prototype for res_nmkquery() in resolv_private.h\n3. Change resNetworkQuery() to call res_nmkquery() with a freshly initialized res_state (not even the thread-local one).",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e437f315_7e5eb926",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2020-12-23T06:38:04Z",
      "side": 1,
      "message": "RES_RECURSE is part of RES_DEFAULT, hence if the res_state is initialized, should be fine.\nAlso RES_{USE_DNSSEC,RECURSE} are defined in resolv_private.h which hasn\u0027t been exported, so the only way to set options to res_state might be \"res_setoptions\".\nHowever, res_setoptions doesn\u0027t provide any way to set them.\n\nDo we really need to take care about these options?",
      "parentUuid": "d96754e8_d18678ae",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd7f8f2_149ab322",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T08:21:41Z",
      "side": 1,
      "message": "Client code can simply re-declare the symbol and use it:\n\n  extern res_state _res;\n  _res-\u003eoptions |\u003d RES_XXX;\n\n\n\u003e Do we really need to take care about these options?\nOnly if some app or library used by an app is using them. But we have no good way to know.\n\nA couple of years ago, I discovered that some printer drivers for Android include a full copy of cups, an ancient IPP implementation. When built for Android, it uses all sorts of legacy BSD APIs.\n\nThis time we might get lucky and nothing will break, but why risk it when we have the safer option of calling res_nmkquery()?",
      "parentUuid": "e437f315_7e5eb926",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd45111_e6316e08",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T08:24:23Z",
      "side": 1,
      "message": "Ah, the _nres symbol is actually hidden:\n\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_state.c;l\u003d138?q\u003d%5Cb%20_nres\n\nSo, yes, nobody can change it from outside. But still, I would prefer the cleaner and safer solution of calling res_nmkquery() direclty.\n\nOr at least fix all the legacy functions to use the thread-local state.",
      "parentUuid": "cbd7f8f2_149ab322",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93436e8c_dfaf6b8f",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T12:12:53Z",
      "side": 1,
      "message": "After giving this some more thought:\n\nUsing res_nmkquery() form outside bionic would require exposing struct res_state in the public resolv.h. While this is what other libc implementations are doing, it\u0027s a gross API and we don\u0027t want to give any incentives for new code to depend on it.\n\nSo the current approach seems to be the least between two evils: it drifts further away from the semantics of other libcs, but it does so on a legacy API that\u0027s barely used, and can\u0027t possibly be used on Android in conjunction with custom options.",
      "parentUuid": "5bd45111_e6316e08",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f5239a_cf39e783",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2021-03-22T15:31:54Z",
      "side": 1,
      "message": "Right, given that we don\u0027t want to expose the strcut just for fixing this problem, directly fixing res_mkquery might be an option.\n\nOr adding mutex to prevent NE might be another.",
      "parentUuid": "93436e8c_dfaf6b8f",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47515c4c_6bbd2e90",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T06:17:50Z",
      "side": 1,
      "message": "If we decide that switching res_mkquery() to the thread-local state is safe, then we should also update the other calls for consistency.\n\nThese non-thread safe functions are considered legacy by other OSes, but since Bionic didn\u0027t even have a prototype res_nmkquery(), code compiled for Android is likely to be still using them.",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0273c7d7_9d330c92",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2021-03-22T15:31:54Z",
      "side": 1,
      "message": "I think it might be better to only take the minimum step to fix this problem.\nAlso if we change others, then one of the current exposed method(res_init) will be meaningless.",
      "parentUuid": "47515c4c_6bbd2e90",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34945bbd_a76fc74d",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-25T21:22:01Z",
      "side": 1,
      "message": "okay, so it looks like there are three suggestions:\n\n#1 - make this function/these functions use the thread-local state instead.\n\nwe certainly have precedent for changing functions that are not thread-safe on other systems to being thread-safe on bionic...\n\n...but that\u0027s usually when it:\n1. makes ignorant call sites less likely to have problems\n2. and isn\u0027t likely to affect other call sites at all.\n\nhere i was struggling to understand, so i actually went and tried the \"let\u0027s just make all these thread local\" (because, yes, like someone said --- it\u0027s pretty weird to just change one of these functions). but that convinced me that i wasn\u0027t convinced about this. i may just not know enough about these APIs, but i couldn\u0027t convince myself that we\u0027d be meeting condition 2 above. if i\u0027m a caller that calls these from multiple threads (but with my own lock), it seems like us switching these to use thread-local state would break that caller?\n\n#2 - expose res_nmkquery()\n\ni\u0027m conflicted on this one. it does make sense, but oh my, what an awful struct. and on the assumption you\u0027re talking about S, we\u0027re really late in the release to be doing something like that.\n\n#3 - add missing locking\n\nthis one seems like the safest?\n\ni\u0027ve struggled to really understand res_init() and _res.\n\ni\u0027m assuming\n```\n        if ((statp-\u003eoptions \u0026 RES_INIT) !\u003d 0U)\n                res_ndestroy(statp);\n```\nis really meant for non-globals, so you can \"reset\" a res_state? so maybe the res_need_init() cruft should actually have been a pthread_once() for _res? is that the best way to add the missing locking?",
      "parentUuid": "0273c7d7_9d330c92",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08f44a4d_5acbe1e1",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2021-03-30T17:35:12Z",
      "side": 1,
      "message": "|#1 - make this function/these functions use the thread-local state instead.\nRight, it seems to me that if we only changed res_mkquery, it would meet the condition you listed.\nBut if we changed all res_* APIs, then not the cases.\n\n|#2 - expose res_nmkquery()\nHmm, also we probably don\u0027t want to support the struct forever. 😎\n\n|#3 - add missing locking\nYeah, in order to avoid doing the weird thing (which is only changing res_mkquery()), this seems the only feasible and the safest way.\nSo let\u0027s move towards this option.\nAs for the lock, I think you are probably right. Given that we should protect the _nres, res_need_init() might be a good place to add the missing lock.\nLet me investigate it more before updating the CL.",
      "parentUuid": "34945bbd_a76fc74d",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13d45725_9f089199",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-30T17:45:46Z",
      "side": 1,
      "message": "either pthread_once_t or the usual C++\n```\nT* GetT() {\n  static T t \u003d InitT();\n  return \u0026t;\n}\n```\nthread-safe initialization idiom seems like a good way to remove the res_need_init() cruft entirely, and fix the bug at the same time. (by s/\u0026_nres/GetStaticResState()/g or whatever, and just deleting the res_need_init()/res_init() cruft.)\n\nah, but res_init() is public, and actually does reset the state. does that matter though? do any of these calls *mutate* `_nres`? it\u0027s not obvious to me that they do, so i don\u0027t think a caller should be able to tell if we made res_init() a no-op?",
      "parentUuid": "08f44a4d_5acbe1e1",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89094d43_a8c0ba2f",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2021-04-06T18:07:38Z",
      "side": 1,
      "message": "I guess we can\u0027t rely on the C++11 characteristic as here is the pure C code.\nSo probably pthread_* is the only way we can do.",
      "parentUuid": "13d45725_9f089199",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}