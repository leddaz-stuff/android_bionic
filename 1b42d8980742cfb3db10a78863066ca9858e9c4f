{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d96754e8_d18678ae",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T06:17:50Z",
      "side": 1,
      "message": "Previously, this code used the global _nres defined here:\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_state.c;l\u003d139?q\u003d_nres\n\nNow instead it uses the thread-local res_state. This subtly changes the semantics for callers which set the RES_USE_DNSSEC or RES_RECURSE options and then call res_mkquery(), expecting a query with the AD or RD bit set:\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_mkquery.c;l\u003d148\n\nSo I think it would be safer to follow this course:\n\n1. Leave res_mkquery() in its current state of misery\n2. Add a prototype for res_nmkquery() in resolv_private.h\n3. Change resNetworkQuery() to call res_nmkquery() with a freshly initialized res_state (not even the thread-local one).",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e437f315_7e5eb926",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1337176
      },
      "writtenOn": "2020-12-23T06:38:04Z",
      "side": 1,
      "message": "RES_RECURSE is part of RES_DEFAULT, hence if the res_state is initialized, should be fine.\nAlso RES_{USE_DNSSEC,RECURSE} are defined in resolv_private.h which hasn\u0027t been exported, so the only way to set options to res_state might be \"res_setoptions\".\nHowever, res_setoptions doesn\u0027t provide any way to set them.\n\nDo we really need to take care about these options?",
      "parentUuid": "d96754e8_d18678ae",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd7f8f2_149ab322",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T08:21:41Z",
      "side": 1,
      "message": "Client code can simply re-declare the symbol and use it:\n\n  extern res_state _res;\n  _res-\u003eoptions |\u003d RES_XXX;\n\n\n\u003e Do we really need to take care about these options?\nOnly if some app or library used by an app is using them. But we have no good way to know.\n\nA couple of years ago, I discovered that some printer drivers for Android include a full copy of cups, an ancient IPP implementation. When built for Android, it uses all sorts of legacy BSD APIs.\n\nThis time we might get lucky and nothing will break, but why risk it when we have the safer option of calling res_nmkquery()?",
      "parentUuid": "e437f315_7e5eb926",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd45111_e6316e08",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T08:24:23Z",
      "side": 1,
      "message": "Ah, the _nres symbol is actually hidden:\n\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/dns/resolv/res_state.c;l\u003d138?q\u003d%5Cb%20_nres\n\nSo, yes, nobody can change it from outside. But still, I would prefer the cleaner and safer solution of calling res_nmkquery() direclty.\n\nOr at least fix all the legacy functions to use the thread-local state.",
      "parentUuid": "cbd7f8f2_149ab322",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93436e8c_dfaf6b8f",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T12:12:53Z",
      "side": 1,
      "message": "After giving this some more thought:\n\nUsing res_nmkquery() form outside bionic would require exposing struct res_state in the public resolv.h. While this is what other libc implementations are doing, it\u0027s a gross API and we don\u0027t want to give any incentives for new code to depend on it.\n\nSo the current approach seems to be the least between two evils: it drifts further away from the semantics of other libcs, but it does so on a legacy API that\u0027s barely used, and can\u0027t possibly be used on Android in conjunction with custom options.",
      "parentUuid": "5bd45111_e6316e08",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47515c4c_6bbd2e90",
        "filename": "libc/dns/resolv/res_data.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2020-12-23T06:17:50Z",
      "side": 1,
      "message": "If we decide that switching res_mkquery() to the thread-local state is safe, then we should also update the other calls for consistency.\n\nThese non-thread safe functions are considered legacy by other OSes, but since Bionic didn\u0027t even have a prototype res_nmkquery(), code compiled for Android is likely to be still using them.",
      "revId": "1b42d8980742cfb3db10a78863066ca9858e9c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}