{
  "comments": [
    {
      "key": {
        "uuid": "ae5bf53d_d0988d66",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-25T00:31:45Z",
      "side": 1,
      "message": "google3 style.",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e4d7d85_5f1a7303",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2015-09-25T00:55:10Z",
      "side": 1,
      "message": "Collateral damage of s/struct/class",
      "range": {
        "startLine": 39,
        "startChar": 42,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e5fa128_048dcab8",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-25T00:31:45Z",
      "side": 1,
      "message": "i think you should probably start with the callers. that will help convince the reader (and you) that this is a good API.",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee86cdd4_95e314c3",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-25T00:31:45Z",
      "side": 1,
      "message": "how much of this functionality do we actually need? do we believe we\u0027ll want enough of the rest in future to motivate this?",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e4c398b_7edd31d2",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2015-09-25T00:55:10Z",
      "side": 1,
      "message": "I was aiming to provide most of the std::vector API so that it\u0027s a more or less drop-in replacement, except for the \"you can\u0027t modify it without doing special stuff\" part. I think probably all of these (except maybe max_size?) are commonly used with std::vector, so it makes sense to implement them (they\u0027re mostly trivial, anyway).",
      "parentUuid": "ee86cdd4_95e314c3",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce582944_62091af7",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-25T03:09:02Z",
      "side": 1,
      "message": "we don\u0027t have any code using std::vector, so there\u0027s no dropping in going to happen :-)\n\nand this isn\u0027t a type that\u0027s going to be generally useful --- or if you think it is, you need to explain that because other applications are not obvious.\n\nwhat do the callers actually need, and what will they look like when rewritten?",
      "parentUuid": "4e4c398b_7edd31d2",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e470569_efa28c12",
        "filename": "libc/private/WPVector.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2015-09-25T04:14:08Z",
      "side": 1,
      "message": "Right, I meant that I chose the vector API because it should be fairly familiar to anyone using it.\n\nIt seemed to me that there would be multiple places that would want something like this, but the only ones I can think of are the atexit/atfork handlers, and ART\u0027s sigchain function pointer array.\n\nAlternatively, we could have something like a smart pointer that returns a const T\u0026 when dereferenced, and a similar mutate() method that returns another type that mprotects appropriately when constructed and destructed and allows modification. If we can put a cap on the number of atfork handlers, etc. to 512, this might be better.",
      "parentUuid": "ce582944_62091af7",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e4c398b_1e0bdd2f",
        "filename": "tests/wpvector_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-25T00:31:45Z",
      "side": 1,
      "message": "yeah, yet another reason to just inline the builtins.",
      "revId": "d2f8edf0cdff9177429dcc61cc80fd0620f15448",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}