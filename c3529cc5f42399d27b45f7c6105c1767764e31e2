{
  "comments": [
    {
      "key": {
        "uuid": "3f3f40e7_7c578773",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-10-15T16:52:41Z",
      "side": 1,
      "message": "oh, wow, i remember that bug --- that\u0027s _really_ old!",
      "range": {
        "startLine": 20,
        "startChar": 3,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "c3529cc5f42399d27b45f7c6105c1767764e31e2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "848fa26b_b82f2649",
        "filename": "linker/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-10-15T03:29:48Z",
      "side": 1,
      "message": "I think we could leave this out, because linking with libunwind_llvm above should override the libgcc unwinder, and libunwind_llvm doesn\u0027t use a weak reference to the dl_unwind_find_exidx symbol.\n\nOTOH, even when we link with libunwind_llvm.a, we\u0027re *also* linking with libgcc.a, so using whole_static_libs here provides a simpler guarantee that the __gnu_Unwind_Find_exidx symbol won\u0027t appear in the linker\u0027s .dynsym table and its dynamic relocation tables.",
      "revId": "c3529cc5f42399d27b45f7c6105c1767764e31e2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19e3080c_b7650514",
        "filename": "linker/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-10-15T16:52:41Z",
      "side": 1,
      "message": "(make this a code comment? [because it sounds like in however many years when libgcc is gone, we might want to remove this?])",
      "parentUuid": "848fa26b_b82f2649",
      "revId": "c3529cc5f42399d27b45f7c6105c1767764e31e2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a74558f_8bc2e2db",
        "filename": "linker/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-10-16T00:57:52Z",
      "side": 1,
      "message": "I\u0027ll see if I can improve the comment.\n\nIt\u0027d be nice if I could add a Bionic linker test verifying that the linker binaries only have relative relocations. dlfcn_test.cpp uses LLVM to inspect binary files, but IIRC, it\u0027s using the obsolete platform/external/llvm (so it can\u0027t read Android packed relocations). Upstream LLVM has llvm::object::ELFFile::android_relas (in include/llvm/Object/ELF.h). Bionic doesn\u0027t use packed/relr relocs now, but maybe it would someday.",
      "parentUuid": "19e3080c_b7650514",
      "revId": "c3529cc5f42399d27b45f7c6105c1767764e31e2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}