{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "307254db_73938648",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "Where specifically?",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab452116_26a2b72f",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T22:57:28Z",
      "side": 1,
      "message": "(\"not a regression\", but this header should probably link to the proto schema and the java api for getting tombstones. we don\u0027t have a good single place to point to for \"how the pieces fit together\".)",
      "parentUuid": "307254db_73938648",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8d0a93a_5105558e",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:14:53Z",
      "side": 1,
      "message": "At least the text tombstone result was in the description for ACrashDetail_register, but I with the name back and forth something was bound to be lost.. I added it back",
      "parentUuid": "ab452116_26a2b72f",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7becb039_43ef23f3",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:48:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8d0a93a_5105558e",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aaefa62_75bbe2c6",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 58,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T21:10:31Z",
      "side": 1,
      "message": "(you need to update all these names in the docs)",
      "range": {
        "startLine": 58,
        "startChar": 3,
        "endLine": 58,
        "endChar": 34
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bba72f6_2aca539d",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 58,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T21:47:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1aaefa62_75bbe2c6",
      "range": {
        "startLine": 58,
        "startChar": 3,
        "endLine": 58,
        "endChar": 34
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc95ac43_bb15a871",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 62,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "The scoped nature of this makes me wonder: could we just make debuggerd ATrace-aware (https://developer.android.com/ndk/reference/group/tracing)? If that\u0027s possible, we wouldn\u0027t need the API at all, and it\u0027d make use of an API that\u0027s been available for nearly a decade (iirc tracing made it to the NDK in API 23, which was 2015ish)\n\nThe existing ATrace APIs only handle a name though, not arbitrary binary data, so we\u0027d have to give that up to go that route. Is that a deal breaker? I don\u0027t know enough about what data developers need to attach here to know if that\u0027s important or not.",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb31e26f_75d8504a",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T22:57:28Z",
      "side": 1,
      "message": "yeah, attaching arbitrary data is the whole point here.\n\n(oddly, this is the first company i\u0027ve been at that _didn\u0027t_ have this. _my_ bias is that i\u0027ve previously really did use this for every single operation.)",
      "parentUuid": "fc95ac43_bb15a871",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cffceb0d_f0bebf68",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 62,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "It\u0027s not necessarily scoped, this is just one of the use cases. The other one is to register a global, or a member of an object.",
      "parentUuid": "fc95ac43_bb15a871",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bb019fe_34aa1241",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 69,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T21:10:31Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 69,
        "startChar": 35,
        "endLine": 69,
        "endChar": 40
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c540f78_c8e726cb",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 69,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T21:47:50Z",
      "side": 1,
      "message": "either this, or we also print it with the oct-escape. i don\u0027t care either way.",
      "parentUuid": "0bb019fe_34aa1241",
      "range": {
        "startLine": 69,
        "startChar": 35,
        "endLine": 69,
        "endChar": 40
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62b031e2_445e5d9c",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 69,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T22:57:28Z",
      "side": 1,
      "message": "since we\u0027re not going to actually pay to check, we should escape.",
      "parentUuid": "6c540f78_c8e726cb",
      "range": {
        "startLine": 69,
        "startChar": 35,
        "endLine": 69,
        "endChar": 40
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e8d124f_91902419",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 69,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:14:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62b031e2_445e5d9c",
      "range": {
        "startLine": 69,
        "startChar": 35,
        "endLine": 69,
        "endChar": 40
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9a57c1d_42369935",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "If `name` must be ASCII (or UTF-8, which is more likely), it should be zero terminated anyway, right?",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1021e82_1ed3df39",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "Yes, but it doesn\u0027t have to be. I will add wrappers for when both name and data are C-strings, so people can leave out the strlen",
      "parentUuid": "f9a57c1d_42369935",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a7b84a_8ed7d05b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-13T00:46:11Z",
      "side": 1,
      "message": "Is there a good reason for the caller to have names with embedded nulls? This is supposed to be a human readable key, right? It looks like name should just be defined as a UTF-8 C string.",
      "parentUuid": "a1021e82_1ed3df39",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "929ed29e_19eced60",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-13T01:00:05Z",
      "side": 1,
      "message": "Which is what I had in the docs (`needs to be a valid ASCII-string`), but enh@ disagreed on the grounds that we should not assume it\u0027s ASCII / UTF-8 only without verifying. So now we allow an arbitrary string and oct escape in the output anything that\u0027s not printable.\n\nAnd if we take the length here, we don\u0027t have to do any work for compile-time constant strings, where strlen is free in the caller, but not in libc (because it doesn\u0027t know about the compile-time constant).\n\nThere is also the possibility that the user builds the name somehow dynamically, in which case it\u0027s also nicer to pass in the size it already knows.",
      "parentUuid": "03a7b84a_8ed7d05b",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b7ad50c_e657490b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-13T01:09:31Z",
      "side": 1,
      "message": "\u003e And if we take the length here, we don\u0027t have to do any work for compile-time constant strings, where strlen is free in the caller, but not in libc (because it doesn\u0027t know about the compile-time constant).\n\naye, but since we\u0027re not actually copying the name anyway, we only look at the length if we actually crash (at which point, i don\u0027t care about a few calls to strlen()!).",
      "parentUuid": "929ed29e_19eced60",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cebcead3_bb2dcca4",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-13T01:12:00Z",
      "side": 1,
      "message": "Oh, no, doing the `strlen` after crashing is possible but makes the implementation unnecessarily complicated. It\u0027s much easier if we know the size, then we can read the correct size in crash_dump. Otherwise we need to read an unknown-size string from crash_dump. Or fill out the strlen the debuggerd crash handler.",
      "parentUuid": "8b7ad50c_e657490b",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f149706_66fb1d09",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-13T17:40:30Z",
      "side": 1,
      "message": "oh, i assumed we\u0027d already have that code lying around! (i know we do for known-size blocks, but this could indeed be the first string.)",
      "parentUuid": "cebcead3_bb2dcca4",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd768438_75153927",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-13T20:04:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5f149706_66fb1d09",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef67a533_b3fa1562",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-13T20:24:08Z",
      "side": 1,
      "message": "Okay, so how should this be encoded? Is it an arbitrary string of bytes, or is it text? If it\u0027s text, encoding must be documented. Even if it\u0027s infeasible to _enforce_ the precondition, it\u0027s helpful to the caller if they know what the rules are. go/android-ndk-api-guidelines#well-documented point 5\n\nIf it is just an arbitrary string of bytes (that is, we _intend_ for this to not be printed, and we think it\u0027s totally reasonable for callers to include embedded nulls and control characters because they\u0027re not interpreted as control characters, just bytes), shouldn\u0027t it be a `uint8_t*`?",
      "parentUuid": "bd768438_75153927",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2268becd_aa3b9759",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-13T21:47:16Z",
      "side": 1,
      "message": "As discussed offline: let\u0027s make this a `void*` and interpret it as arbitrary bytes (just like the `data`), with a comment saying that generally this should be a human-readable string. The idea is that this is used in a crash-handler, and we shouldn\u0027t trust any data from the app that just crashed, because it could be corrupted.",
      "parentUuid": "ef67a533_b3fa1562",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92aeeb90_e116fca3",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 71,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "Based on the unregister docs, this should include something like \"The data must remain valid until unregister is called.\"",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81bd32ba_a65740e6",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 71,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "It says this\n\n```\n * The lifetime of name and data has to be valid until the program crashes, or until\n * android_unregister_crash_detail is called.\n ```",
      "parentUuid": "92aeeb90_e116fca3",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bacf48d3_81bb73ba",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 71,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-13T00:46:11Z",
      "side": 1,
      "message": "Ah, it does above. Fair enough.",
      "parentUuid": "81bd32ba_a65740e6",
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b08e5d0_91a7d724",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T21:10:31Z",
      "side": 1,
      "message": "did danalbert tell you to do this? this (as you can see from what\u0027s already in this file) isn\u0027t what we\u0027ve done in the past.\n\nif we _do_ do this, then (a) definitely in a new header and (b) don\u0027t forget to update the docs to match the new names.\n\nbut personally i\u0027d keep bionic-style names.",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e25f22a_596e8664",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T21:13:54Z",
      "side": 1,
      "message": "Dan said this is the correct name. happy to revert, or to move to different header.\n\n@danalbert@google.com Please make executive decision 😊",
      "parentUuid": "9b08e5d0_91a7d724",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82a5b3f0_4d960296",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T21:47:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e25f22a_596e8664",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d98198_99e25414",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "We\u0027ve got a small handful in bionic that are `android_` (the one here predates the NDK API council entirely, fdsan matched this and is old enough that it may not have gotten real review?). Guidelines say:\n\n\u003e One of the difficulties in concrete rules is applying them to a platform that was developed without strict guidelines from the beginning, so some of the existing APIs may not adhere. In some cases, the right choice might be to go with what is consistent with APIs in the same general area of the code, rather than in the ideal rules laid out herein.\n\nI\u0027m happy to go with enh\u0027s preference for now (`android_crash_detail_*`) and argue for that in API council tomorrow, and just deal with renaming if we decide we\u0027d rather have a new header with the API-style matching names.",
      "parentUuid": "2e25f22a_596e8664",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e681b185_e69b0899",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T22:57:28Z",
      "side": 1,
      "message": "(in case you need it tomorrow, my argument is along the lines of \"1. we don\u0027t rename all the OpenGL api 2. and we have 30 functions worth of precedent in bionic\". i\u0027d also say the \"separate header\" is orthogonal; having a second header wouldn\u0027t upset me at all, but having _another_ naming convention would :-) )",
      "parentUuid": "89d98198_99e25414",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4e27d87_3ba78df2",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "I don\u0027t care either way, I thought the new style",
      "parentUuid": "89d98198_99e25414",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 45
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "226c2195_b48ce04b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 77,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "`uint8_t` if it\u0027s mean to be arbitrary bytes. If not, specify encoding in the `\\param`.",
      "range": {
        "startLine": 77,
        "startChar": 55,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e501e570_dd99f80b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 77,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "I am not sure that\u0027s a good idea, because char* is the only thing that is technically allowed to alias everything",
      "parentUuid": "226c2195_b48ce04b",
      "range": {
        "startLine": 77,
        "startChar": 55,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "116df409_958f0f19",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 77,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-13T00:46:11Z",
      "side": 1,
      "message": "`void*` then? That\u0027s how the rest of the C library works. This isn\u0027t text, so `char` is misleading.",
      "parentUuid": "e501e570_dd99f80b",
      "range": {
        "startLine": 77,
        "startChar": 55,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0523819e_de9b0b34",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 77,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-13T01:00:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "116df409_958f0f19",
      "range": {
        "startLine": 77,
        "startChar": 55,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6076cd94_420f4d0c",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 93,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-12T22:36:35Z",
      "side": 1,
      "message": "If it\u0027s const it\u0027s not freeable. Is the caller expected to `const_cast` that away?\n\nAre we expecting the attached data to be very large? I\u0027m wondering if the API should just copy the buffer so we can get away from all the life-time management.",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "159c1d4c_cd6d9eb4",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-12T22:57:28Z",
      "side": 1,
      "message": "the \"this is the assembler\" argument here is basically \"we should take the cheapest choices here [if only to enable the RAII style where you\u0027re adding/removing these on every query or whatever], and assume that anyone who isn\u0027t insane is using their own RAII wrapper anyway\".\n\nbut, yes, this is something we should make clearer in the docs. (and \"should we include our own RAII wrapper?\" is a separate question. there\u0027s no good home for that kind of thing atm though, right?)",
      "parentUuid": "6076cd94_420f4d0c",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a3b4765_1cb1254a",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 93,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-12T23:04:40Z",
      "side": 1,
      "message": "we already discussed this. we don\u0027t want to copy so you can e.g. see the value of some struct at the point it crashes.\n\ni was leaning on reverting this to make it `void` again, which I will do.",
      "parentUuid": "6076cd94_420f4d0c",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9b469c6_1a9c2e79",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 28
      },
      "lineNbr": 93,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2024-02-13T00:46:11Z",
      "side": 1,
      "message": "+1, `void` is fine too.",
      "parentUuid": "3a3b4765_1cb1254a",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "dc03280b6c9e8099d7e7822390a0d310919cd043",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}