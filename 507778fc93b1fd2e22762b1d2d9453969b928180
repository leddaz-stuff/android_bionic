{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0937391c_65918e5b",
        "filename": "libc/include/netdb.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-19T17:26:19Z",
      "side": 1,
      "message": "i don\u0027t think this is \"complicated\" (which we\u0027ve been using to mean \"read the docs; there\u0027s a special case here\") ... i think just \"unspecified\" makes sense? (although arguably it\u0027s a completely new thing which is \"we do know what this is [and in this case, that\u0027s `_Nullable`] but clang doesn\u0027t understand common patterns for making use of this safe, so it would be a bad idea for us to actually specify this\" :-( )\n\n+danalbert for thoughts, including whether we should have a new __BIONIC_ macro to explain this (though i\u0027m struggling to think of a name). currently we don\u0027t have any direct use of unspecified, just the \"complicated\" macro.\n\n(like i said, this does kind of worry me about annotating struct fields in general. and most of our existing struct field annotations -- though they didn\u0027t cause build problems -- were a bit questionable to start with. so i guess one option is `__BIONIC_POINTER_IN_STRUCT` which doesn\u0027t look like it\u0027s making any claim about anything, but can have a comment in \u003csys/cdefs.h\u003e explaining why we\u0027re opting out of annotating these for now.)",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "507778fc93b1fd2e22762b1d2d9453969b928180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e89e5a8b_e4d7f72b",
        "filename": "libc/include/netdb.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-05-19T18:18:08Z",
      "side": 1,
      "message": "I see! So this is still `_Nullable_unspecific` BUT with a different macro name, which can help explain why it is unspecific clearly right?",
      "parentUuid": "0937391c_65918e5b",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "507778fc93b1fd2e22762b1d2d9453969b928180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f547179_19606f22",
        "filename": "libc/include/netdb.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-19T18:36:38Z",
      "side": 1,
      "message": "yeah, exactly.\n\n(the biggest question is probably \"am i over-reacting to one clang bug?\", and my answer is \"i have no idea\". i don\u0027t know whether that\u0027s representative at all.)\n\ni was interested to learn from your linux-man@ discussion that they\u0027re adding these annotations to the man pages (but not, afaik, to glibc or musl). but they look like they\u0027re just doing the functions, not the structs. (possibly for our earlier \"what does this even mean?\" reason rather than our newer \"because clang doesn\u0027t understand common idioms for using these safely\".)",
      "parentUuid": "e89e5a8b_e4d7f72b",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "507778fc93b1fd2e22762b1d2d9453969b928180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cf7c3e1_cbd6c0b4",
        "filename": "libc/include/netdb.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2023-05-19T18:48:49Z",
      "side": 1,
      "message": "unspecified seems fine to me. If you want to name it, maybe just `__BIONIC_NULLNESS_NOT_EXPRESSIBLE_TO_CLANG`? It\u0027s wordy but correct.",
      "parentUuid": "7f547179_19606f22",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "507778fc93b1fd2e22762b1d2d9453969b928180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8634d82f_0ceb087c",
        "filename": "libc/include/netdb.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2023-05-19T18:57:12Z",
      "side": 1,
      "message": "Irrespective of the naming, please file a bug with why this could be a clang bug.  The error in PS1 h_addr_list was not annotated as _Nonnull and consequently clang complained about this line in DNSProxyListener.cpp:\n\n\u003e inet_ntop(hp-\u003eh_addrtype, hp-\u003eh_addr_list[i], ip_addr, sizeof(ip_addr))\n\nIs it that we need different annotations when implementing the library vs. using it?",
      "parentUuid": "9cf7c3e1_cbd6c0b4",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "507778fc93b1fd2e22762b1d2d9453969b928180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}