{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d2419fc_a4728048",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2024-02-19T08:44:54Z",
      "side": 1,
      "message": "just providing more info\n\nthis doesn\u0027t change the symbol exported/provided by the library, but limits the library user of vendor variant. If a vendor module included a library header, and the header uses this macro, then the annotated method could be conditionally disabled FOR THE VENDOR VARIANT USER",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 13,
        "endChar": 29
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af542117_d8f2fdb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "convince me that this belongs in the NDK, and not in some llndk-only header somewhere?\n\n(i think at the very least, this needs some clarification around \"what _is_ the llndk?\", since roughly no-one not on jiyong\u0027s team at google knows.)",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95e488a4_21302a42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-21T10:08:44Z",
      "side": 1,
      "message": "This is LLNDK-only versioning, but almost all LLNDK libraries (except 3, AFAIK) are also NDKs and, vice versa. So I wanted to cover the LLNDK versioning by including \u003csys/cdefs.h\u003e once, without adding two headers for every NDK/LLNDK libraries.\n\nTo split NDK and LLNDK versioning from one header file, I may create libc/include/android/llndk_versioning.h and include it from sys/cdefs.h.",
      "parentUuid": "af542117_d8f2fdb0",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4672d82_883def3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-21T22:32:54Z",
      "side": 1,
      "message": "+danalbert since he seems to have reviewed the doc at least, and might understand this better...",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f79dd4fd_a8cccca7",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "link to the public documentation.",
      "range": {
        "startLine": 80,
        "startChar": 17,
        "endLine": 80,
        "endChar": 49
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512e2bd9_435549d4",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "what is this?\n\n(also: \"why isn\u0027t that a terrible idea?\" --- \"doesn\u0027t that mean i have _two_ problems?\")",
      "range": {
        "startLine": 80,
        "startChar": 3,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48844fe6_4d88a06c",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-21T10:08:44Z",
      "side": 1,
      "message": "The document is not published yet, but we have an internal doc: go/vfrc-llndk-versioning only for now.",
      "parentUuid": "f79dd4fd_a8cccca7",
      "range": {
        "startLine": 80,
        "startChar": 17,
        "endLine": 80,
        "endChar": 49
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c23033c1_08c777c8",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-21T10:08:44Z",
      "side": 1,
      "message": "LLNDK (https://source.android.com/docs/core/architecture/vndk/build-system#ll-ndk), as a stable c interface, is similar to NDK, but uses different versioning. So, it does not use clang version triple.\n\nThis may not require any more complexity or new features from bionic.",
      "parentUuid": "512e2bd9_435549d4",
      "range": {
        "startLine": 80,
        "startChar": 3,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faa510d4_0cffa4a5",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-21T22:32:54Z",
      "side": 1,
      "message": "define \"different versioning\" ... the numbers are the same, right? it\u0027s just that any \"build\" has _two_ versions --- one for the system image and another for the vendor image? (but \"34\" means the same on both; it\u0027s just possible that your system image is 34 while your vendor image is 32?)\n\nthere\u0027s definitely cognitive complexity here, and _something_ needs to talk about things like:\n1. what this is.\n2. how it differs.\n3. when to use which.\n\nideally i think the header file should be very brief and link to a doc.\n\nthe \"ABI-frozen twice each year\" in particular seems like a massive change (that\u0027s going to be non-obvious to anyone adding these annotations).",
      "parentUuid": "c23033c1_08c777c8",
      "range": {
        "startLine": 80,
        "startChar": 3,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ca8fd6e_d7028d21",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-22T01:47:25Z",
      "side": 1,
      "message": "The numbers are different. Vendor API level follows `YYYYMM` format.\nLLNDK ABI will be finalized in 24Q2 with the version 202404. After that NDK will be finalized in 24Q3 with 35.\n\n\u003e it\u0027s just that any \"build\" has two versions --- one for the system image and another for the vendor image? (but \"34\" means the same on both; it\u0027s just possible that your system image is 34 while your vendor image is 32?)\n\nThis is almost correct, except, vendor side cannot have the versions that were finalized for NDK, but use YYYYMM format that were finalized for vFRC in Q2.\n\n\u003e the \"ABI-frozen twice each year\" in particular seems like a massive change (that\u0027s going to be non-obvious to anyone adding these annotations).\n\nWe already had frozen both NDK and LLNDK ABIs with the SDK finalization before. With this change, the LLNDK ABI finalization schedule is skewed from the SDK finalization. So it may look like freezing the ABIs twice. However, as they does not share versions with each other, NDK and LLNDK are freezing once a year as before.",
      "parentUuid": "faa510d4_0cffa4a5",
      "range": {
        "startLine": 80,
        "startChar": 3,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a086a00_e8f30ef1",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "i work on android, and don\u0027t understand this. \"target\" elsewhere here means \"what the apk says\". but what\u0027s the equivalent of that for vendor code?",
      "range": {
        "startLine": 80,
        "startChar": 82,
        "endLine": 81,
        "endChar": 56
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0827b138_04a922ca",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-21T10:08:44Z",
      "side": 1,
      "message": "Vendor partition has its own API level that is defined from the build configuration (RELEASE_BOARD_API_LEVEL) and assigned to ro.board.api_level property.\nAll vendor binaries share the same vendor api level.",
      "parentUuid": "4a086a00_e8f30ef1",
      "range": {
        "startLine": 80,
        "startChar": 82,
        "endLine": 81,
        "endChar": 56
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a863a5be_17fa02cc",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "`if defined`, like the rest of the file",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 83,
        "endChar": 6
      },
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09182751_04e846c2",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-20T16:52:27Z",
      "side": 1,
      "message": "this is probably a better place to have the last sentence in your comment, but with an explanation of why. (you probably need to clarify \"system builds\" since that\u0027s not common terminology, and i initially interpreted it as \"OS builds\" but realize now you mean something more like \"code that ends up on the system image\", right?)",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7457d3a8_6c17749b",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-21T10:08:44Z",
      "side": 1,
      "message": "Your understanding is right. In this context, system and vendor is divided by the treble boundary.",
      "parentUuid": "09182751_04e846c2",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9053a30f_cad9984b",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-21T22:32:54Z",
      "side": 1,
      "message": "if i\u0027ve understood the doc at all (which i\u0027m not sure about), it\u0027s unclear \"LLNDK\" is the point here? the point is that there are two freezes?\n\nisn\u0027t the fix to have an api bump for that too? (that fixes a lot of our other problems.)\n\ni still don\u0027t think i understand the problem, or how this solves it...",
      "parentUuid": "7457d3a8_6c17749b",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdc2d11d_10810054",
        "filename": "libc/include/android/versioning.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-22T01:47:25Z",
      "side": 1,
      "message": "We already had NDK and LLNDK freezes before when finalizing SDK version. But the point is to have different schedule for the LLNDK freezing from the SDK finalization. That required new versioning and also required new symbol versioning for LLNDK.",
      "parentUuid": "9053a30f_cad9984b",
      "revId": "2c2134259f1c0b93e157f559d8d2b3b47994a2a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}