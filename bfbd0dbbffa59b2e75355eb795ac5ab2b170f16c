{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "939afe53_98564e1f",
        "filename": "linker/linker.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2341,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "The spec says TLS is not tagged. Are we doing this as an extension? No concerns as this is no-op, just making sure its intentional.",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b62e4b3_1cfad2bb",
        "filename": "linker/linker.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2341,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Thanks, yeah, this isn\u0027t necessary and I\u0027ve removed it. The symbol resolution below is the important bit, I guess I slapped it here overzealously.",
      "parentUuid": "939afe53_98564e1f",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ce5e3f5_5c13ae7b",
        "filename": "linker/linker.cpp",
        "patchSetId": 23
      },
      "lineNbr": 3317,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "We should not remap pages when MTE is not enabled. Is this implemented? I do not see where.",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8be26344_e32f6c0a",
        "filename": "linker/linker.cpp",
        "patchSetId": 23
      },
      "lineNbr": 3317,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ce5e3f5_5c13ae7b",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5448a827_b2662af5",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 868,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "hmm I would expect this to compile back to a memcpy() call. There was an attribute to prevent this from happening. Also, would not that turn into __dl_memcpy or something? What\u0027s wrong with calling that?",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37bbe63_fa78c3a0",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 868,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Yeah so from practical experimentation, `__builtin_memcpy` translates to memcpy() here, which is apparently permitted [1] but not what godbolt-O2 says (https://godbolt.org/z/YWhae3Khq). Must be something to do with the cxx flags here.\n\nEven though this file isn\u0027t built with `-ffreestanding` (only `linker/linker_main.cpp` is, https://cs.android.com/android/platform/superproject/main/+/main:bionic/linker/Android.bp;l\u003d148), this doesn\u0027t get compiled back to memcpy.\n\nI\u0027ll move this into linker_main.cpp though to be sure, so it\u0027s covered under `-ffreestanding`.\n\n[1] https://gcc.gnu.org/legacy-ml/gcc-help/2016-03/msg00031.html#:~:text\u003dExcept%20in%20freestanding%20mode%20(with%20builtins%20disabled)%20I%20don%27t%20believe%0A%3E%3E%3E%20there%20is%20a%20difference.%20%20They%20both%20get%20expanded%20the%20same%20way%20(either%0A%3E%3E%3E%20inline%20or%20to%20a%20call%20to%20memcpy%20depending%20on%20arguments).",
      "parentUuid": "5448a827_b2662af5",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "366fa9f4_a87890b1",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 868,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-20T20:35:03Z",
      "side": 1,
      "message": "you\u0027d need __restrict__ on the inputs to generate a call to memcpy. I still do not understand what\u0027s wrong with it. Does it have something to do with ifuncs?",
      "parentUuid": "c37bbe63_fa78c3a0",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26af4a15_48d3a4fd",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 868,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-23T10:23:22Z",
      "side": 1,
      "message": "```\n$ echo \u0027void foo(void* d, void* s, unsigned n) { __builtin_memcpy(d, s, n); }\u0027 \u003e /tmp/in.c\n$ clang --target\u003daarch64-linux-android1000 -O2 -S /tmp/in.c -o -\n\n\t.text\n\t.file\t\"in.c\"\n\t.globl\tfoo                             // -- Begin function foo\n\t.p2align\t2\n\t.type\tfoo,@function\nfoo:                                    // @foo\n\t.cfi_startproc\n// %bb.0:                               // %entry\n\tmov\tw2, w2\n\tb\tmemcpy  // \u003c------------------- ??????????????\n.Lfunc_end0:\n\t.size\tfoo, .Lfunc_end0-foo\n\t.cfi_endproc\n                                        // -- End function\n\t.ident\t\"clang version 18.0.0 (https://github.com/llvm/llvm-project.git 928c9d6851102dfaca18909cee047bb63cdc05c7)\"\n\t.section\t\".note.GNU-stack\",\"\",@progbits\n```\n\nYet godbolt disagrees: https://godbolt.org/z/rT56jeocs. Maybe something to do with my toolchain / the android toolchain and compiler-rt builtins?",
      "parentUuid": "366fa9f4_a87890b1",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f1635e_c254bf0c",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 868,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-26T20:50:07Z",
      "side": 1,
      "message": "So this whole thing with custom memcpy is because of ifunc, right? Do we need to do this before the linker relocates itself if mte globals are disabled in the linker?",
      "parentUuid": "26af4a15_48d3a4fd",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2b5c0ea_abe9a01c",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 886,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "this comment has very strange formatting",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9919e594_705bab64",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 886,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2b5c0ea_abe9a01c",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28734bd1_52e93df5",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 905,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "why not put all this code under #ifdef aarch64?",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b254a56_1afb6a5e",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 905,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Personal preference to have the shortest conditional defines possible. For two reasons:\n\n 1. My editor (vscode) removes syntax highlighting (it renders as a comment) on any code in a conditional that it thinks you\u0027re not using by default, so anything aarch64-specific loses that.\n 2. Long conditional defines are easier to lose track of in a large file, especially when they go above a single screen. Especially when it spans multiple functions - very easy to add another function between the two and only realising when the linker complains about missing functions.\n \nOkay with you?",
      "parentUuid": "28734bd1_52e93df5",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb7443a2_c1ac8bb1",
        "filename": "linker/linker_phdr.cpp",
        "patchSetId": 23
      },
      "lineNbr": 905,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-20T20:35:03Z",
      "side": 1,
      "message": "sure, as long as this code does not run when it is not needed",
      "parentUuid": "0b254a56_1afb6a5e",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d40bbd7_d3546aac",
        "filename": "linker/linker_relocate.cpp",
        "patchSetId": 23
      },
      "lineNbr": 357,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-10-19T22:07:23Z",
      "side": 1,
      "message": "sink offset and place under if()",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce9d973a_570354f8",
        "filename": "linker/linker_relocate.cpp",
        "patchSetId": 23
      },
      "lineNbr": 357,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-10-20T13:36:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d40bbd7_d3546aac",
      "revId": "bfbd0dbbffa59b2e75355eb795ac5ab2b170f16c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}