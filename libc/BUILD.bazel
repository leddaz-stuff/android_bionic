# NOTE: THIS FILE IS EXPERIMENTAL FOR THE BAZEL MIGRATION AND NOT USED FOR
# YOUR BUILDS CURRENTLY.
#
# It is not yet the source of truth for your build. If you're looking to modify
# the build file, modify the Android.bp file instead. Do *not* modify this file
# unless you have coordinated with the team managing the Soong to Bazel
# migration.

package(
    default_visibility = ["@//:__pkg__"],
)

load("//bionic/libc:libc_flags.bzl", "LIBC_CFLAGS")

genrule(
    name = "syscalls-arm",
    srcs = ["SYSCALLS.TXT"],
    outs = ["syscalls-arm.S"],
    cmd = "$(location //bionic/libc/tools:bionic-gensyscalls) arm $< > $@",
    tools = ["//bionic/libc/tools:bionic-gensyscalls"],
)

genrule(
    name = "syscalls-arm64",
    srcs = ["SYSCALLS.TXT"],
    outs = ["syscalls-arm64.S"],
    cmd = "$(location //bionic/libc/tools:bionic-gensyscalls) arm64 $< > $@",
    tools = ["//bionic/libc/tools:bionic-gensyscalls"],
)

genrule(
    name = "syscalls-x86",
    srcs = ["SYSCALLS.TXT"],
    outs = ["syscalls-x86.S"],
    cmd = "$(location //bionic/libc/tools:bionic-gensyscalls) x86 $< > $@",
    tools = ["//bionic/libc/tools:bionic-gensyscalls"],
)

genrule(
    name = "syscalls-x86_64",
    srcs = ["SYSCALLS.TXT"],
    outs = ["syscalls-x86_64.S"],
    cmd = "$(location //bionic/libc/tools:bionic-gensyscalls) x86_64 $< > $@",
    tools = ["//bionic/libc/tools:bionic-gensyscalls"],
)

_LIBC_LDFLAGS = [
    "-Wl,-z,muldefs",
]

_LIBC_INCLUDES = [
    "async_safe/include",
]

# The portions of libc_bionic that can
# be safely used in libc_ndk.a (no troublesome global data
# or constructors).
cc_library(
    name = "libc_bionic_ndk",
    srcs = [
        "bionic/NetdClientDispatch.cpp",
        "bionic/__bionic_get_shell_path.cpp",
        "bionic/__cmsg_nxthdr.cpp",
        "bionic/__errno.cpp",
        "bionic/__gnu_basename.cpp",
        "bionic/__libc_current_sigrtmax.cpp",
        "bionic/__libc_current_sigrtmin.cpp",
        "bionic/abort.cpp",
        "bionic/accept.cpp",
        "bionic/access.cpp",
        "bionic/arpa_inet.cpp",
        "bionic/assert.cpp",
        "bionic/atof.cpp",
        "bionic/bionic_allocator.cpp",
        "bionic/bionic_arc4random.cpp",
        "bionic/bionic_futex.cpp",
        "bionic/bionic_netlink.cpp",
        "bionic/bionic_systrace.cpp",
        "bionic/bionic_time_conversions.cpp",
        "bionic/brk.cpp",
        "bionic/c16rtomb.cpp",
        "bionic/c32rtomb.cpp",
        "bionic/chmod.cpp",
        "bionic/chown.cpp",
        "bionic/clearenv.cpp",
        "bionic/clock.cpp",
        "bionic/clock_getcpuclockid.cpp",
        "bionic/clock_nanosleep.cpp",
        "bionic/clone.cpp",
        "bionic/ctype.cpp",
        "bionic/dirent.cpp",
        "bionic/dup.cpp",
        "bionic/environ.cpp",
        "bionic/error.cpp",
        "bionic/eventfd_write.cpp",
        "bionic/exec.cpp",
        "bionic/faccessat.cpp",
        "bionic/fchmod.cpp",
        "bionic/fchmodat.cpp",
        "bionic/fcntl.cpp",
        "bionic/fdsan.cpp",
        "bionic/fdtrack.cpp",
        "bionic/ffs.cpp",
        "bionic/fgetxattr.cpp",
        "bionic/flistxattr.cpp",
        "bionic/flockfile.cpp",
        "bionic/fpclassify.cpp",
        "bionic/fsetxattr.cpp",
        "bionic/ftruncate.cpp",
        "bionic/ftw.cpp",
        "bionic/futimens.cpp",
        "bionic/getcwd.cpp",
        "bionic/getdomainname.cpp",
        "bionic/getentropy.cpp",
        "bionic/gethostname.cpp",
        "bionic/getloadavg.cpp",
        "bionic/getpagesize.cpp",
        "bionic/getpgrp.cpp",
        "bionic/getpid.cpp",
        "bionic/getpriority.cpp",
        "bionic/gettid.cpp",
        "bionic/get_device_api_level.cpp",
        "bionic/grp_pwd.cpp",
        "bionic/grp_pwd_file.cpp",
        "bionic/iconv.cpp",
        "bionic/icu_wrappers.cpp",
        "bionic/ifaddrs.cpp",
        "bionic/inotify_init.cpp",
        "bionic/ioctl.cpp",
        "bionic/killpg.cpp",
        "bionic/langinfo.cpp",
        "bionic/lchown.cpp",
        "bionic/lfs64_support.cpp",
        "bionic/libc_init_common.cpp",
        "bionic/libgen.cpp",
        "bionic/link.cpp",
        "bionic/locale.cpp",
        "bionic/lockf.cpp",
        "bionic/lstat.cpp",
        "bionic/mblen.cpp",
        "bionic/mbrtoc16.cpp",
        "bionic/mbrtoc32.cpp",
        "bionic/mempcpy.cpp",
        "bionic/mkdir.cpp",
        "bionic/mkfifo.cpp",
        "bionic/mknod.cpp",
        "bionic/mntent.cpp",
        "bionic/mremap.cpp",
        "bionic/net_if.cpp",
        "bionic/netdb.cpp",
        "bionic/new.cpp",
        "bionic/netinet_in.cpp",
        "bionic/nl_types.cpp",
        "bionic/open.cpp",
        "bionic/pathconf.cpp",
        "bionic/pause.cpp",
        "bionic/pipe.cpp",
        "bionic/poll.cpp",
        "bionic/posix_fadvise.cpp",
        "bionic/posix_fallocate.cpp",
        "bionic/posix_madvise.cpp",
        "bionic/posix_timers.cpp",
        "bionic/ptrace.cpp",
        "bionic/pty.cpp",
        "bionic/raise.cpp",
        "bionic/rand.cpp",
        "bionic/readlink.cpp",
        "bionic/realpath.cpp",
        "bionic/reboot.cpp",
        "bionic/recv.cpp",
        "bionic/recvmsg.cpp",
        "bionic/rename.cpp",
        "bionic/rmdir.cpp",
        "bionic/scandir.cpp",
        "bionic/sched_getaffinity.cpp",
        "bionic/sched_getcpu.cpp",
        "bionic/semaphore.cpp",
        "bionic/send.cpp",
        "bionic/setegid.cpp",
        "bionic/seteuid.cpp",
        "bionic/setpgrp.cpp",
        "bionic/sigaction.cpp",
        "bionic/signal.cpp",
        "bionic/sigprocmask.cpp",
        "bionic/sleep.cpp",
        "bionic/spawn.cpp",
        "bionic/stat.cpp",
        "bionic/stdlib_l.cpp",
        "bionic/strchrnul.cpp",
        "bionic/strerror.cpp",
        "bionic/string_l.cpp",
        "bionic/strings_l.cpp",
        "bionic/strsignal.cpp",
        "bionic/strtol.cpp",
        "bionic/strtold.cpp",
        "bionic/swab.cpp",
        "bionic/symlink.cpp",
        "bionic/sync_file_range.cpp",
        "bionic/sys_epoll.cpp",
        "bionic/sys_msg.cpp",
        "bionic/sys_sem.cpp",
        "bionic/sys_shm.cpp",
        "bionic/sys_signalfd.cpp",
        "bionic/sys_statfs.cpp",
        "bionic/sys_statvfs.cpp",
        "bionic/sys_time.cpp",
        "bionic/sysinfo.cpp",
        "bionic/syslog.cpp",
        "bionic/system.cpp",
        "bionic/system_property_api.cpp",
        "bionic/system_property_set.cpp",
        "bionic/tdestroy.cpp",
        "bionic/termios.cpp",
        "bionic/thread_private.cpp",
        "bionic/threads.cpp",
        "bionic/timespec_get.cpp",
        "bionic/tmpfile.cpp",
        "bionic/umount.cpp",
        "bionic/unlink.cpp",
        "bionic/usleep.cpp",
        "bionic/wait.cpp",
        "bionic/wchar.cpp",
        "bionic/wchar_l.cpp",
        "bionic/wcstod.cpp",
        "bionic/wctype.cpp",
        "bionic/wcwidth.cpp",
        "bionic/wmempcpy.cpp",
        # This contains a weak stub implementation of __find_icu_symbol for wctype.cpp,
        # which will be overridden by the actual one in libc.so.
        "bionic/icu_static.cpp",
    ] + glob([
        "bionic/**/*.h",
    ]) + select({
        "//build/bazel/platforms:config_arm": [
            "bionic/mmap.cpp",
        ],
        "//build/bazel/platforms:config_x86": [
            "bionic/mmap.cpp",
        ],
        "//conditions:default": [],
    }),
    copts = LIBC_CFLAGS + [
        "-DTREBLE_LINKER_NAMESPACES",
        "-Wold-style-cast",
    ] + select({
        "//build/bazel/platforms:config_arm": [
            "-Wno-tautological-type-limit-compare",
        ],
        "//build/bazel/platforms:config_x86": [
            "-Wno-tautological-type-limit-compare",
        ],
        "//conditions:default": [],
    }),
    includes = _LIBC_INCLUDES + [
        "stdio",
    ],
    linkopts = _LIBC_LDFLAGS,
    visibility = [
        "//bionic:__subpackages__",
        "//build/bazel/tests:__subpackages__",
    ],
    deps = [
        ":bionic_includes",
        ":generated_android_ids",
        ":includes_for_bionic",
        ":stdio_includes",
        "//bionic/libc/async_safe:includes",
        "//bionic/libc/system_properties",
        "//bionic/libstdc++:includes",
        "//system/core:includes",
        "//system/core/libcutils:includes",
        "//system/core/property_service/libpropertyinfoparser:includes",
    ],
)

# Required by libraries that include <bionic/foo.h>.
# This means we need to strip the prefix, then re-add it. If we don't, _every_
# file in this package would be includable.
cc_library(
    name = "bionic_includes",
    hdrs = glob([
        "bionic/**/*.h",
    ]),
    include_prefix = "bionic",
    strip_include_prefix = "bionic",
    visibility = [
        "//bionic/libc:__subpackages__",
        "//system/core/property_service/libpropertyinfoparser:__subpackages__",
    ],
)

# Required by libraries that include <foo/bar.h> where foo
# is a subdir in include/
cc_library(
    name = "includes",
    hdrs = glob([
        "include/**/*.h",
    ]),
    include_prefix = "include",
    strip_include_prefix = "include",
    visibility = [
        "//bionic:__subpackages__",
        "//external:__subpackages__",
        "//system/core/property_service/libpropertyinfoparser:__subpackages__",
    ],
)

# Required by libraries that include <stdio/foo.h>
cc_library(
    name = "stdio_includes",
    hdrs = glob([
        "stdio/*.h",
    ]),
    include_prefix = "stdio",
    strip_include_prefix = "stdio",
    visibility = [
        "//bionic:__subpackages__",
    ],
)

# Required by libraries that include <private.h>
cc_library(
    name = "private_headers",
    hdrs = glob(["private/**/*.h"]),
    include_prefix = "private",
    strip_include_prefix = "private",
)

# Required by other bionic libraries.
cc_library(
    name = "includes_for_bionic",
    hdrs = [
        "include/sys/mman.h",
        "include/dlfcn.h",
        "include/stdlib.h",
        "include/assert.h",
    ] + glob([
        "bionic/**/*.h",
        "platform/bionic/**/*.h",
        "kernel/uapi/**/*.h",
        "kernel/android/uapi/**/*.h",
    ]),
    includes = [
        ".",
        "include",
        "kernel/android/uapi",
        "kernel/uapi",
        "platform",
    ] + select({
        # TODO(b/147667277): Split these into separate cc_libraries.
        "@bazel_tools//platforms:aarch64": ["kernel/uapi/asm-arm64"],
        "@bazel_tools//platforms:arm": ["kernel/uapi/asm-arm"],
        "@bazel_tools//platforms:x86_64": ["kernel/uapi/asm-x86"],
        "@bazel_tools//platforms:x86_32": ["kernel/uapi/asm-x86"],
    }),
    visibility = [
        "//bionic:__subpackages__",
        "//build/bazel/tests:__subpackages__",
        "//external/libcxx:__pkg__",
        "//system/core/property_service:__subpackages__",
    ],
    deps = [
        ":private_headers",
    ],
)

genrule(
    name = "generated_android_ids_header",
    srcs = ["//system/core/libcutils:android_filesystem_config_header"],
    outs = ["include/generated_android_ids.h"],
    cmd = "$(location fs_config_generator.py) aidarray $(SRCS) > $@",
    exec_tools = ["fs_config_generator.py"],
)

cc_library(
    name = "generated_android_ids",
    hdrs = [
        ":include/generated_android_ids.h",
    ],
    includes = ["include"],
)
