// File autogenerated by genseccomp.py - edit at your peril!!

#include <errno.h>
#include <linux/filter.h>

#include "seccomp/seccomp_bpfs.h"
const sock_filter x86_system_filter[] = {
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 0, 0, 132),
    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 240, 130, 0),  // futex
    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 54, 129, 0),   // ioctl
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 183, 65, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 88, 33, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 51, 17, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 36, 9, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 19, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 11, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 3, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 2, 122, 121),   // restart_syscall|exit
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 7, 121, 120),   // read|write|open|close
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 13, 120, 119),  // execve|chdir
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 26, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 22, 118, 117),  // lseek|getpid|mount
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 27, 117, 116),  // ptrace
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 43, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 41, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 38, 114, 113),  // sync|kill
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 42, 113, 112),  // dup
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 45, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 44, 111, 110),  // times
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 46, 110, 109),  // brk
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 66, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 60, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 57, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 53, 106, 105),  // acct|umount2
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 58, 105, 104),  // setpgid
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 64, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 62, 103, 102),  // umask|chroot
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 65, 102, 101),  // getppid
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 77, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 74, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 68, 99, 98),  // setsid|sigaction
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 76, 98, 97),  // sethostname|setrlimit
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 85, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 80, 96, 95),  // getrusage|gettimeofday|settimeofday
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 86, 95, 94),  // readlink
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 124, 15, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 102, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 94, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 91, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 89, 90, 89),  // reboot
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 93, 89, 88),  // munmap|truncate
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 96, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 95, 87, 86),  // fchmod
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 98, 86, 85),  // getpriority|setpriority
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 116, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 114, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 106, 83, 82),  // socketcall|syslog|setitimer|getitimer
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 115, 82, 81),  // wait4
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 118, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 117, 80, 79),  // sysinfo
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 123, 79, 78),  // fsync|sigreturn|clone|setdomainname|uname
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 138, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 131, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 128, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 126, 75, 74),  // adjtimex|mprotect
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 130, 74, 73),  // init_module|delete_module
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 136, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 134, 72, 71),  // quotactl|getpgid|fchdir
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 137, 71, 70),  // personality
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 150, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 143, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 141, 68, 67),  // setfsuid|setfsgid|_llseek
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 149, 67, 66),  // flock|msync|readv|writev|getsid|fdatasync
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 172, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 164, 65,
        64),  // mlock|munlock|mlockall|munlockall|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_yield|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|nanosleep|mremap
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 182, 64,
        63),  // prctl|rt_sigreturn|rt_sigaction|rt_sigprocmask|rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|pread64|pwrite64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 300, 31, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 245, 15, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 213, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 197, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 190, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 188, 58, 57),  // getcwd|capget|capset|sigaltstack|sendfile
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 196, 57,
             56),  // vfork|ugetrlimit|mmap2|truncate64|ftruncate64|stat64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 199, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 198, 55, 54),  // fstat64
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 212, 54,
        53),  // getuid32|getgid32|geteuid32|getegid32|setreuid32|setregid32|getgroups32|setgroups32|fchown32|setresuid32|getresuid32|setresgid32|getresgid32
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 224, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 218, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 215, 51, 50),  // setuid32|setgid32
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 222, 50, 49),  // mincore|madvise|getdents64|fcntl64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 241, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 240, 48,
        47),  // gettid|readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill|sendfile64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 244, 47,
             46),  // sched_setaffinity|sched_getaffinity|set_thread_area
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 272, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 255, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 252, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 250, 43,
             42),  // io_setup|io_destroy|io_getevents|io_submit|io_cancel
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 253, 42, 41),  // exit_group
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 258, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 256, 40, 39),  // epoll_ctl
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 271, 39,
        38),  // set_tid_address|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete|clock_settime|clock_gettime|clock_getres|clock_nanosleep|statfs64|fstatfs64|tgkill
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 292, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 284, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 273, 36, 35),  // fadvise64_64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 285, 35, 34),  // waitid
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 295, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 294, 33, 32),  // inotify_add_watch|inotify_rm_watch
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 299, 32, 31),  // openat|mkdirat|mknodat|fchownat
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 351, 15, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 324, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 318, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 313, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 311, 27,
        26),  // fstatat64|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 317, 26, 25),  // splice|sync_file_range|tee|vmsplice
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 322, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 321, 24, 23),  // getcpu|epoll_pwait|utimensat
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 323, 23, 22),  // timerfd_create
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 343, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 340, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 337, 20,
        19),  // fallocate|timerfd_settime|timerfd_gettime|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev|rt_tgsigqueueinfo|perf_event_open
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 341, 19, 18),  // prlimit64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 346, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 345, 17, 16),  // clock_adjtime|syncfs
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 349, 16, 15),  // setns|process_vm_readv|process_vm_writev
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 417, 7, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 383, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 375, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 359, 12,
        11),  // sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create|bpf|execveat
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 380, 11,
             10),  // membarrier|mlock2|copy_file_range|preadv2|pwritev2
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 403, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 384, 9, 8),  // statx
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 415, 8,
        7),  // clock_gettime64|clock_settime64|clock_adjtime64|clock_getres_time64|clock_nanosleep_time64|timer_gettime64|timer_settime64|timerfd_gettime64|timerfd_settime64|utimensat_time64|pselect6_time64|ppoll_time64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 434, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 420, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 418, 5, 4),  // recvmmsg_time64
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 424, 4,
        3),  // semtimedop_time64|rt_sigtimedwait_time64|futex_time64|sched_rr_get_interval_time64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 440, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 435, 2, 1),  // pidfd_open
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 441, 1, 0),  // process_madvise
    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
};

const size_t x86_system_filter_size = sizeof(x86_system_filter) / sizeof(struct sock_filter);
