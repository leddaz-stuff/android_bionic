/* Generated by gensyscalls.py. Do not edit. */

#include <private/bionic_asm.h>

ENTRY(execve)
    mov     x8, __NR_execve
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(execve)

#include <private/bionic_asm.h>

ENTRY(getuid)
    mov     x8, __NR_getuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getuid)

#include <private/bionic_asm.h>

ENTRY(getgid)
    mov     x8, __NR_getgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getgid)

#include <private/bionic_asm.h>

ENTRY(geteuid)
    mov     x8, __NR_geteuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(geteuid)

#include <private/bionic_asm.h>

ENTRY(getegid)
    mov     x8, __NR_getegid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getegid)

#include <private/bionic_asm.h>

ENTRY(getresuid)
    mov     x8, __NR_getresuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getresuid)

#include <private/bionic_asm.h>

ENTRY(getresgid)
    mov     x8, __NR_getresgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getresgid)

#include <private/bionic_asm.h>

ENTRY(readahead)
    mov     x8, __NR_readahead
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(readahead)

#include <private/bionic_asm.h>

ENTRY(getgroups)
    mov     x8, __NR_getgroups
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getgroups)

#include <private/bionic_asm.h>

ENTRY(getpgid)
    mov     x8, __NR_getpgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getpgid)

#include <private/bionic_asm.h>

ENTRY(getppid)
    mov     x8, __NR_getppid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getppid)

#include <private/bionic_asm.h>

ENTRY(getsid)
    mov     x8, __NR_getsid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getsid)

#include <private/bionic_asm.h>

ENTRY(setsid)
    mov     x8, __NR_setsid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setsid)

#include <private/bionic_asm.h>

ENTRY(setgid)
    mov     x8, __NR_setgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setgid)

#include <private/bionic_asm.h>

ENTRY(setuid)
    mov     x8, __NR_setuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setuid)

#include <private/bionic_asm.h>

ENTRY(setreuid)
    mov     x8, __NR_setreuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setreuid)

#include <private/bionic_asm.h>

ENTRY(setresuid)
    mov     x8, __NR_setresuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setresuid)

#include <private/bionic_asm.h>

ENTRY(setresgid)
    mov     x8, __NR_setresgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setresgid)

#include <private/bionic_asm.h>

ENTRY(__brk)
    mov     x8, __NR_brk
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__brk)
.hidden __brk

#include <private/bionic_asm.h>

ENTRY(kill)
    mov     x8, __NR_kill
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(kill)

#include <private/bionic_asm.h>

ENTRY(tgkill)
    mov     x8, __NR_tgkill
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(tgkill)

#include <private/bionic_asm.h>

ENTRY(__ptrace)
    mov     x8, __NR_ptrace
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__ptrace)
.hidden __ptrace

#include <private/bionic_asm.h>

ENTRY(getrusage)
    mov     x8, __NR_getrusage
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getrusage)

#include <private/bionic_asm.h>

ENTRY(__getpriority)
    mov     x8, __NR_getpriority
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__getpriority)
.hidden __getpriority

#include <private/bionic_asm.h>

ENTRY(setpriority)
    mov     x8, __NR_setpriority
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setpriority)

#include <private/bionic_asm.h>

ENTRY(getrlimit)
    mov     x8, __NR_getrlimit
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getrlimit)

ALIAS_SYMBOL(getrlimit64, getrlimit)

#include <private/bionic_asm.h>

ENTRY(setrlimit)
    mov     x8, __NR_setrlimit
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setrlimit)

ALIAS_SYMBOL(setrlimit64, setrlimit)

#include <private/bionic_asm.h>

ENTRY(prlimit64)
    mov     x8, __NR_prlimit64
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(prlimit64)

ALIAS_SYMBOL(prlimit, prlimit64)

#include <private/bionic_asm.h>

ENTRY(setgroups)
    mov     x8, __NR_setgroups
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setgroups)

#include <private/bionic_asm.h>

ENTRY(setpgid)
    mov     x8, __NR_setpgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setpgid)

#include <private/bionic_asm.h>

ENTRY(setregid)
    mov     x8, __NR_setregid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setregid)

#include <private/bionic_asm.h>

ENTRY(chroot)
    mov     x8, __NR_chroot
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(chroot)

#include <private/bionic_asm.h>

ENTRY(prctl)
    mov     x8, __NR_prctl
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(prctl)

#include <private/bionic_asm.h>

ENTRY(capget)
    mov     x8, __NR_capget
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(capget)

#include <private/bionic_asm.h>

ENTRY(capset)
    mov     x8, __NR_capset
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(capset)

#include <private/bionic_asm.h>

ENTRY(sigaltstack)
    mov     x8, __NR_sigaltstack
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sigaltstack)

#include <private/bionic_asm.h>

ENTRY(acct)
    mov     x8, __NR_acct
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(acct)

#include <private/bionic_asm.h>

ENTRY(read)
    mov     x8, __NR_read
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(read)

#include <private/bionic_asm.h>

ENTRY(write)
    mov     x8, __NR_write
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(write)

#include <private/bionic_asm.h>

ENTRY(pread64)
    mov     x8, __NR_pread64
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(pread64)

ALIAS_SYMBOL(pread, pread64)

#include <private/bionic_asm.h>

ENTRY(pwrite64)
    mov     x8, __NR_pwrite64
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(pwrite64)

ALIAS_SYMBOL(pwrite, pwrite64)

#include <private/bionic_asm.h>

ENTRY(preadv)
    mov     x8, __NR_preadv
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(preadv)

ALIAS_SYMBOL(preadv64, preadv)

#include <private/bionic_asm.h>

ENTRY(pwritev)
    mov     x8, __NR_pwritev
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(pwritev)

ALIAS_SYMBOL(pwritev64, pwritev)

#include <private/bionic_asm.h>

ENTRY(___close)
    mov     x8, __NR_close
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___close)
.hidden ___close

#include <private/bionic_asm.h>

ENTRY(__getpid)
    mov     x8, __NR_getpid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__getpid)
.hidden __getpid

#include <private/bionic_asm.h>

ENTRY(munmap)
    mov     x8, __NR_munmap
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(munmap)

#include <private/bionic_asm.h>

ENTRY(___mremap)
    mov     x8, __NR_mremap
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___mremap)
.hidden ___mremap

#include <private/bionic_asm.h>

ENTRY(msync)
    mov     x8, __NR_msync
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(msync)

#include <private/bionic_asm.h>

ENTRY(mprotect)
    mov     x8, __NR_mprotect
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mprotect)

#include <private/bionic_asm.h>

ENTRY(madvise)
    mov     x8, __NR_madvise
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(madvise)

#include <private/bionic_asm.h>

ENTRY(mlock)
    mov     x8, __NR_mlock
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mlock)

#include <private/bionic_asm.h>

ENTRY(munlock)
    mov     x8, __NR_munlock
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(munlock)

#include <private/bionic_asm.h>

ENTRY(mlockall)
    mov     x8, __NR_mlockall
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mlockall)

#include <private/bionic_asm.h>

ENTRY(munlockall)
    mov     x8, __NR_munlockall
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(munlockall)

#include <private/bionic_asm.h>

ENTRY(mincore)
    mov     x8, __NR_mincore
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mincore)

#include <private/bionic_asm.h>

ENTRY(__ioctl)
    mov     x8, __NR_ioctl
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__ioctl)
.hidden __ioctl

#include <private/bionic_asm.h>

ENTRY(readv)
    mov     x8, __NR_readv
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(readv)

#include <private/bionic_asm.h>

ENTRY(writev)
    mov     x8, __NR_writev
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(writev)

#include <private/bionic_asm.h>

ENTRY(fcntl)
    mov     x8, __NR_fcntl
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fcntl)

#include <private/bionic_asm.h>

ENTRY(flock)
    mov     x8, __NR_flock
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(flock)

#include <private/bionic_asm.h>

ENTRY(___fchmod)
    mov     x8, __NR_fchmod
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___fchmod)
.hidden ___fchmod

#include <private/bionic_asm.h>

ENTRY(dup)
    mov     x8, __NR_dup
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(dup)

#include <private/bionic_asm.h>

ENTRY(pipe2)
    mov     x8, __NR_pipe2
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(pipe2)

#include <private/bionic_asm.h>

ENTRY(dup3)
    mov     x8, __NR_dup3
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(dup3)

#include <private/bionic_asm.h>

ENTRY(fsync)
    mov     x8, __NR_fsync
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fsync)

#include <private/bionic_asm.h>

ENTRY(fdatasync)
    mov     x8, __NR_fdatasync
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fdatasync)

#include <private/bionic_asm.h>

ENTRY(fchown)
    mov     x8, __NR_fchown
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fchown)

#include <private/bionic_asm.h>

ENTRY(sync)
    mov     x8, __NR_sync
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sync)

#include <private/bionic_asm.h>

ENTRY(syncfs)
    mov     x8, __NR_syncfs
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(syncfs)

#include <private/bionic_asm.h>

ENTRY(___fsetxattr)
    mov     x8, __NR_fsetxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___fsetxattr)
.hidden ___fsetxattr

#include <private/bionic_asm.h>

ENTRY(___fgetxattr)
    mov     x8, __NR_fgetxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___fgetxattr)
.hidden ___fgetxattr

#include <private/bionic_asm.h>

ENTRY(___flistxattr)
    mov     x8, __NR_flistxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___flistxattr)
.hidden ___flistxattr

#include <private/bionic_asm.h>

ENTRY(fremovexattr)
    mov     x8, __NR_fremovexattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fremovexattr)

#include <private/bionic_asm.h>

ENTRY(__getdents64)
    mov     x8, __NR_getdents64
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__getdents64)
.hidden __getdents64

#include <private/bionic_asm.h>

ENTRY(__openat)
    mov     x8, __NR_openat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__openat)
.hidden __openat

#include <private/bionic_asm.h>

ENTRY(___faccessat)
    mov     x8, __NR_faccessat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___faccessat)
.hidden ___faccessat

#include <private/bionic_asm.h>

ENTRY(___fchmodat)
    mov     x8, __NR_fchmodat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___fchmodat)
.hidden ___fchmodat

#include <private/bionic_asm.h>

ENTRY(fchownat)
    mov     x8, __NR_fchownat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fchownat)

#include <private/bionic_asm.h>

ENTRY(fstatat64)
    mov     x8, __NR_newfstatat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fstatat64)

ALIAS_SYMBOL(fstatat, fstatat64)

#include <private/bionic_asm.h>

ENTRY(linkat)
    mov     x8, __NR_linkat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(linkat)

#include <private/bionic_asm.h>

ENTRY(mkdirat)
    mov     x8, __NR_mkdirat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mkdirat)

#include <private/bionic_asm.h>

ENTRY(mknodat)
    mov     x8, __NR_mknodat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mknodat)

#include <private/bionic_asm.h>

ENTRY(readlinkat)
    mov     x8, __NR_readlinkat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(readlinkat)

#include <private/bionic_asm.h>

ENTRY(renameat)
    mov     x8, __NR_renameat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(renameat)

#include <private/bionic_asm.h>

ENTRY(symlinkat)
    mov     x8, __NR_symlinkat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(symlinkat)

#include <private/bionic_asm.h>

ENTRY(unlinkat)
    mov     x8, __NR_unlinkat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(unlinkat)

#include <private/bionic_asm.h>

ENTRY(utimensat)
    mov     x8, __NR_utimensat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(utimensat)

#include <private/bionic_asm.h>

ENTRY(lseek)
    mov     x8, __NR_lseek
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(lseek)

ALIAS_SYMBOL(lseek64, lseek)

#include <private/bionic_asm.h>

ENTRY(ftruncate)
    mov     x8, __NR_ftruncate
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(ftruncate)

ALIAS_SYMBOL(ftruncate64, ftruncate)

#include <private/bionic_asm.h>

ENTRY(sendfile)
    mov     x8, __NR_sendfile
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sendfile)

ALIAS_SYMBOL(sendfile64, sendfile)

#include <private/bionic_asm.h>

ENTRY(truncate)
    mov     x8, __NR_truncate
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(truncate)

ALIAS_SYMBOL(truncate64, truncate)

#include <private/bionic_asm.h>

ENTRY(mmap)
    mov     x8, __NR_mmap
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mmap)

ALIAS_SYMBOL(mmap64, mmap)

#include <private/bionic_asm.h>

ENTRY(fallocate)
    mov     x8, __NR_fallocate
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fallocate)

ALIAS_SYMBOL(fallocate64, fallocate)

#include <private/bionic_asm.h>

ENTRY(__fadvise64)
    mov     x8, __NR_fadvise64
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__fadvise64)
.hidden __fadvise64

#include <private/bionic_asm.h>

ENTRY(__fstatfs)
    mov     x8, __NR_fstatfs
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__fstatfs)
.hidden __fstatfs

#include <private/bionic_asm.h>

ENTRY(__statfs)
    mov     x8, __NR_statfs
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__statfs)
.hidden __statfs

#include <private/bionic_asm.h>

ENTRY(fstat64)
    mov     x8, __NR_fstat
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fstat64)

ALIAS_SYMBOL(fstat, fstat64)

#include <private/bionic_asm.h>

ENTRY(chdir)
    mov     x8, __NR_chdir
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(chdir)

#include <private/bionic_asm.h>

ENTRY(mount)
    mov     x8, __NR_mount
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(mount)

#include <private/bionic_asm.h>

ENTRY(umount2)
    mov     x8, __NR_umount2
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(umount2)

#include <private/bionic_asm.h>

ENTRY(__getcwd)
    mov     x8, __NR_getcwd
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__getcwd)
.hidden __getcwd

#include <private/bionic_asm.h>

ENTRY(fchdir)
    mov     x8, __NR_fchdir
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(fchdir)

#include <private/bionic_asm.h>

ENTRY(setxattr)
    mov     x8, __NR_setxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setxattr)

#include <private/bionic_asm.h>

ENTRY(lsetxattr)
    mov     x8, __NR_lsetxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(lsetxattr)

#include <private/bionic_asm.h>

ENTRY(getxattr)
    mov     x8, __NR_getxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getxattr)

#include <private/bionic_asm.h>

ENTRY(lgetxattr)
    mov     x8, __NR_lgetxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(lgetxattr)

#include <private/bionic_asm.h>

ENTRY(listxattr)
    mov     x8, __NR_listxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(listxattr)

#include <private/bionic_asm.h>

ENTRY(llistxattr)
    mov     x8, __NR_llistxattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(llistxattr)

#include <private/bionic_asm.h>

ENTRY(removexattr)
    mov     x8, __NR_removexattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(removexattr)

#include <private/bionic_asm.h>

ENTRY(lremovexattr)
    mov     x8, __NR_lremovexattr
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(lremovexattr)

#include <private/bionic_asm.h>

ENTRY(swapon)
    mov     x8, __NR_swapon
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(swapon)

#include <private/bionic_asm.h>

ENTRY(swapoff)
    mov     x8, __NR_swapoff
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(swapoff)

#include <private/bionic_asm.h>

ENTRY(settimeofday)
    mov     x8, __NR_settimeofday
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(settimeofday)

#include <private/bionic_asm.h>

ENTRY(times)
    mov     x8, __NR_times
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(times)

#include <private/bionic_asm.h>

ENTRY(nanosleep)
    mov     x8, __NR_nanosleep
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(nanosleep)

#include <private/bionic_asm.h>

ENTRY(clock_settime)
    mov     x8, __NR_clock_settime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(clock_settime)

#include <private/bionic_asm.h>

ENTRY(___clock_nanosleep)
    mov     x8, __NR_clock_nanosleep
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___clock_nanosleep)
.hidden ___clock_nanosleep

#include <private/bionic_asm.h>

ENTRY(getitimer)
    mov     x8, __NR_getitimer
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getitimer)

#include <private/bionic_asm.h>

ENTRY(setitimer)
    mov     x8, __NR_setitimer
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setitimer)

#include <private/bionic_asm.h>

ENTRY(__timer_create)
    mov     x8, __NR_timer_create
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__timer_create)
.hidden __timer_create

#include <private/bionic_asm.h>

ENTRY(__timer_settime)
    mov     x8, __NR_timer_settime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__timer_settime)
.hidden __timer_settime

#include <private/bionic_asm.h>

ENTRY(__timer_gettime)
    mov     x8, __NR_timer_gettime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__timer_gettime)
.hidden __timer_gettime

#include <private/bionic_asm.h>

ENTRY(__timer_getoverrun)
    mov     x8, __NR_timer_getoverrun
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__timer_getoverrun)
.hidden __timer_getoverrun

#include <private/bionic_asm.h>

ENTRY(__timer_delete)
    mov     x8, __NR_timer_delete
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__timer_delete)
.hidden __timer_delete

#include <private/bionic_asm.h>

ENTRY(timerfd_create)
    mov     x8, __NR_timerfd_create
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(timerfd_create)

#include <private/bionic_asm.h>

ENTRY(timerfd_settime)
    mov     x8, __NR_timerfd_settime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(timerfd_settime)

#include <private/bionic_asm.h>

ENTRY(timerfd_gettime)
    mov     x8, __NR_timerfd_gettime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(timerfd_gettime)

#include <private/bionic_asm.h>

ENTRY(adjtimex)
    mov     x8, __NR_adjtimex
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(adjtimex)

#include <private/bionic_asm.h>

ENTRY(clock_adjtime)
    mov     x8, __NR_clock_adjtime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(clock_adjtime)

#include <private/bionic_asm.h>

ENTRY(__rt_sigaction)
    mov     x8, __NR_rt_sigaction
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__rt_sigaction)
.hidden __rt_sigaction

#include <private/bionic_asm.h>

ENTRY(__rt_sigpending)
    mov     x8, __NR_rt_sigpending
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__rt_sigpending)
.hidden __rt_sigpending

#include <private/bionic_asm.h>

ENTRY(__rt_sigprocmask)
    mov     x8, __NR_rt_sigprocmask
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__rt_sigprocmask)
.hidden __rt_sigprocmask

#include <private/bionic_asm.h>

ENTRY(__rt_sigsuspend)
    mov     x8, __NR_rt_sigsuspend
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__rt_sigsuspend)
.hidden __rt_sigsuspend

#include <private/bionic_asm.h>

ENTRY(__rt_sigtimedwait)
    mov     x8, __NR_rt_sigtimedwait
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__rt_sigtimedwait)
.hidden __rt_sigtimedwait

#include <private/bionic_asm.h>

ENTRY(___rt_sigqueueinfo)
    mov     x8, __NR_rt_sigqueueinfo
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(___rt_sigqueueinfo)
.hidden ___rt_sigqueueinfo

#include <private/bionic_asm.h>

ENTRY(__signalfd4)
    mov     x8, __NR_signalfd4
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__signalfd4)
.hidden __signalfd4

#include <private/bionic_asm.h>

ENTRY(__socket)
    mov     x8, __NR_socket
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__socket)
.hidden __socket

#include <private/bionic_asm.h>

ENTRY(socketpair)
    mov     x8, __NR_socketpair
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(socketpair)

#include <private/bionic_asm.h>

ENTRY(bind)
    mov     x8, __NR_bind
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(bind)

#include <private/bionic_asm.h>

ENTRY(__connect)
    mov     x8, __NR_connect
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__connect)
.hidden __connect

#include <private/bionic_asm.h>

ENTRY(listen)
    mov     x8, __NR_listen
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(listen)

#include <private/bionic_asm.h>

ENTRY(__accept4)
    mov     x8, __NR_accept4
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__accept4)
.hidden __accept4

#include <private/bionic_asm.h>

ENTRY(getsockname)
    mov     x8, __NR_getsockname
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getsockname)

#include <private/bionic_asm.h>

ENTRY(getpeername)
    mov     x8, __NR_getpeername
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getpeername)

#include <private/bionic_asm.h>

ENTRY(sendto)
    mov     x8, __NR_sendto
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sendto)

#include <private/bionic_asm.h>

ENTRY(recvfrom)
    mov     x8, __NR_recvfrom
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(recvfrom)

#include <private/bionic_asm.h>

ENTRY(shutdown)
    mov     x8, __NR_shutdown
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(shutdown)

#include <private/bionic_asm.h>

ENTRY(setsockopt)
    mov     x8, __NR_setsockopt
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setsockopt)

#include <private/bionic_asm.h>

ENTRY(getsockopt)
    mov     x8, __NR_getsockopt
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getsockopt)

#include <private/bionic_asm.h>

ENTRY(recvmsg)
    mov     x8, __NR_recvmsg
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(recvmsg)

#include <private/bionic_asm.h>

ENTRY(sendmsg)
    mov     x8, __NR_sendmsg
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sendmsg)

#include <private/bionic_asm.h>

ENTRY(recvmmsg)
    mov     x8, __NR_recvmmsg
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(recvmmsg)

#include <private/bionic_asm.h>

ENTRY(sendmmsg)
    mov     x8, __NR_sendmmsg
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sendmmsg)

#include <private/bionic_asm.h>

ENTRY(sched_setscheduler)
    mov     x8, __NR_sched_setscheduler
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_setscheduler)

#include <private/bionic_asm.h>

ENTRY(sched_getscheduler)
    mov     x8, __NR_sched_getscheduler
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_getscheduler)

#include <private/bionic_asm.h>

ENTRY(sched_yield)
    mov     x8, __NR_sched_yield
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_yield)

#include <private/bionic_asm.h>

ENTRY(sched_setparam)
    mov     x8, __NR_sched_setparam
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_setparam)

#include <private/bionic_asm.h>

ENTRY(sched_getparam)
    mov     x8, __NR_sched_getparam
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_getparam)

#include <private/bionic_asm.h>

ENTRY(sched_get_priority_max)
    mov     x8, __NR_sched_get_priority_max
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_get_priority_max)

#include <private/bionic_asm.h>

ENTRY(sched_get_priority_min)
    mov     x8, __NR_sched_get_priority_min
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_get_priority_min)

#include <private/bionic_asm.h>

ENTRY(sched_rr_get_interval)
    mov     x8, __NR_sched_rr_get_interval
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_rr_get_interval)

#include <private/bionic_asm.h>

ENTRY(sched_setaffinity)
    mov     x8, __NR_sched_setaffinity
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sched_setaffinity)

#include <private/bionic_asm.h>

ENTRY(setns)
    mov     x8, __NR_setns
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setns)

#include <private/bionic_asm.h>

ENTRY(unshare)
    mov     x8, __NR_unshare
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(unshare)

#include <private/bionic_asm.h>

ENTRY(__sched_getaffinity)
    mov     x8, __NR_sched_getaffinity
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__sched_getaffinity)
.hidden __sched_getaffinity

#include <private/bionic_asm.h>

ENTRY(__getcpu)
    mov     x8, __NR_getcpu
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__getcpu)
.hidden __getcpu

#include <private/bionic_asm.h>

ENTRY(uname)
    mov     x8, __NR_uname
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(uname)

#include <private/bionic_asm.h>

ENTRY(umask)
    mov     x8, __NR_umask
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(umask)

#include <private/bionic_asm.h>

ENTRY(__reboot)
    mov     x8, __NR_reboot
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__reboot)
.hidden __reboot

#include <private/bionic_asm.h>

ENTRY(init_module)
    mov     x8, __NR_init_module
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(init_module)

#include <private/bionic_asm.h>

ENTRY(delete_module)
    mov     x8, __NR_delete_module
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(delete_module)

#include <private/bionic_asm.h>

ENTRY(klogctl)
    mov     x8, __NR_syslog
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(klogctl)

#include <private/bionic_asm.h>

ENTRY(sysinfo)
    mov     x8, __NR_sysinfo
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sysinfo)

#include <private/bionic_asm.h>

ENTRY(personality)
    mov     x8, __NR_personality
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(personality)

#include <private/bionic_asm.h>

ENTRY(tee)
    mov     x8, __NR_tee
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(tee)

#include <private/bionic_asm.h>

ENTRY(splice)
    mov     x8, __NR_splice
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(splice)

#include <private/bionic_asm.h>

ENTRY(vmsplice)
    mov     x8, __NR_vmsplice
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(vmsplice)

#include <private/bionic_asm.h>

ENTRY(epoll_create1)
    mov     x8, __NR_epoll_create1
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(epoll_create1)

#include <private/bionic_asm.h>

ENTRY(epoll_ctl)
    mov     x8, __NR_epoll_ctl
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(epoll_ctl)

#include <private/bionic_asm.h>

ENTRY(__epoll_pwait)
    mov     x8, __NR_epoll_pwait
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__epoll_pwait)
.hidden __epoll_pwait

#include <private/bionic_asm.h>

ENTRY(eventfd)
    mov     x8, __NR_eventfd2
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(eventfd)

#include <private/bionic_asm.h>

ENTRY(_exit)
    mov     x8, __NR_exit_group
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(_exit)

ALIAS_SYMBOL(_Exit, _exit)

#include <private/bionic_asm.h>

ENTRY(__exit)
    mov     x8, __NR_exit
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__exit)
.hidden __exit

#include <private/bionic_asm.h>

ENTRY(inotify_init1)
    mov     x8, __NR_inotify_init1
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(inotify_init1)

#include <private/bionic_asm.h>

ENTRY(inotify_add_watch)
    mov     x8, __NR_inotify_add_watch
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(inotify_add_watch)

#include <private/bionic_asm.h>

ENTRY(inotify_rm_watch)
    mov     x8, __NR_inotify_rm_watch
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(inotify_rm_watch)

#include <private/bionic_asm.h>

ENTRY(__pselect6)
    mov     x8, __NR_pselect6
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__pselect6)
.hidden __pselect6

#include <private/bionic_asm.h>

ENTRY(__ppoll)
    mov     x8, __NR_ppoll
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__ppoll)
.hidden __ppoll

#include <private/bionic_asm.h>

ENTRY(process_vm_readv)
    mov     x8, __NR_process_vm_readv
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(process_vm_readv)

#include <private/bionic_asm.h>

ENTRY(process_vm_writev)
    mov     x8, __NR_process_vm_writev
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(process_vm_writev)

#include <private/bionic_asm.h>

ENTRY(quotactl)
    mov     x8, __NR_quotactl
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(quotactl)

#include <private/bionic_asm.h>

ENTRY(__set_tid_address)
    mov     x8, __NR_set_tid_address
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__set_tid_address)
.hidden __set_tid_address

#include <private/bionic_asm.h>

ENTRY(setfsgid)
    mov     x8, __NR_setfsgid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setfsgid)

#include <private/bionic_asm.h>

ENTRY(setfsuid)
    mov     x8, __NR_setfsuid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setfsuid)

#include <private/bionic_asm.h>

ENTRY(setdomainname)
    mov     x8, __NR_setdomainname
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(setdomainname)

#include <private/bionic_asm.h>

ENTRY(sethostname)
    mov     x8, __NR_sethostname
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(sethostname)

#include <private/bionic_asm.h>

ENTRY(__sync_file_range)
    mov     x8, __NR_sync_file_range
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__sync_file_range)
.hidden __sync_file_range

#include <private/bionic_asm.h>

ENTRY(wait4)
    mov     x8, __NR_wait4
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(wait4)

#include <private/bionic_asm.h>

ENTRY(__waitid)
    mov     x8, __NR_waitid
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__waitid)
.hidden __waitid

#include <private/bionic_asm.h>

ENTRY(__clock_getres)
    mov     x8, __NR_clock_getres
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__clock_getres)
.hidden __clock_getres

#include <private/bionic_asm.h>

ENTRY(__clock_gettime)
    mov     x8, __NR_clock_gettime
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__clock_gettime)
.hidden __clock_gettime

#include <private/bionic_asm.h>

ENTRY(__gettimeofday)
    mov     x8, __NR_gettimeofday
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(__gettimeofday)
.hidden __gettimeofday

#include <private/bionic_asm.h>

ENTRY(getrandom)
    mov     x8, __NR_getrandom
    svc     #0

    cmn     x0, #(MAX_ERRNO + 1)
    cneg    x0, x0, hi
    b.hi    __set_errno_internal

    ret
END(getrandom)
