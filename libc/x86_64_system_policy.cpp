// File autogenerated by genseccomp.py - edit at your peril!!

#include <errno.h>
#include <linux/filter.h>

#include "seccomp/seccomp_bpfs.h"
const sock_filter x86_64_system_filter[] = {
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 0, 0, 98),
    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 202, 96, 0),  // futex
    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 16, 95, 0),   // ioctl
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 179, 47, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 89, 23, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 35, 11, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 17, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 8, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 5, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 4, 89, 88),  // read|write|open|close
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 6, 88, 87),  // fstat
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 16, 87,
             86),  // lseek|mmap|mprotect|munmap|brk|rt_sigaction|rt_sigprocmask|rt_sigreturn
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 32, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 24, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 21, 84, 83),  // pread64|pwrite64|readv|writev
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 29, 83, 82),  // sched_yield|mremap|msync|mincore|madvise
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 33, 82, 81),  // dup
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 58, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 44, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 38, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 37, 78, 77),  // nanosleep|getitimer
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 43, 77, 76),  // setitimer|getpid|sendfile|socket|connect
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 57, 76,
        75),  // sendto|recvfrom|sendmsg|recvmsg|shutdown|bind|listen|getsockname|getpeername|socketpair|setsockopt|getsockopt|clone
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 79, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 72, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 64, 73, 72),  // vfork|execve|exit|wait4|kill|uname
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 78, 72,
             71),  // fcntl|flock|fsync|fdatasync|truncate|ftruncate
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 82, 71, 70),  // getcwd|chdir|fchdir
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 137, 11, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 95, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 93, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 91, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 90, 66, 65),  // readlink
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 92, 65, 64),  // fchmod
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 94, 64, 63),  // fchown
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 135, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 112, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 111, 61,
        60),  // umask|gettimeofday|getrlimit|getrusage|sysinfo|times|ptrace|getuid|syslog|getgid|setuid|setgid|geteuid|getegid|setpgid|getppid
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 132, 60,
        59),  // setsid|setreuid|setregid|getgroups|setgroups|setresuid|getresuid|setresgid|getresgid|getpgid|setfsuid|setfsgid|getsid|capget|capset|rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|sigaltstack
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 136, 59, 58),  // personality
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 157, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 155, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 140, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 139, 55, 54),  // statfs|fstatfs
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 153, 54,
        53),  // getpriority|setpriority|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|mlock|munlock|mlockall|munlockall
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 156, 53, 52),  // pivot_root
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 175, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 169, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 167, 50,
        49),  // prctl|arch_prctl|adjtimex|setrlimit|chroot|sync|acct|settimeofday|mount|umount2
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 172, 49, 48),  // reboot|sethostname|setdomainname
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 177, 48, 47),  // init_module|delete_module
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 275, 23, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 233, 11, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 206, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 203, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 186, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 180, 42, 41),  // quotactl
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 201, 41,
        40),  // gettid|readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 205, 40, 39),  // sched_setaffinity|sched_getaffinity
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 221, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 217, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 211, 37,
             36),  // io_setup|io_destroy|io_getevents|io_submit|io_cancel
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 220, 36, 35),  // getdents64|set_tid_address|restart_syscall
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 232, 35,
        34),  // fadvise64|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete|clock_settime|clock_gettime|clock_getres|clock_nanosleep|exit_group
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 254, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 251, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 247, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 235, 31, 30),  // epoll_ctl|tgkill
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 248, 30, 29),  // waitid
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 253, 29, 28),  // ioprio_set|ioprio_get
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 262, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 257, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 256, 26, 25),  // inotify_add_watch|inotify_rm_watch
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 261, 25, 24),  // openat|mkdirat|mknodat|fchownat
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 273, 24,
        23),  // newfstatat|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 314, 11, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 285, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 283, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 280, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 279, 19, 18),  // splice|tee|sync_file_range|vmsplice
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 282, 18, 17),  // utimensat|epoll_pwait
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 284, 17, 16),  // timerfd_create
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 305, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 302, 1, 0),
    BPF_JUMP(
        BPF_JMP | BPF_JGE | BPF_K, 300, 14,
        13),  // fallocate|timerfd_settime|timerfd_gettime|accept4|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev|rt_tgsigqueueinfo|perf_event_open|recvmmsg
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 303, 13, 12),  // prlimit64
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 312, 12,
             11),  // clock_adjtime|syncfs|sendmmsg|setns|getcpu|process_vm_readv|process_vm_writev
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 332, 5, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 324, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 321, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 320, 8,
             7),  // sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 323, 7, 6),  // bpf|execveat
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 329, 6,
             5),  // membarrier|mlock2|copy_file_range|preadv2|pwritev2
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 440, 3, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 434, 1, 0),
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 333, 3, 2),  // statx
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 435, 2, 1),  // pidfd_open
    BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 441, 1, 0),  // process_madvise
    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
};

const size_t x86_64_system_filter_size = sizeof(x86_64_system_filter) / sizeof(struct sock_filter);
