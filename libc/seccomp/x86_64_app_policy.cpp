// Autogenerated file - edit at your peril!!

#include <linux/filter.h>
#include <errno.h>

#include "seccomp_bpfs.h"
const sock_filter x86_64_app_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 0, 0, 102),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 140, 51, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 91, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 35, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 16, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 3, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 2, 95, 94), //read|write
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 4, 94, 93), //close
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 8, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 6, 92, 91), //fstat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 15, 91, 90), //lseek|mmap|mprotect|munmap|brk|rt_sigaction|rt_sigprocmask
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 32, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 24, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 21, 88, 87), //ioctl|pread64|pwrite64|readv|writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 29, 87, 86), //sched_yield|mremap|msync|mincore|madvise
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 33, 86, 85), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 58, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 44, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 38, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 37, 82, 81), //nanosleep|getitimer
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 43, 81, 80), //setitimer|getpid|sendfile|socket|connect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 56, 80, 79), //sendto|recvfrom|sendmsg|recvmsg|shutdown|bind|listen|getsockname|getpeername|socketpair|setsockopt|getsockopt
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 79, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 72, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 64, 77, 76), //vfork|execve|exit|wait4|kill|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 78, 76, 75), //fcntl|flock|fsync|fdatasync|truncate|ftruncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 82, 75, 74), //getcwd|chdir|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 118, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 107, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 95, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 93, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 92, 70, 69), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 94, 69, 68), //fchown
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 104, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 103, 67, 66), //umask|gettimeofday|getrlimit|getrusage|sysinfo|times|ptrace|getuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 105, 66, 65), //getgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 114, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 112, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 111, 63, 62), //geteuid|getegid|setpgid|getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 113, 62, 61), //setsid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 116, 61, 60), //setregid|getgroups
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 127, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 124, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 120, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 119, 57, 56), //getresuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 122, 56, 55), //getresgid|getpgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 126, 55, 54), //getsid|capget
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 137, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 135, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 132, 52, 51), //rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|sigaltstack
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 136, 51, 50), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 139, 50, 49), //statfs|fstatfs
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 257, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 217, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 179, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 160, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 157, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 153, 44, 43), //getpriority|setpriority|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|mlock|munlock|mlockall|munlockall
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 159, 43, 42), //prctl|arch_prctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 162, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 161, 41, 40), //setrlimit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 163, 40, 39), //sync
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 203, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 187, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 180, 37, 36), //quotactl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 201, 36, 35), //readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 205, 35, 34), //sched_setaffinity|sched_getaffinity
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 233, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 228, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 221, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 219, 31, 30), //getdents64|set_tid_address
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 227, 30, 29), //fadvise64|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 232, 29, 28), //clock_gettime|clock_getres|clock_nanosleep|exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 254, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 247, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 235, 26, 25), //epoll_ctl|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 248, 25, 24), //waitid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 256, 24, 23), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 298, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 280, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 275, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 262, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 261, 19, 18), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 273, 18, 17), //newfstatat|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 279, 17, 16), //splice|tee|sync_file_range|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 285, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 283, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 282, 14, 13), //utimensat|epoll_pwait
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 284, 13, 12), //timerfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 297, 12, 11), //fallocate|timerfd_settime|timerfd_gettime|accept4|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 314, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 306, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 302, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 300, 8, 7), //perf_event_open|recvmmsg
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 303, 7, 6), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 312, 6, 5), //syncfs|sendmmsg|setns|getcpu|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 325, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 322, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 320, 3, 2), //sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 323, 2, 1), //execveat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 329, 1, 0), //mlock2|copy_file_range|preadv2|pwritev2
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

const size_t x86_64_app_filter_size = sizeof(x86_64_app_filter) / sizeof(struct sock_filter);
