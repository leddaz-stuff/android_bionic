// Autogenerated file - edit at your peril!!

#include <linux/filter.h>
#include <errno.h>

#include "seccomp_bpfs.h"
const sock_filter mips64_app_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5000, 0, 100),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5153, 49, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5093, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5043, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5031, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5008, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5003, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5002, 93, 92), //read|write
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5004, 92, 91), //close
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5023, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5020, 90, 89), //lseek|mmap|mprotect|munmap|brk|rt_sigaction|rt_sigprocmask|ioctl|pread64|pwrite64|readv|writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5028, 89, 88), //sched_yield|mremap|msync|mincore|madvise
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5038, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5034, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5032, 86, 85), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5037, 85, 84), //nanosleep|getitimer|setitimer
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5042, 84, 83), //getpid|sendfile|socket|connect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5077, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5070, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5057, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5055, 80, 79), //sendto|recvfrom|sendmsg|recvmsg|shutdown|bind|listen|getsockname|getpeername|socketpair|setsockopt|getsockopt
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5062, 79, 78), //execve|exit|wait4|kill|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5076, 78, 77), //fcntl|flock|fsync|fdatasync|truncate|ftruncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5091, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5089, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5080, 75, 74), //getcwd|chdir|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5090, 74, 73), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5092, 73, 72), //fchown
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5118, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5110, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5105, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5102, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5101, 68, 67), //umask|gettimeofday|getrlimit|getrusage|sysinfo|times|ptrace|getuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5103, 67, 66), //getgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5109, 66, 65), //geteuid|getegid|setpgid|getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5116, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5112, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5111, 63, 62), //setsid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5114, 62, 61), //setregid|getgroups
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5117, 61, 60), //getresuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5132, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5125, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5122, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5120, 57, 56), //getresgid|getpgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5124, 56, 55), //getsid|capget
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5130, 55, 54), //rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|sigaltstack
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5137, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5134, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5133, 52, 51), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5136, 51, 50), //statfs|fstatfs
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5150, 50, 49), //getpriority|setpriority|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|mlock|munlock|mlockall|munlockall
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5244, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5208, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5179, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5157, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5155, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5154, 44, 43), //prctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5156, 43, 42), //setrlimit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5172, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5158, 41, 40), //sync
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5173, 40, 39), //quotactl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5205, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5195, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5193, 37, 36), //readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5197, 36, 35), //sched_setaffinity|sched_getaffinity
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5206, 35, 34), //exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5222, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5215, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5212, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5209, 31, 30), //epoll_ctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5213, 30, 29), //set_tid_address
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5221, 29, 28), //fadvise64|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5242, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5237, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5226, 26, 25), //clock_gettime|clock_getres|clock_nanosleep|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5238, 25, 24), //waitid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5243, 24, 23), //set_thread_area
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5292, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5271, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5253, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5247, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5246, 19, 18), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5251, 18, 17), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5267, 17, 16), //unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare|splice|sync_file_range|tee|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5279, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5275, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5273, 14, 13), //getcpu|epoll_pwait
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5276, 13, 12), //utimensat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5291, 12, 11), //fallocate|timerfd_create|timerfd_gettime|timerfd_settime|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5308, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5301, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5297, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5295, 8, 7), //perf_event_open|accept4|recvmmsg
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5298, 7, 6), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5306, 6, 5), //syncfs|sendmmsg|setns|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5319, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5316, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5315, 3, 2), //getdents64|sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5317, 2, 1), //execveat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5323, 1, 0), //mlock2|copy_file_range|preadv2|pwritev2
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

const size_t mips64_app_filter_size = sizeof(mips64_app_filter) / sizeof(struct sock_filter);
