// Autogenerated file - edit at your peril!!

#include <linux/filter.h>
#include <errno.h>

#include "seccomp_bpfs.h"
const sock_filter mips64_app_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5000, 0, 98),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5153, 49, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5093, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5043, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5031, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5008, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5003, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5002, 91, 90), //read|write
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5004, 90, 89), //close
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5023, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5020, 88, 87), //lseek|mmap|mprotect|munmap|brk|rt_sigaction|rt_sigprocmask|ioctl|pread64|pwrite64|readv|writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5028, 87, 86), //sched_yield|mremap|msync|mincore|madvise
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5038, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5034, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5032, 84, 83), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5037, 83, 82), //nanosleep|getitimer|setitimer
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5042, 82, 81), //getpid|sendfile|socket|connect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5077, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5070, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5057, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5055, 78, 77), //sendto|recvfrom|sendmsg|recvmsg|shutdown|bind|listen|getsockname|getpeername|socketpair|setsockopt|getsockopt
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5062, 77, 76), //execve|exit|wait4|kill|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5076, 76, 75), //fcntl|flock|fsync|fdatasync|truncate|ftruncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5091, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5089, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5080, 73, 72), //getcwd|chdir|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5090, 72, 71), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5092, 71, 70), //fchown
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5118, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5110, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5105, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5102, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5101, 66, 65), //umask|gettimeofday|getrlimit|getrusage|sysinfo|times|ptrace|getuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5103, 65, 64), //getgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5109, 64, 63), //geteuid|getegid|setpgid|getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5116, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5112, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5111, 61, 60), //setsid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5114, 60, 59), //setregid|getgroups
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5117, 59, 58), //getresuid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5132, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5125, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5122, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5120, 55, 54), //getresgid|getpgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5124, 54, 53), //getsid|capget
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5130, 53, 52), //rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|sigaltstack
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5137, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5134, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5133, 50, 49), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5136, 49, 48), //statfs|fstatfs
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5150, 48, 47), //getpriority|setpriority|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|mlock|munlock|mlockall|munlockall
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5242, 23, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5205, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5172, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5157, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5155, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5154, 42, 41), //prctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5156, 41, 40), //setrlimit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5158, 40, 39), //sync
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5195, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5179, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5173, 37, 36), //quotactl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5192, 36, 35), //readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5197, 35, 34), //sched_setaffinity|sched_getaffinity
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5215, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5212, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5208, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5206, 31, 30), //exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5209, 30, 29), //epoll_ctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5213, 29, 28), //set_tid_address
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5237, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5222, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5221, 26, 25), //fadvise64|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5226, 25, 24), //clock_gettime|clock_getres|clock_nanosleep|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5238, 24, 23), //waitid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5279, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5253, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5247, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5244, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5243, 19, 18), //set_thread_area
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5246, 18, 17), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5251, 17, 16), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5275, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5271, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5267, 14, 13), //unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare|splice|sync_file_range|tee|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5273, 13, 12), //getcpu|epoll_pwait
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5276, 12, 11), //utimensat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5301, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5297, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5293, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5291, 8, 7), //fallocate|timerfd_create|timerfd_gettime|timerfd_settime|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5295, 7, 6), //accept4|recvmmsg
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5298, 6, 5), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5313, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5308, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5306, 3, 2), //syncfs|sendmmsg|setns|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5309, 2, 1), //getdents64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 5314, 1, 0), //getrandom
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

const size_t mips64_app_filter_size = sizeof(mips64_app_filter) / sizeof(struct sock_filter);
