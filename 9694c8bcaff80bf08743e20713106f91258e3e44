{
  "comments": [
    {
      "key": {
        "uuid": "dca43989_09686d79",
        "filename": "libc/dns/nameser/ns_samedomain.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T03:51:10Z",
      "side": 1,
      "message": "do we need to define this?",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cc2511e_d6243a96",
        "filename": "libc/dns/nameser/ns_samedomain.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T13:05:58Z",
      "side": 1,
      "message": "netbsd pathces claims that this is not usually build in libc. As we don\u0027t define _LIBRESOLV but we do define _LIBC (based on make showcommands) the statements are equivalent.\n\nI\u0027m not sure why it was done like this. IMO we can define these in libc.",
      "parentUuid": "dca43989_09686d79",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c7df19f_fd76e9e6",
        "filename": "libc/dns/nameser/ns_samedomain.c",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T03:51:10Z",
      "side": 1,
      "message": "and this?",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcce5d4a_753d3aa1",
        "filename": "libc/dns/nameser/ns_samedomain.c",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T13:05:58Z",
      "side": 1,
      "message": "_LIBC is defined for us",
      "parentUuid": "1c7df19f_fd76e9e6",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cc2511e_730f9801",
        "filename": "libc/include/arpa/nameser.h",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-05T16:14:32Z",
      "side": 1,
      "message": "netbsd doesn\u0027t provide an implementation by default for these function. However it does implement them as part of the libbind library. Should we maybe port the implementation from there? or just remove them? Thoughts?",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 661,
        "endChar": 20
      },
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dca43989_895bfde4",
        "filename": "libc/include/arpa/nameser.h",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T03:51:10Z",
      "side": 1,
      "message": "may as well just leave them as they are until they cause trouble. no one\u0027s asked for them so far.",
      "parentUuid": "1cc2511e_730f9801",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 661,
        "endChar": 20
      },
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcce5d4a_b542c227",
        "filename": "libc/include/arpa/nameser.h",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T13:05:58Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "dca43989_895bfde4",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 661,
        "endChar": 20
      },
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca73d88_93a9e674",
        "filename": "libc/include/arpa/nameser.h",
        "patchSetId": 1
      },
      "lineNbr": 668,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T03:51:10Z",
      "side": 1,
      "message": "remove this? (or move it into the private headers?)",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dccb593b_343a56e1",
        "filename": "libc/include/arpa/nameser.h",
        "patchSetId": 1
      },
      "lineNbr": 668,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T13:05:58Z",
      "side": 1,
      "message": "removed. this is not actually used. the only ref is in res_cache.c where is undefined and then defined again.",
      "parentUuid": "fca73d88_93a9e674",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca73d88_b3a662a0",
        "filename": "libc/include/arpa/nameser_compat.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T03:51:10Z",
      "side": 1,
      "message": "is __linux defined for us?",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cc2511e_b62bae61",
        "filename": "libc/include/arpa/nameser_compat.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T13:05:58Z",
      "side": 1,
      "message": "no, I restored the include. Is there an agreement how to handle the ifdefs during sync ups if we don\u0027t define the flags or we don\u0027t care in general? Remove or live them be for easier updates?",
      "parentUuid": "fca73d88_b3a662a0",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca73d88_0eadcc7f",
        "filename": "libc/include/arpa/nameser_compat.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-03-06T18:02:59Z",
      "side": 1,
      "message": "i don\u0027t know what you mean by \"restored the include\". this looks the same as my copy of upstream to me.\n\nwhat i was asking here is basically \"it looks like we used to have #include \u003cendian.h\u003e before the BYTE_ORDER check; was that something Android added, and is it necessary?\". obviously, if we have __linux defined, we\u0027ll get the upstream #include and everything\u0027s fine.\n\nat least L90 means things will blow up otherwise, but i\u0027m curious whether you now have to #include \u003cendian.h\u003e before this. (arm and aarch64 aren\u0027t on the little-endian list starting on L57.)",
      "parentUuid": "1cc2511e_b62bae61",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcce5d4a_7543fa83",
        "filename": "libc/include/arpa/nameser_compat.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-03-06T18:22:56Z",
      "side": 1,
      "message": "hmm, change was not uploaded. I will upload again.\n\nbasically I added #include \u003cendian.h\u003e again. It was needed because of the same reason you gave (e.g. arm is not in the endian list below). Including \u003cendian.h\u003e in the beginning before the check will actually define BYTE_ORDER so the entire check will be skip.\n\nWe can alternatively define __linux and get the same result if you think it\u0027s better. Though it\u0027s just one use and we also have __linux__ somewhere else (I didn\u0027t check what we use for yet).",
      "parentUuid": "fca73d88_0eadcc7f",
      "revId": "9694c8bcaff80bf08743e20713106f91258e3e44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}