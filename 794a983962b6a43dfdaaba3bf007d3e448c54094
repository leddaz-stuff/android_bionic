{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7b107fb5_43cb9b38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-10T23:40:49Z",
      "side": 1,
      "message": "otherwise lgtm.",
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b12e933a_b5271278",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-10T23:40:49Z",
      "side": 1,
      "message": "you can\u0027t pass a null buffer to read() or write().",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed001398_dc7d7d88",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-01-14T00:22:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b12e933a_b5271278",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cf3015_ffaad1d3",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2023-01-19T20:07:54Z",
      "side": 1,
      "message": "Is that true? https://man7.org/linux/man-pages/man2/read.2.html and https://man7.org/linux/man-pages/man2/write.2.html both say something like:\n\n```\nIf count is zero, read() may detect the errors described below.\nIn the absence of any errors, or if read() does not check for\nerrors, a read() with a count of 0 returns zero and has no other\neffects.\n```\n\nWhich would imply that this is `_Null_unspecified`?\n\nAre bionic or our kernel configs altering that behavior in some way I\u0027m not finding? We don\u0027t have any tests that cover that behavior so I can\u0027t tell from code search.",
      "parentUuid": "ed001398_dc7d7d88",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c473e7ff_e6d23024",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2023-01-19T20:12:01Z",
      "side": 1,
      "message": "Sorry, only `read` says that. `write` doesn\u0027t seem to say anything about how it behaves for a zero size null buffer.",
      "parentUuid": "c0cf3015_ffaad1d3",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf8b7a30_e3c42020",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2023-01-19T20:16:04Z",
      "side": 1,
      "message": "POSIX has an opinion for write though:\n\n\u003e Before any action described below is taken, and if nbyte is zero and the file is a regular file, the write() function may detect and return errors as described below. In the absence of errors, or if error detection is not performed, the write() function shall return zero and have no other results. If nbyte is zero and the file is not a regular file, the results are unspecified.\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html",
      "parentUuid": "c473e7ff_e6d23024",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de10c477_a577deb4",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-19T21:00:39Z",
      "side": 1,
      "message": "yeah, i\u0027m not aware of any use for zero-length _reads_ but zero-length _writes_ are visible to device drivers, which may choose to act on them.\n\nif we have more than a couple of these (where we can just explicitly silence the warning with a comment explaining why we need a zero-length write), we can either just back this out completely, or talk to gbiv@ about whether it\u0027s possible to express a fancy `_FORTIFY_SOURCE` style check of \"well, it\u0027s okay for __buf to be nullptr iff __count is 0\"...",
      "parentUuid": "cf8b7a30_e3c42020",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1466ae1c_221d662c",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2023-01-19T21:10:26Z",
      "side": 1,
      "message": "https://cs.android.com/android/platform/superproject/+/master:frameworks/av/media/mtp/MtpFfsHandle.cpp;l\u003d363;drc\u003d39a21d0d118d8f36e8d6b6f02ebb1ca2cd7bf7da cares for read as well.\n\nWe don\u0027t know how many of these there will be, since this is in the NDK. Probably not a common for apps to be dealing with those devices, but who knows what code they depend on? IMO we should make this `_Null_unspecified`, and follow up with fortify later.",
      "parentUuid": "de10c477_a577deb4",
      "range": {
        "startLine": 238,
        "startChar": 29,
        "endLine": 238,
        "endChar": 38
      },
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8b326a4_1e079532",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-10T23:40:49Z",
      "side": 1,
      "message": "(or equivalents.)",
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d7f90d6_9a5eb01b",
        "filename": "libc/include/unistd.h",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-01-14T00:22:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8b326a4_1e079532",
      "revId": "794a983962b6a43dfdaaba3bf007d3e448c54094",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}