{
  "comments": [
    {
      "key": {
        "uuid": "8cd9b5a1_266bc78f",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "can\u0027t happen, so just remove all this.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 6
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550e4d76_c3c2f77d",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Removed - for education, why can\u0027t this happen? (Who did the checking?)",
      "parentUuid": "8cd9b5a1_266bc78f",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 6
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da7ce886_4d93fd8b",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-03T15:59:43Z",
      "side": 1,
      "message": "Android only supports arm/arm64/x86/x86-64, and adding another architecture would be a massive undertaking. (and would pretty much require than any new architecture was \"sane\" --- basically mostly the same as an existing one, probably arm64 because that\u0027s the new \"clean\" one where all the Linux stuff comes from asm-generic and there are no weird special case system calls that are slightly different etc.)\n\nif this code was different for each architecture, or different for the two arms than for the two x86es, #if would make more sense. but given that they\u0027re all the same, there\u0027s really no information conveyed here.",
      "parentUuid": "550e4d76_c3c2f77d",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 6
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3e91b3d_0da6c409",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "https://sourceware.org/glibc/wiki/ThreadPropertiesAPI describes this as \"Less attractive alternative... This approach is problematic for multiple reasons\".\n\ndocument the reasons for using this API rather than the other one?",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6c68ee0_852f1591",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Added a second proposal to have a on_creation and on_destruction callbacks.\nPrefer NOT doing the proposal that requires wrapping/interposing the functions because that seems a bit more work for the tools.\n\nPlease let me know which one is preferred.",
      "parentUuid": "b3e91b3d_0da6c409",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18054492_a7f6ac4e",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-03T15:59:43Z",
      "side": 1,
      "message": "(i\u0027ll defer to eugenis@ as the expert on that.)",
      "parentUuid": "e6c68ee0_852f1591",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "658975b7_1bda00c9",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-03-04T00:25:10Z",
      "side": 1,
      "message": "I agree that interception should not be required to use this API.\n\nAn API based on callbacks is not going to work for a leak detector that is not \"online\". I.e. leak detection does not necessarily require any actions on thread creation, or on dlopen - it should be doable after the fact, by inspection of a frozen process memory + registers. I believe that\u0027s how libmemunreachable works.\n\nIt looks like __libc_iterate_dynamic_tls is the only viable choice. But it needs to support listing dtls for any thread, not just the current one.\n\nLeakSanitizer obtains a pointer to an internal list of dtls blocks during thread creation. This list is later updated by the interceptors when new libraries are loaded. This API will let us throw away all that code and simply query the list after the fact.\n\nA complication: LSan does not have a pthread_t for the thread it request info about. It has a pid and can ptrace any registers out of it, so it can reach TLS_SLOT_THREAD_ID, but that\u0027s becoming a little bionic specific. Not sure if there is a better solution though.\n\nOn the contrary, TSan needs to know about dtls mappings online in order to reset their access history on reuse. Does reuse even happen in Android? Anyway, this is not a thing at this point, and we may end up deploying a watchpoint-based race detection tool instead that would not care about dtls. @dvyukov to comment.\n\n\nAs for AS-safety, locks that LSan can acquire before freezing the process are OK (ex.: we grab the loader lock already), but it\u0027s better if this function did not take anything it does not strictly need.",
      "parentUuid": "18054492_a7f6ac4e",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0345da16_12033d52",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1056155
      },
      "writtenOn": "2020-03-04T09:58:36Z",
      "side": 1,
      "message": "\u003e On the contrary, TSan needs to know about dtls mappings online in order to reset their access history on reuse. Does reuse even happen in Android? Anyway, this is not a thing at this point, and we may end up deploying a watchpoint-based race detection tool instead that would not care about dtls. @dvyukov to comment.\n\nOh, I was added only for this...\n\nLooking at the current uses in tsan runtime, we need to know tls ranges for the current thread during thread creation/destruction:\n\nrtl$ grep -C 3 tls tsan_rtl_thread.cpp\n                 ThreadType thread_type) {\n  uptr stk_addr \u003d 0;\n  uptr stk_size \u003d 0;\n  uptr tls_addr \u003d 0;\n  uptr tls_size \u003d 0;\n#if !SANITIZER_GO\n  if (thread_type !\u003d ThreadType::Fiber)\n    GetThreadStackAndTls(tid \u003d\u003d 0, \u0026stk_addr, \u0026stk_size, \u0026tls_addr, \u0026tls_size);\n\n  if (tid) {\n    if (stk_addr \u0026\u0026 stk_size)\n      MemoryRangeImitateWrite(thr, /*pc\u003d*/ 1, stk_addr, stk_size);\n\n    if (tls_addr \u0026\u0026 tls_size) ImitateTlsWrite(thr, tls_addr, tls_size);\n  }\n#endif\n--\n  StatInc(thr, StatThreadFinish);\n  if (thr-\u003estk_addr \u0026\u0026 thr-\u003estk_size)\n    DontNeedShadowFor(thr-\u003estk_addr, thr-\u003estk_size);\n  if (thr-\u003etls_addr \u0026\u0026 thr-\u003etls_size)\n    DontNeedShadowFor(thr-\u003etls_addr, thr-\u003etls_size);\n  thr-\u003eis_dead \u003d true;\n  ctx-\u003ethread_registry-\u003eFinishThread(thr-\u003etid);\n}\n\n\nIdeally, we probably need to do MemoryRangeImitateWrite for newly created DLTS regions as well. But that\u0027s not strictly necessary.",
      "parentUuid": "658975b7_1bda00c9",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c04131c_3a9bf02a",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "needs ** to start. copy the style of one of the existing comments. (you\u0027ll want the @file/@brief above too.)",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e1425b4_67c0a73c",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c04131c_3a9bf02a",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59e44594_ef51f9f5",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "should this be void?",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0159943_698fd959",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Do we not need a way to communicate failure?",
      "parentUuid": "59e44594_ef51f9f5",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47862ffc_23bc823c",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-03T15:59:43Z",
      "side": 1,
      "message": "is failure likely, and can the caller do anything useful on failure? my assumption is \"1. no, this should never happen. 2. no, it can only abort\", in which case we may as well just make this function void and have it abort if it fails.\n\nif either of those assumptions are wrong, returning a status would make sense.",
      "parentUuid": "c0159943_698fd959",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65338729_a76eefbb",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 44,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "avoid abbreviations. s/beg/begin/. also all libc argument names should start __.",
      "range": {
        "startLine": 44,
        "startChar": 45,
        "endLine": 44,
        "endChar": 48
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "715c8ffc_49b5bacf",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 44,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65338729_a76eefbb",
      "range": {
        "startLine": 44,
        "startChar": 45,
        "endLine": 44,
        "endChar": 48
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "528b2426_962f2d05",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "type*\n\ndoc comment?",
      "range": {
        "startLine": 46,
        "startChar": 32,
        "endLine": 46,
        "endChar": 38
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8485925_6f451086",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-03-03T04:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "528b2426_962f2d05",
      "range": {
        "startLine": 46,
        "startChar": 32,
        "endLine": 46,
        "endChar": 38
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbd26d5b_03f08c0e",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "is it? it takes a lock.",
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4c60d9_2744981f",
        "filename": "libc/include/sys/thread_properties.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-25T21:36:49Z",
      "side": 1,
      "message": "also void?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 3
      },
      "revId": "9d1b6b4532cea1631c4f1fecd3189d3099173e8a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}