{
  "comments": [
    {
      "key": {
        "uuid": "7f8344c5_48e41349",
        "filename": "libc/bionic/pthread_rwlock.cpp",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-05-21T18:27:37Z",
      "side": 1,
      "message": "The issue is that this is a racing read of the state.  Those are officially disallowed by language/pthreads standards.  In a better world, this would say rwlock-\u003estate.load(memory_order_relaxed).  Currently I was only suggesting a comment suggesting this as a future fix.\n\nSo long as state is volatile, I think it should work in practice.  In the world of language standards it doesn\u0027t, because there is no guarantee that state will be loaded atomically, and we could have word-tearing issues.\n\nIf we changed the field to atomic, without an explicit load(), things would work slowly but correctly.  That defaults to sequentially consistent.\n\nSimilar comments apply to the corresponding code below.",
      "range": {
        "startLine": 134,
        "startChar": 5,
        "endLine": 134,
        "endChar": 37
      },
      "revId": "d9fa8509dfdcc3227ea481a99fc0326e3024b7c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f8344c5_88aa1b5f",
        "filename": "libc/bionic/pthread_rwlock.cpp",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-05-21T18:27:37Z",
      "side": 1,
      "message": "E.g. https://gcc.gnu.org/onlinedocs/gcc-4.6.4/gcc/Atomic-Builtins.html doesn\u0027t say anything about spurious failures, and that\u0027s used to implement these.  So I think it can\u0027t fail.  I would have been tempted to check that.  But as it stands, any failure would result in an easily recognizable deadlock, so it looks OK to me as is.",
      "range": {
        "startLine": 264,
        "startChar": 6,
        "endLine": 264,
        "endChar": 76
      },
      "revId": "d9fa8509dfdcc3227ea481a99fc0326e3024b7c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}