{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "08da3533_042d5aad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2024-05-14T19:57:35Z",
      "side": 1,
      "message": "This is a more generic version of the workaround. It looks like this might just happen once in a while, but I\u0027m talking with eugenis to verify that this is not a problem.",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f1bb173_1061cbb5",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-14T21:34:46Z",
      "side": 1,
      "message": "we only call this with hwasan_enabled, why do we also have a separate ifdef here?",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 62
      },
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e559d60b_9fe69285",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-05-14T21:17:05Z",
      "side": 1,
      "message": "is it specifically only 0x80? should we just have an `if` for that value? (and a comment explicitly pointing it out.)\n\n+fmayer for why 0x80 would be special...",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072d2b92_8cfada82",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2024-05-14T21:20:57Z",
      "side": 1,
      "message": "Actually, I misspoke originally. The bad value is 0x08, but I suspect that it\u0027s not the only bad value. That\u0027s why I removed the check for that particular tag because I think a new clang could cause the \"bad\" value to change. I\u0027m talking with eugenis about this to see if this is just a thing that can happen or not. I\u0027ll add others to that e-mail to see if they have ideas about what is going on.",
      "parentUuid": "e559d60b_9fe69285",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "087c8659_f8728deb",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-14T21:34:46Z",
      "side": 1,
      "message": "I think: 0x8 seems like something around short granules is happening. The `char*` is 8 bytes, the stack slot for it is over-aligned to 16. The p+1 is actually an overflow within the stack slot, NOT to the stack canary. If we choose the tag 8, we don\u0027t see the short granule overflow, because 8 (the tag) matches 8 (the size of the short granule), so we don\u0027t enter the special logic to check the short granule tag + size.",
      "parentUuid": "072d2b92_8cfada82",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a665ca5d_973efc5e",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-14T21:40:53Z",
      "side": 1,
      "message": "Hmm actually the +1 should point past the 16 bytes, because it\u0027s on the `char**`. Let me think a bit more.",
      "parentUuid": "087c8659_f8728deb",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d8847e0_202eda00",
        "filename": "tests/stack_protector_test_helper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-15T00:00:16Z",
      "side": 1,
      "message": "Nevermind my second comment, I think the original comment should be correct.",
      "parentUuid": "a665ca5d_973efc5e",
      "revId": "dfff8101e56fb05bfff4079208a2315c196aa458",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}