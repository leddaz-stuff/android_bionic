{
  "comments": [
    {
      "key": {
        "uuid": "48d9ad3d_ae2407b7",
        "filename": "libc/Android.mk",
        "patchSetId": 6
      },
      "lineNbr": 609,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T18:53:24Z",
      "side": 1,
      "message": "@Christopher Ferris can you elaborate why this is ok?",
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_2e2c773a",
        "filename": "libc/Android.mk",
        "patchSetId": 6
      },
      "lineNbr": 609,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-04-27T19:29:39Z",
      "side": 1,
      "message": "The entirety of jemalloc is included in libc. It\u0027s only in a separate place because it is an external project. In fact, we could have moved this piece into external/jemalloc or created a small static library that only had this extra thing added but it\u0027s probably not worth the effort.\n\nIn the case below, you are taking part of the functionality of another library. The only real external library that is in libc is libjemalloc, and again that entire library is in libc.",
      "parentUuid": "48d9ad3d_ae2407b7",
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_39791fed",
        "filename": "libc/Android.mk",
        "patchSetId": 6
      },
      "lineNbr": 609,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T19:57:48Z",
      "side": 1,
      "message": "We actually use everything in libpackageparser. I would really like to avoid a copy + paste approach.\n\nPerhaps building out the .o file separately for libpackageparser and adding it into the recipe for this, this way theirs no possibility of a circular dependency.\n\nI was under the assumption that all built things implicitly get linked against Bionic libc and thus have a build dependency on bionic. Although, I looked at the recipe for jemalloc and I don\u0027t see it explicitly saying no libc. I guess I am unsure if Make would actually report a circular dependency there or not. \n\nI know ELF supports resolution of circular deps on symbols at link... At a glance, i didn\u0027t see any symbols used in jemalloc that are in bionic offhand. But I\u0027m still building so I only glanced at the source.",
      "parentUuid": "48d9ad3d_2e2c773a",
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08689501_461d3256",
        "filename": "libc/Android.mk",
        "patchSetId": 6
      },
      "lineNbr": 609,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-28T14:59:58Z",
      "side": 1,
      "message": "a *static* library has no dependencies in the ELF DT_NEEDED sense, just unresolved references. which, if you\u0027re linking into libc, will be resolved by it.",
      "parentUuid": "48d9ad3d_39791fed",
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_8e03c362",
        "filename": "libc/Android.mk",
        "patchSetId": 6
      },
      "lineNbr": 612,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-04-27T18:27:03Z",
      "side": 1,
      "message": "It\u0027s not acceptable to make libc depend on system core in this way.",
      "range": {
        "startLine": 612,
        "startChar": 25,
        "endLine": 612,
        "endChar": 66
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_ce694b17",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-04-27T18:27:03Z",
      "side": 1,
      "message": "I think this is a really bad idea, we shouldn\u0027t have libc essentially allowing undefined reference to a couple of functions which might be present. I think it would be much better to simply implement all of this code in a separate file.\n\nIn fact, this feels like a possible security bug.",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_8e25839d",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T18:53:24Z",
      "side": 1,
      "message": "That\u0027s a very valid point. I initially was more inclined to statically build libpackageparser and link it via LOCAL_WHOLE_STATIC_LIBRARIES similar to jemalloc.",
      "parentUuid": "48d9ad3d_ce694b17",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_2e5e37da",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T19:12:29Z",
      "side": 1,
      "message": "Although that would be a cyclic dependency, perhaps dlopen and call it that way...",
      "parentUuid": "48d9ad3d_8e25839d",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_0eeed3fc",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-04-27T19:29:39Z",
      "side": 1,
      "message": "Under no circumstances will that be acceptable. If you need this functionality in libc (and I don\u0027t think anyone is against doing something like this in libc) you really need to have it implemented here.\n\nIf at all possible, do not copy paste it either, or pull in the whole library. Please try and do the minimum to implement the needed functionality. I would still recommend putting all of this in a different file since it seems logically different than the functionality in this file.",
      "parentUuid": "48d9ad3d_2e5e37da",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_b9f7ef9b",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-04-27T19:51:17Z",
      "side": 1,
      "message": "Will do, will regroup on this (this would be the fifth in a series of prototypes to try to accomplish this).\n\nMy expectation is once implemented here (in grp_pwd.cpp or companion elsewhere), we may consider deprecating libpackagelistparser.",
      "parentUuid": "48d9ad3d_0eeed3fc",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_3904bf6d",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T19:57:48Z",
      "side": 1,
      "message": "The other lib is pretty small, we actual use it all.",
      "parentUuid": "48d9ad3d_0eeed3fc",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d9ad3d_99a4eb68",
        "filename": "libc/bionic/grp_pwd.cpp",
        "patchSetId": 6
      },
      "lineNbr": 439,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-27T20:05:47Z",
      "side": 1,
      "message": "I thought about that as well, perhaps abusing some of the passwd fields to get all the information present in packages.lst file. Although, we should likely build a cache for things like sdcardd.\n\nTo actually deprecate we would have to map all of these fields into the other structs:\n\nstruct pkg_info \nchar *name;\nuid_t uid;\nbool debuggable;\nchar *data_dir;\nchar *seinfo;\ngid_list gids;\n\nPossible Map:\n\nstruct passwd          struct pkg_info   \nchar   *pw_name;       char *name\nchar   *pw_passwd;     \nuid_t   pw_uid;        uid_t uid\ngid_t   pw_gid;        \nchar   *pw_gecos;      bool debuggable\nchar   *pw_dir;        data_dir\nchar   *pw_shell;      char *seinfo\n\nstruct group {\nchar   *gr_name;       char *name\nchar   *gr_passwd;     \ngid_t   gr_gid;        uid_t uid\nchar  **gr_mem;        gid_list\n\n\nThis approach also has the obvious drawbacks..",
      "parentUuid": "48d9ad3d_b9f7ef9b",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 439,
        "endChar": 38
      },
      "revId": "5e7dab5e0189100426feaafeb77216b79b4c5b54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}