{
  "comments": [
    {
      "key": {
        "uuid": "d04d6c5f_a6ef34cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-11-03T15:35:53Z",
      "side": 1,
      "message": "that bug is an interesting read for anyone interested in app compatibility issues!",
      "revId": "efca29a968eb5a9a1c68d19ecd86d1a4a4e39d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7e9432d_f9c7a795",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 840,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-11-03T15:35:53Z",
      "side": 1,
      "message": "i\u0027ve never _done_ this, but wouldn\u0027t mprotect be a way to test whether it\u0027s mapped? aiui you\u0027d get an error return telling you the page isn\u0027t mapped rather than a SIGSEGV because you\u0027re trying to touch the metadata, not the missing page itself...",
      "revId": "efca29a968eb5a9a1c68d19ecd86d1a4a4e39d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df2e825e_7930d98a",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 840,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2017-11-03T16:08:31Z",
      "side": 1,
      "message": "Another simple way to test this is with read(2) (if you want to test WRITE access) or write(2) (if you want to test READ access):\n\n#include \u003cerrno.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cunistd.h\u003e\n\nbool is_valid_pointer(const void* p) {\n  int fds[2];\n  pipe(fds);\n  int result \u003d write(fds[1], p, 1);\n  int write_errno \u003d errno;\n  close(fds[0]);\n  close(fds[1]);\n  return (result \u003e\u003d 0) || (errno !\u003d EFAULT);\n}\n\nint main() {\n  printf(\"is_valid_pointer(\u0026main): %d\\n\", is_valid_pointer(\u0026main));\n  printf(\"is_valid_pointer(123123123): %d\\n\", is_valid_pointer((void*)123123123));\n}",
      "parentUuid": "c7e9432d_f9c7a795",
      "revId": "efca29a968eb5a9a1c68d19ecd86d1a4a4e39d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "348a68a7_64b0e3a0",
        "filename": "tests/dlfcn_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 840,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2017-11-06T16:17:44Z",
      "side": 1,
      "message": "Interestingly this results in ENOMEM not EINVAL... which is a bit counter-intuitive.",
      "parentUuid": "c7e9432d_f9c7a795",
      "revId": "efca29a968eb5a9a1c68d19ecd86d1a4a4e39d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}