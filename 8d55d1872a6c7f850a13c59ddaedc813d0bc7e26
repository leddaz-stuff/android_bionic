{
  "comments": [
    {
      "key": {
        "uuid": "758704db_07fa7977",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-09-25T21:35:51Z",
      "side": 1,
      "message": "I don\u0027t think we should ignore this tag. If it is present then the dynamic loader would be required to sign any .got.plt entries with the IA key. If we don\u0027t want to support this behavior then we should probably report an error if we see it.\n\nUnfortunately binutils 2.33 inserts this tag by default which can occur when building the vDSO for the Linux kernel following the instructions here:\nhttps://cs.android.com/android/platform/superproject/+/master:device/generic/goldfish/fvpbase/README.md;l\u003d105\nAs a result I have been seeing these warnings in FVP for a while.\n\nThe vDSO does not contain PLT entries so there turns out not to be a compatibility problem at runtime.\n\nSince this problem is specific to the experimental MTE configuration of FVP, it would be easiest to conditionalize the error on ANDROID_EXPERIMENTAL_MTE.",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "183086a8_db143e56",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1268141
      },
      "writtenOn": "2020-09-26T06:29:31Z",
      "side": 1,
      "message": "I have a patch on top of this which supports signing the .plt.got entries.\nIf it is interesting I can push it upstream, however, I thought pac-plt is simply experimental that nobody would use before it becomes ABI.\n\nFor reference:\nhttps://github.com/ARM-software/abi-aa/tree/master/pauthabielf64\n\nI am surprised this DT tag is present. Should this be fixed in binutils?\nShould we go with the conditionalized error on ANDROID_EXPERIMENTAL_MTE?",
      "parentUuid": "758704db_07fa7977",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a0ad02e_7eb6db9d",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-09-28T22:54:03Z",
      "side": 1,
      "message": "\u003e I thought pac-plt is simply experimental that nobody would use before it becomes ABI.\n\nthat sounds like all the more reason to report the errors until they\u0027re actually implemented :-)",
      "parentUuid": "183086a8_db143e56",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f2042e1_a5a47861",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-09-28T23:10:31Z",
      "side": 1,
      "message": "But pac-plt is already in the ABI though?\n\nhttps://developer.arm.com/documentation/ihi0056/g/ (search for PAC_PLT)\n\nIn terms of experimental changes you might be thinking of a separate proposal to add more PAuth features to the ABI.",
      "parentUuid": "3a0ad02e_7eb6db9d",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d505edaf_f5bc03b8",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-09-29T01:05:27Z",
      "side": 1,
      "message": "I also realized that it is unfortunate that the IA key was chosen for pac-plt (this isn\u0027t in the ABI but is implied by e.g. the implementation in lld) because it is also being used by default for return address signing. This would preclude different IA keys from being used on different threads, or on zygote fork, because changing the IA key would result in all future IA authentications in PLT entries failing. A platform that wants to make use of pac-plt together with thread diversity for IA keys would need to select a different key, most likely IB, for return addresses.\n\nSince pac-plt provides little value on Android because we already have RELRO I think this means we will have to forbid pac-plt on Android and make the presence of this dynamic tag an error.",
      "parentUuid": "3f2042e1_a5a47861",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a4a9aae_f898d1af",
        "filename": "linker/linker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3146,
      "author": {
        "id": 1268141
      },
      "writtenOn": "2020-09-29T07:36:59Z",
      "side": 1,
      "message": "There are even more constraints there: pac-plt requires return address signing first.\nAlso, I am not sure what d_val of DT_AARCH64_PAC_PLT should be, it is not mentioned.\n\nBTW, zygote would change all keys as of today:\nhttps://android-review.googlesource.com/c/platform/frameworks/base/+/1215821/4/core/jni/com_android_internal_os_Zygote.cpp#1006\n\n\u003e But pac-plt is already in the ABI though?\n\nRight, I was being in hurry. What I mean is that pac-plt is primary to harden lazy-binded runtimes as far as I understand. Since Android does RELRO as you wrote I also don\u0027t think pac-plt would be of any use here.\nIn addition, runtime can\u0027t check which key is used for return address signing by simply looking at the ELF so it can\u0027t enforce platform ABI. That\u0027s why I wrote - incorrectly - \"experimental\": I am expecting the linked ABI proposal to sort these things out.\n\nI am going to push a patch to error-out if the DT tag is present, except for ANDROID_EXPERIMENTAL_MTE.",
      "parentUuid": "d505edaf_f5bc03b8",
      "revId": "8d55d1872a6c7f850a13c59ddaedc813d0bc7e26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}