{
  "comments": [
    {
      "key": {
        "uuid": "d6d7f27c_f030f897",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2015-11-10T17:57:09Z",
      "side": 1,
      "message": "The commit message depicts what were doing but not why were doing it, can you elaborate here?",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7662c6c1_773890aa",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 243,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-11-10T18:33:34Z",
      "side": 1,
      "message": "Possibly add fsetfilecon() to bionic and drop from libselinux if building on bionic?\nSetting a userspace object (property) context on a file is decidedly unusual; not sure of the implications.",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56cb02e2_afc29980",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 243,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T18:42:54Z",
      "side": 1,
      "message": "I\u0027ve been working under the assumption that Elliot / the libc team doesn\u0027t want to export a fsetfilecon() from libc.so, hence the current solution. They are being careful about what symbols are exported.\n\nI\u0027ve tested this patch myself, and setting a property context for a file is unusual but seems to work. I guess in theory we could typeattribute each \"property_type\" with \"file_type\", but I don\u0027t think it\u0027s necessary.",
      "parentUuid": "7662c6c1_773890aa",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b2a4b7b_d5f3eb95",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 243,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-13T23:50:46Z",
      "side": 1,
      "message": "for the hairier stuff, yeah, clearly we don\u0027t want that. for the trivial one-liners, we could either have them inlined in a header file, or built into a libselinux_core.a that we link into libselinux and bionic. dimitry\u0027s switched us over to a link map so we\u0027d have to explicitly export the symbols even if we wanted to.",
      "parentUuid": "56cb02e2_afc29980",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b0be317_186405c7",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-11-10T21:55:44Z",
      "side": 1,
      "message": "Use getline() instead (already used in libselinux label_file.c but not in label_android_property.c; a residue from before bionic supported getline I think).",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6da7ea7_1e7af9cc",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-11T01:45:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b0be317_186405c7",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3674ce7a_953c44a6",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-11-10T21:55:44Z",
      "side": 1,
      "message": "Use a copy of libselinux read_spec_entries() or roll your own, but don\u0027t limit these fields to 255 chars (current libselinux does not).",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ac2a06_217a34cd",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-11T01:45:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3674ce7a_953c44a6",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b668be9f_b9021f20",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-11-10T18:33:34Z",
      "side": 1,
      "message": "The above code isn\u0027t consistent with libselinux code for opening and parsing property_contexts.  Obviously can be fixed but possible concern about future divergence.  Maybe take common helper to bionic and reuse in libselinux if building on bionic?",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ac2a06_15277692",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T18:42:54Z",
      "side": 1,
      "message": "More of an Elliott / libc team question as to whether they want to export a new libc symbol. My assumption was that they didn\u0027t want to, hence the duplication.",
      "parentUuid": "b668be9f_b9021f20",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7689e6a7_c8caa372",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-10T21:57:11Z",
      "side": 1,
      "message": "Right, I did not want to have libc depend on libselinux and thought that the format of property_contexts was simple and consistent enough to have the duplication.  I\u0027m open to other options here.",
      "parentUuid": "16ac2a06_15277692",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c50ace_be592943",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2015-11-11T05:12:12Z",
      "side": 1,
      "message": "Could we just move the implementation of read_spec_entries() into something that can be easily included in the build... ie an additional source file/header? I don\u0027t necessarily know if its cleaner, especially considering this is all cpp and you have the option of more language and rich library support for various constructs.",
      "parentUuid": "7689e6a7_c8caa372",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a6b626_54645d25",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-11T19:06:05Z",
      "side": 1,
      "message": "I doubt exporting these as symbols from libc or having libselinux try to grab a source file from libc (or vice versa) are viable options.  Maybe the header approach is acceptable?\n\n@enh - what is your opinion here?",
      "parentUuid": "16c50ace_be592943",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b0e2f2a_40ccc4b3",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2015-11-11T19:17:58Z",
      "side": 1,
      "message": "It was only meant to be an alternative idea, but I would just keep copies of it like you have, and then when/if we can coordinate a move of properties code out of bionic. Which I would be willing to help with, its something thats always bothered me :-)",
      "parentUuid": "f6a6b626_54645d25",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6da7ea7_6c36dd29",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 790,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-13T23:42:53Z",
      "side": 1,
      "message": "we\u0027ve certainly shared things to other libraries via header files before.",
      "parentUuid": "f6a6b626_54645d25",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56794272_96728cc7",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 812,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-11-10T18:33:34Z",
      "side": 1,
      "message": "Why are we still opening the old properties file?",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6d7f27c_13de762c",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 812,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T18:42:54Z",
      "side": 1,
      "message": "My understanding from Tom is that the old property file should only contain the global serial number, which is needed for property space version control.",
      "parentUuid": "56794272_96728cc7",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76d4867d_56561a52",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 812,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-10T21:57:11Z",
      "side": 1,
      "message": "Yes, in this code all that exists in the old property file is the global serial number.  While designing this, there was a point in time where we were thinking of keeping a few properties in the old properties file for backwards compatibility (old app with statically linked libc + new android).  \n\nKeeping properties in that file got dropped, but I kept the serial number there so these apps would at least have some interaction with the property system.  This can be removed too and the global serial number can be kept elsewhere.",
      "parentUuid": "d6d7f27c_13de762c",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7689e6a7_22125071",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 823,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T06:36:01Z",
      "side": 1,
      "message": "I don\u0027t think we use legacy_prop anymore, do we?",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ac2a06_6059dad9",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 823,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-10T21:57:11Z",
      "side": 1,
      "message": "I actually could use a null string here, since that field isn\u0027t actually used in this case where we\u0027ve provided a prop_area already.  \n\nI thought that having \"legacy_prop\" canary would help future debugging if we see it up in a place it isn\u0027t meant to be.\n\nI can remove it if it\u0027ll confuse us with actual property labels.",
      "parentUuid": "7689e6a7_22125071",
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "369daed4_907c1a05",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 873,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T06:36:01Z",
      "side": 1,
      "message": "Can you surround this by double quotes:\n\n  ... finding property \\\"%s\\\"\", name",
      "range": {
        "startLine": 873,
        "startChar": 58,
        "endLine": 873,
        "endChar": 60
      },
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56cb02e2_b5c2ea80",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 873,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-10T21:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "369daed4_907c1a05",
      "range": {
        "startLine": 873,
        "startChar": 58,
        "endLine": 873,
        "endChar": 60
      },
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56cb02e2_6c0a6fa7",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 994,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-11-10T06:36:01Z",
      "side": 1,
      "message": "surround by double quotes",
      "range": {
        "startLine": 994,
        "startChar": 57,
        "endLine": 994,
        "endChar": 59
      },
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b0e2f2a_57a92c4f",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 3
      },
      "lineNbr": 994,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-11-10T21:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56cb02e2_6c0a6fa7",
      "range": {
        "startLine": 994,
        "startChar": 57,
        "endLine": 994,
        "endChar": 59
      },
      "revId": "4bf5dfdf9bb9236deb6ae84520cd5f82b30b0c6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}