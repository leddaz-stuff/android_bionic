{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9be2732c_1328376d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-25T22:57:40Z",
      "side": 1,
      "message": "so the main thread keeps the zygote key? does that matter?",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0066057c_20d12846",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2021-03-25T23:39:36Z",
      "side": 1,
      "message": "It could matter if a malicious app uses a stack buffer overflow in the zygote, or another app\u0027s main thread, to overwrite a return address with a signed pointer that it manufactured (e.g. by ptracing its main thread for the key, or somehow running code on the main thread).\n\nWith reset on thread creation we are at least defending against such attacks on non-main threads (either in the current process or a different one). As far as I know, the attack surface for the main thread is typically smaller because less code runs there.\n\nA couple of ways to defend against attacks on the main thread would be to either terminate the main thread in zygote children or make it sleep forever (after having reset the keys). But this would require a radical redesign of how the zygote works, I would imagine.",
      "parentUuid": "9be2732c_1328376d",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f1b79a0_e125609f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-29T18:19:18Z",
      "side": 1,
      "message": "\u003e As far as I know, the attack surface for the main thread is typically smaller because less code runs there.\n\ndefer to chriswailes, but i don\u0027t think that\u0027s true?\n\n\u003e A couple of ways to defend against attacks on the main thread would be to either terminate the main thread in zygote children or make it sleep forever (after having reset the keys). But this would require a radical redesign of how the zygote works, I would imagine.\n\n+chriswailes,hboehm?",
      "parentUuid": "0066057c_20d12846",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33cdab1c_2dea1efa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-29T18:19:18Z",
      "side": 1,
      "message": "(this might still be better than nothing, and we can worry about the main thread in T, but +zygote experts...)",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "475603ab_ccf3e334",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2021-04-06T18:37:11Z",
      "side": 1,
      "message": "Ping.",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d67e6ba8_06989f58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268141
      },
      "writtenOn": "2021-04-06T18:54:05Z",
      "side": 1,
      "message": "This solution looks reasonable.\nAren\u0027t we waiting for feedback from others?\n(BTW, I am not allowed to add +2)",
      "parentUuid": "475603ab_ccf3e334",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64acfd82_32fdbe18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2021-04-06T18:56:10Z",
      "side": 1,
      "message": "chriswailes +2\u0027d the other change, so I think this just needs a +2 here.",
      "parentUuid": "d67e6ba8_06989f58",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "337dd9af_276d6b1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268141
      },
      "writtenOn": "2021-04-06T19:08:30Z",
      "side": 1,
      "message": "Agreed. I hope this gets the +2 soon.",
      "parentUuid": "64acfd82_32fdbe18",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5df8f835_12551422",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-04-06T23:00:38Z",
      "side": 1,
      "message": "yeah, obviously i\u0027m not a huge fan (and i can already feel the scorn emanating from the Project Zero folks when they spot this), but it does seem to at least be (a) better than nothing and (b) better than what we have now. (plus (c) it\u0027s something that we can actually do right now, and (d) i have no expectation that we\u0027ll be able to do better this release.)\n\nship it!",
      "revId": "811d180e892f757d052cf9d6c6b7494a8c4a8c2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}