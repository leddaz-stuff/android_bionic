{
  "comments": [
    {
      "key": {
        "uuid": "309d9a70_beddf296",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-04-24T18:18:22Z",
      "side": 1,
      "message": "Q: load_const_atomic?\n\nA: AFAIK no",
      "range": {
        "startLine": 607,
        "startChar": 11,
        "endLine": 607,
        "endChar": 31
      },
      "revId": "c76e4397bf78f2895d6ca7ce0eb089764cfa6001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309d9a70_de8b9670",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-04-24T18:26:44Z",
      "side": 1,
      "message": "I think you want memory_order_acquire, to guarantee that any future property reads are order after this?",
      "range": {
        "startLine": 607,
        "startChar": 47,
        "endLine": 607,
        "endChar": 67
      },
      "revId": "c76e4397bf78f2895d6ca7ce0eb089764cfa6001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a416b9_c0448a7e",
        "filename": "libc/bionic/system_properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-04-24T19:34:15Z",
      "side": 1,
      "message": "Perfect, the _next_ possible access in the caller is likely (it _is_ in my case) going to be __system_property_serial, which invokes a memory_order_acquire; which can cause this read to follow the property\u0027s serial.\n\nIt looks like I should also explicitly look at the SERIAL_DIRTY checking used in __system_property_serial ...",
      "parentUuid": "309d9a70_de8b9670",
      "range": {
        "startLine": 607,
        "startChar": 47,
        "endLine": 607,
        "endChar": 67
      },
      "revId": "c76e4397bf78f2895d6ca7ce0eb089764cfa6001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}