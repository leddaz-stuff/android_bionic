{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f40d2bbd_7de2bb8d",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-05-30T00:30:01Z",
      "side": 1,
      "message": "I\u0027m a little concerned about adding a slow call under the global lock, but at least it is only done when something is built with stack instrumentation.\n\nWe could also put a placeholder here, and actually allocate the memory in the child thread.",
      "fixSuggestions": [
        {
          "fixId": "b71a80c0_03691755",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libc/bionic/pthread_create.cpp",
              "range": {
                "startLine": 447,
                "startChar": 0,
                "endLine": 449,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76e1799b_a421bf95",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-30T01:26:55Z",
      "side": 1,
      "message": "We can make the decision here (load libc_memtag_stack_abi) and then allocate outside of the lock. WDYT?",
      "parentUuid": "f40d2bbd_7de2bb8d",
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e8a6c8_09282557",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-30T01:32:42Z",
      "side": 1,
      "message": "Actually doing it in the thread sounds better, we don\u0027t really need to put a placeholder here, we can just read the `__libc_memtag_stack_abi` and  allocate the buffer in `__pthread_start`",
      "parentUuid": "76e1799b_a421bf95",
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9b799a0_c16ae311",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-30T01:39:56Z",
      "side": 1,
      "message": "(Nevermind, then we once again need to compete with `__pthread_internal_remap_stack_with_mte` and do a complicated swap)",
      "parentUuid": "60e8a6c8_09282557",
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4efe5acf_e2061d0f",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-05-30T21:21:28Z",
      "side": 1,
      "message": "per offline discussion, it should be fine to do this under the thread creation lock",
      "parentUuid": "b9b799a0_c16ae311",
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e34ab7b_d3dc9b3e",
        "filename": "libc/bionic/pthread_create.cpp",
        "patchSetId": 24
      },
      "lineNbr": 451,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-30T21:39:44Z",
      "side": 1,
      "message": "Acknowledged.",
      "parentUuid": "4efe5acf_e2061d0f",
      "revId": "cda41cd819c1f76e61c665aee226e1a8c685fdee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}