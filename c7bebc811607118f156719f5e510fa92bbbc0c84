{
  "comments": [
    {
      "key": {
        "uuid": "7fd43f89_8865d9db",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-11-10T15:57:36Z",
      "side": 1,
      "message": "i meant to remove this one and just use an always-invalid clock id.",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be271f03_9b0c5a38",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-11-10T16:18:59Z",
      "side": 1,
      "message": "I re-discovered why I chose this when I removed it (temporarily, replacing it with 32639). There is a subtle difference between the overhead of vdso not supporting the reference, and the syscall supporting it, as compared to a completely invalid one. This measures the overhead of the vdso that has to switch to fallback to get a successful result.\n\n_I_ might be the only customer for this value, as it tests the vdso, and will help catch regressions (where it is also possible that vdso could behave _much_ worse than if we made a direct call). This will be part of the health testing.\n\nThe completely invalid value (below) has failure in vdso, failure in callback, and a possible bug making a direct syscall to get yet another failure (doubt it, but it is another corner).",
      "parentUuid": "7fd43f89_8865d9db",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e282cf7b_0d97fac5",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-11-10T16:25:26Z",
      "side": 1,
      "message": "that sounds like you\u0027re confusing unit tests and benchmarks. there\u0027s no continuous running of benchmarks.\n\noptimizing the failure case might make sense for something like open or access, but a failure with clock_* is a logic error. we may as well abort.\n\nbut adding a clock_gettime unit test for an invalid clock sgtm.",
      "parentUuid": "be271f03_9b0c5a38",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1d7e841_a6b735da",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-11-10T16:54:28Z",
      "side": 1,
      "message": "In my testing strategy for health impact regarding the vdso feature I have requested a continuous dashboard for these figures.\n\nI have learned I do not always get what I want ;-}",
      "parentUuid": "e282cf7b_0d97fac5",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96b4322d_339479f4",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-11-10T15:57:36Z",
      "side": 1,
      "message": "don\u0027t invent constants that are only used once.",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "497c4f11_1f339438",
        "filename": "benchmarks/time_benchmark.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-11-10T16:20:32Z",
      "side": 1,
      "message": "It is used twice, see next CL in list for getres.",
      "parentUuid": "96b4322d_339479f4",
      "revId": "c7bebc811607118f156719f5e510fa92bbbc0c84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}