{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "46f916d4_a2fec8d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-16T15:50:33Z",
      "side": 1,
      "message": "Side note: would there be any objection to also renaming ldd to ldd.sh? ",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e5fa359_43651544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-16T15:53:41Z",
      "side": 1,
      "message": "(Then we could avoid https://android-review.googlesource.com/c/platform/build/soong/+/1590252)",
      "parentUuid": "46f916d4_a2fec8d8",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08023121_7fc0c3ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-02-16T20:26:53Z",
      "side": 1,
      "message": "depends whether you mean on the host or on the device? this is https://man7.org/linux/man-pages/man1/ldd.1.html so it needs to be called ldd on the device. but the module name and name on the host filesystem don\u0027t really matter.",
      "parentUuid": "8e5fa359_43651544",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0f83d05_3283caf2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-16T23:29:27Z",
      "side": 1,
      "message": "Thanks!\n\nIn the Soong case, I am not 100% sure how ldd makes it to a device. In https://cs.android.com/android/platform/superproject/+/master:bionic/linker/Android.bp, the sh_binary target for ldd doesn\u0027t seem to be referenced anywhere else\n\nWhat I would like to do is change\n\nsh_binary {\n    name: \"ldd\",\n    src: \"ldd\",\n}\n\nto\n\nsh_binary {\n    name: \"ldd\",\n    src: \"ldd.sh\",\n}\n\nWhich would allow us to auto generate this Bazel equivalent (where the name and src need to be distinct, unlike in Soong?)\n\nsh_binary (\n    name \u003d \"ldd\",\n    srcs \u003d [\"ldd.sh\"],\n)\n\n+ Dan\n\nWould this break anything for Soong builds Dan? Am I missing something?",
      "parentUuid": "08023121_7fc0c3ef",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d00cc4d_6cdb9a97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-02-16T23:51:14Z",
      "side": 1,
      "message": "i can answer the \"where?\" question:\n```\nphony {\n    name: \"shell_and_utilities_system\",\n    required: [\n        \"auditctl\",\n        \"awk\",\n        \"bc\",\n        \"bzip2\",\n!       \"ldd\",\n        \"logwrapper\",\n        \"mini-keyctl\",\n        \"mkshrc\",\n        \"newfs_msdos\",\n        \"reboot\",\n        \"sh\",\n        \"simpleperf\",\n        \"simpleperf_app_runner\",\n        \"tcpdump\",\n        \"toolbox\",\n        \"toybox\",\n        \"ziptool\",\n    ],\n}\n```\nin system/core/shell_and_utilities.\n\nbut like i said, the _module_ name doesn\u0027t matter much --- it\u0027s \"will this still be called `ldd` on the target file system?\" that\u0027s the important question (and it\u0027s not clear to me whether that\u0027s what the bazel sh_binary means).",
      "parentUuid": "a0f83d05_3283caf2",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e77ba7a_59b79587",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-02-16T23:52:08Z",
      "side": 1,
      "message": "(to clarify: it\u0027s not even clear to me from reading the bazel docs: https://docs.bazel.build/versions/master/be/shell.html )",
      "parentUuid": "5d00cc4d_6cdb9a97",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c367222a_aba97dc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2021-02-17T00:01:03Z",
      "side": 1,
      "message": "Soong, unlike bazel, very strictly separates the source filesystem with the defined modules/intermediates/outputs. So there is no conflict here (or in any of the other places I expect this to show up).\n\nI think what Rupert is asking for is whether we can rename the source file, and keep the module name the same. Soong defaults the sh_binary\u0027s installed name as the module name (though that\u0027s overridable via `filename` and `filename_from_src`): https://cs.android.com/android/platform/superproject/+/master:build/soong/sh/sh_binary.go;drc\u003da1a56e8f82ec154a6856e2485d63fb1d74d3a2ca;l\u003d214\n\nI assume that with Bazel, what happens is going to entirely depend on the implementation of the packaging/installation rules and what it gets from the sh_binary rule. (Or whatever intermediate steps we end up taking)",
      "parentUuid": "1e77ba7a_59b79587",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02c55513_51989fe0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-17T00:03:31Z",
      "side": 1,
      "message": "On the Bazel side, \n\nsh_binary (\n    name \u003d \"ldd\",\n    srcs \u003d [\"ldd.sh\"],\n)\n\nWill output a symlink called ldd which points to ldd.sh\n\nAnd we have some other machinery in Soong to take Bazel symlinks and replace them with copies of the file they point to\n\nSo I think that should be OK\n\n--------\n\nOn the Soong side, it sounds like these will create equivalent outputs?\n\nsh_binary {\n\n    name: \"ldd\",\n    src: \"ldd\",\n}\n\nto\n\nsh_binary {\n\n    name: \"ldd\",\n    src: \"ldd.sh\",\n}\n\nSo I\u0027ll update this CL to also rename ldd to ldd.sh etc?",
      "parentUuid": "c367222a_aba97dc2",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f2fead_4c2be2b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2021-02-17T00:07:04Z",
      "side": 1,
      "message": "\u003e And we have some other machinery in Soong to take Bazel symlinks and replace them with copies of the file they point to\n\nIsn\u0027t that just for dist files? What about the actual installation into the images? It very strongly matter whether they\u0027re symlinks or not in those directories (unlike dist where you can kinda just copy everything)",
      "parentUuid": "02c55513_51989fe0",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e16c6c5a_186cd799",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-17T00:14:26Z",
      "side": 1,
      "message": "I was assuming we only cared about dist files, but we could build more machinery to address other symlink problems if necessary.\n\nThe current problem is that Bazel refuses to build a target where the name and src are the same. \n\nThe general pattern we use in Bazel for sh_binary is to add .sh to the src name, so I think we should take that path, as long as this won\u0027t break Soong builds?\n\n(an alternate would be to not rename the src, but to pick a different module name, like name: \"ldd_sh_binary\")",
      "parentUuid": "57f2fead_4c2be2b9",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67083f74_ff6dba2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-02-17T00:17:45Z",
      "side": 1,
      "message": "\u003e (an alternate would be to not rename the src, but to pick a different module name, like name: \"ldd_sh_binary\")\n\nthat seems less confusing. (though i\u0027d probably go with \"ldd_module\" since it\u0027s the _module_ that bazel requires a bogus name for, not the binary.)",
      "parentUuid": "e16c6c5a_186cd799",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b73e43cc_25fcf3f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2021-02-17T00:29:08Z",
      "side": 1,
      "message": "Part of the sh_binary contract is that the files should be installed as executable, regardless of what they are in the source tree (there\u0027s really no need for them to be executable in the source tree if they can only be executed on-device). Is this behavioral breakage being well-documented?",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c557a704_93a3f05f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2021-02-17T00:29:08Z",
      "side": 1,
      "message": "\u003e that seems less confusing. (though i\u0027d probably go with \"ldd_module\" since it\u0027s the _module_ that bazel requires a bogus name for, not the binary.)\n\nYou\u0027ll need to specify `filename_from_src: true` or `filename: \u0027ldd\u0027` in the Android.bp then. I don\u0027t know what the equivalent would be for Bazel.\n\n\u003e I was assuming we only cared about dist files, but we could build more machinery to address other symlink problems if necessary.\n\nDist files are only a small piece of the puzzle -- this module will never directly show up in the dist files for example. The staging directory ($ANDROID_PRODUCT_OUT/... used for `adb sync`) and device images are arguably more important (but you don\u0027t get anything out of CI without dist).\n\nAnd actually, for the device installation use-cases, the executable bit doesn\u0027t matter at all, since that\u0027s controlled based on a series of rules based on install location. But using a symlink when we expect a file would be bad. (The executable bit still matters for tests and host tools)\n\n---\n\nAre all of these limitations and workarounds being documented for future conversions? Part of the sh_binary contract is that the files should be installed as executable, regardless of what they are in the source tree (there\u0027s really no need for them to be executable in the source tree if they can only be executed on-device or post-build, having one can lead to confusion).",
      "parentUuid": "67083f74_ff6dba2b",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48693ed1_e0cc8c6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2021-02-17T00:34:16Z",
      "side": 1,
      "message": "(whoops, I merged this into the larger patch thread and forgot to delete this comment)",
      "parentUuid": "b73e43cc_25fcf3f1",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c302fdf_c103d974",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-17T00:34:50Z",
      "side": 1,
      "message": "Elliot - so you prefer something like this in the Android.bp?\n\nsh_binary {\n    name: \"ldd\",\n    src: \"ldd\",\n}\n\nto\n\nsh_binary {\n    name: \"ldd_module\",\n    src: \"ldd\",\n    filename_from_src: true,\n}\n\nFor the BUILD file conversion, this would then (currently) be converted to\n\nsh_binary (\n    name \u003d \"ldd_module\",\n    src \u003d [\"ldd\"],\n)\n\nIn particular the Bazel output would be called \"ldd_module\" instead of \"ldd\", which sounds bad. To fix this on the Bazel side we would probably need to undo the _module suffix in the converter, i.e. back to\n\nsh_binary (\n    name \u003d \"ldd\",\n    src \u003d [\"ldd\"],\n)\n\nBut then Bazel would complain again about the name collision, so the converter would also need to rename ldd to ldd.sh etc. \n\nIt seems a bit messy. I think renaming ldd to ldd.sh to start with is better, assuming this doesn\u0027t break Soong builds (it sounds like it wouldn\u0027t?)",
      "parentUuid": "67083f74_ff6dba2b",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "332e6eba_0bf6d43a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1726181
      },
      "writtenOn": "2021-02-17T00:35:39Z",
      "side": 1,
      "message": "PS Sorry about continually misspelling Elliott, I think I have used every variation...",
      "parentUuid": "2c302fdf_c103d974",
      "revId": "a4583b7af3a71449370fc7273a5cc3c0a4aec4b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}