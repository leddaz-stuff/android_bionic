{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f3c65a29_f6bd4c86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:05:21Z",
      "side": 1,
      "message": "it can be any of the exec functions\n\nhttps://pubs.opengroup.org/onlinepubs/009696799/functions/vfork.html:\n\n\u003e The vfork() function shall be equivalent to fork(), except that the behavior is undefined if the process created by vfork() either modifies any data other than a variable of type pid_t used to store the return value from vfork(), or returns from the function in which vfork() was called, or calls any other function before successfully calling _exit() or one of the exec family of functions.",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c673467_81d78c72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-13T16:51:57Z",
      "side": 1,
      "message": "should we just make vfork() \u003d\u003d fork() on mte/hwasan?",
      "parentUuid": "f3c65a29_f6bd4c86",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06a47b63_c183c437",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-13T16:54:01Z",
      "side": 1,
      "message": "(as a bit of background, we\u0027ve been threatening to do this for years, and Apple\u0027s even started threatening it in their vfork() man page recently... we do have system health folks who\u0027ve been actively switching fork()s to vfork()s recently, though, so it would be more of a fight to do this for everything.)",
      "parentUuid": "9c673467_81d78c72",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af987a10_6abdc5dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:55:27Z",
      "side": 1,
      "message": "One problem I can imagine is that this will lead to atfork handlers being called (though we could solve that by using `clone`). Some people rely on them not being called when using vfork.",
      "parentUuid": "06a47b63_c183c437",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb0bac82_bf10bdcc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "\u003e it can be any of the exec functions\nThat\u0027s a test only problem, right?\n\n\u003e Some people rely on them not being called when using vfork.\nDo you have evidence of that? Some other handlers must be called when switching to fork - ex. anything that grabs a lock that might be used in the child (like malloc, or stackdepot in hwasan).\n\nWe could do vfork\u003d\u003dfork when mte stack is enabled (same condition as currently in memtag_handle_vfork) to avoid the potential performance hit, but the atfork question remains. I feel that the current implementation is less problematic.",
      "parentUuid": "af987a10_6abdc5dd",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f8aadf4_25ef6514",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bb0bac82_bf10bdcc",
      "range": {
        "startLine": 17,
        "startChar": 51,
        "endLine": 17,
        "endChar": 57
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37595774_df16d809",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-13T16:51:57Z",
      "side": 1,
      "message": "that would be quite a trick on Android --- bionic doesn\u0027t have swapcontext()!\n\ni think \"don\u0027t do this, use POSIX threads\" is the POSIX stance (and one that hasn\u0027t caused us enough trouble for us to offer anything more; my assumption is that \"if you\u0027re implementing userspace threads, congratulations, you\u0027ll be writing some assembler\").",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 23
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0894720_2879b2bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "I\u0027ll reword the comment.",
      "parentUuid": "37595774_df16d809",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 23
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "663101fd_9bac19d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0894720_2879b2bc",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 23
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69819910_16de40f4",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:05:21Z",
      "side": 1,
      "message": "shouldn\u0027t we have something that only does this on hwasan | armv9. i don\u0027t think we can only it when stack tagging is enabled, because we don\u0027t necessarily know, correct?",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4567bb21_c75dc1db",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "can\u0027t we check tc0 and do this conditionally?",
      "parentUuid": "69819910_16de40f4",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae6f616e_bf9371aa",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "I don\u0027t understand the question. memtag_handle_longjmp has conditional logic inside. I don\u0027t think the overhead of the function call matters. What\u0027s tc0?\n\nIf you mean do it even when the process has not requested stack tagging through the note (in case they add PROT_MTE to the stack manually), I think that\u0027s a little dangerous because untagging can break tricky code patterns so I would not want to do it *all* the time.\n\nWe could replace the check for the ELF note with a check for PROT_MTE at the current / destination SP (just write tags and read them back).",
      "parentUuid": "4567bb21_c75dc1db",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b19225fc_b2d97c9b",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T21:27:05Z",
      "side": 1,
      "message": "/s/tc0/tcf0, i.e. don\u0027t do these additional loads and stores when tag checks are disabled (either no ELF note provided or mallopt() turned it off).",
      "parentUuid": "ae6f616e_bf9371aa",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c9a6811_7e6d5b04",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T23:59:41Z",
      "side": 1,
      "message": "Reading TCF0 requires a system call. We could check __libc_globals-\u003ememtag_stack inline in the asm, but that would save just a couple stack spills/refills, not worth it IMHO.",
      "parentUuid": "b19225fc_b2d97c9b",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00788c85_b1e27fb6",
        "filename": "libc/arch-arm64/bionic/setjmp.S",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1c9a6811_7e6d5b04",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 45
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc41503_b620bbbc",
        "filename": "libc/bionic/exit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "do we need to do anything to prevent inlining here?",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c2cd5f8_af0a58e7",
        "filename": "libc/bionic/exit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "Yeah, the attribute does that.",
      "parentUuid": "7fc41503_b620bbbc",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8f67a72_fcd67373",
        "filename": "libc/bionic/exit.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c2cd5f8_af0a58e7",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9da373e5_e063e593",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "nit: kUntagUpperLimit?",
      "range": {
        "startLine": 196,
        "startChar": 24,
        "endLine": 196,
        "endChar": 41
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97895c74_efd7b9ab",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9da373e5_e063e593",
      "range": {
        "startLine": 196,
        "startChar": 24,
        "endLine": 196,
        "endChar": 41
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4bdac87_a52c01f3",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "same as florian\u0027s comment below - `ifdef __aarch64__ \u0026\u0026 !__has_feature(hwaddress_sanitizer)`",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 18
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9f1a9dd_f800a273",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f4bdac87_a52c01f3",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 18
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a32e12_471bcd30",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "i\u0027d add some comment as well explaining what went wrong; i\u0027m sure some developer is doing something completely out there.\n\nmaybe add \"Transitioning to a different stack between setjmp() and longjmp() is not supported under MTE.\"",
      "range": {
        "startLine": 205,
        "startChar": 40,
        "endLine": 205,
        "endChar": 67
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff3cab8c_a03eb70c",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "This assumes the program behavior. Let\u0027s update the comment later if we see evidence that this is a common case.",
      "parentUuid": "d8a32e12_471bcd30",
      "range": {
        "startLine": 205,
        "startChar": 40,
        "endLine": 205,
        "endChar": 67
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bd04701_de677dec",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:05:21Z",
      "side": 1,
      "message": "should this be a elif for hwasan? i don\u0027t think we\u0027ll ever want to do both",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 18
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1960dec_b50cc89e",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "It does not cost us anything to do both, runtime actions for memtag vs hwasan do not interfere with each other,so I\u0027d argue it is more correct to keep both. Even if we never use them at the same time.\n\nI could imagine a hwasan binary running on an MTE image (such that some stack frame are hwasan and some mte).",
      "parentUuid": "7bd04701_de677dec",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 18
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4d9eace_45bd0710",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b1960dec_b50cc89e",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 18
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f16b3ac_779e6e45",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:05:21Z",
      "side": 1,
      "message": "Do we want to move on here when it fails? That will make debugging harder than hard crashing right here.",
      "range": {
        "startLine": 224,
        "startChar": 8,
        "endLine": 224,
        "endChar": 16
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fb26853_8f7d4980",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "Yeah, that sounds like a good idea. Crashing will produce a tombstone with memory maps and the stack trace, that will help debugging a lot.\n\nShould we do the same for longjmp? That one I feel is a little less reliable, especially around sigaltstack and people doing userspace threads (technically UB, but still). Leaning towards \"yes\" at least initially.",
      "parentUuid": "1f16b3ac_779e6e45",
      "range": {
        "startLine": 224,
        "startChar": 8,
        "endLine": 224,
        "endChar": 16
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80c9361a_a90bcdae",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Made all of the problematic conditions fatal, both in vfork and in longjmp.",
      "parentUuid": "2fb26853_8f7d4980",
      "range": {
        "startLine": 224,
        "startChar": 8,
        "endLine": 224,
        "endChar": 16
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "076bf633_680134fe",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2022-05-16T19:51:30Z",
      "side": 1,
      "message": "same thing: \"Transitioning to a different stack after a call to vfork() is not supported.\"\n\nI mean, vfork they\u0027re really messing up as they\u0027re not allowed to call other functions.",
      "range": {
        "startLine": 227,
        "startChar": 19,
        "endLine": 227,
        "endChar": 97
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa70b21c_462eacc2",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-16T19:53:30Z",
      "side": 1,
      "message": "\u003e I mean, vfork they\u0027re really messing up as they\u0027re not allowed to call other functions.\n\nAFAIK, de facto many people call a function as the first thing after vfork, to avoid messing up the parent process\u0027 frame.",
      "parentUuid": "076bf633_680134fe",
      "range": {
        "startLine": 227,
        "startChar": 19,
        "endLine": 227,
        "endChar": 97
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1944b7ab_683ad539",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "Oh wow. POSIX says UB if the process\n\u003e calls any other function before successfully calling _exit() or one of the exec family of functions.\n\nThey probably mean \"any other libc function\" because people certainly call functions a lot after vfork.",
      "parentUuid": "aa70b21c_462eacc2",
      "range": {
        "startLine": 227,
        "startChar": 19,
        "endLine": 227,
        "endChar": 97
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "586e7c92_bdebff27",
        "filename": "libc/bionic/heap_tagging.cpp",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-27T20:38:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1944b7ab_683ad539",
      "range": {
        "startLine": 227,
        "startChar": 19,
        "endLine": 227,
        "endChar": 97
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af672bcd_87527d6d",
        "filename": "libc/bionic/pthread_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2022-05-13T16:05:21Z",
      "side": 1,
      "message": "nit: should not have trailing _ because it\u0027s public",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 33
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3618ea7c_108d1f82",
        "filename": "libc/bionic/pthread_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2022-05-16T21:06:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af672bcd_87527d6d",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 33
      },
      "revId": "72e71c1f3579bf7cb389f01915375b6b5d066d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}