{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d679bb72_7ebc4987",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-06-29T19:25:26Z",
      "side": 1,
      "message": "no, that warning\u0027s just silly for POD types.",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "777cef8f_6b19f56b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-07-25T20:39:26Z",
      "side": 1,
      "message": "Maybe it is, but then without doing this for PODs, how am I supposed to fix b/145210666 (and merge aosp/2644915)?",
      "parentUuid": "d679bb72_7ebc4987",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312510fd_82664cde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-25T20:45:28Z",
      "side": 1,
      "message": "i don\u0027t think you should --- we should either fix clang so the warning\u0027s more useful, or keep the warning turned off?",
      "parentUuid": "777cef8f_6b19f56b",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e625d3c_014b0773",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-07-25T21:24:57Z",
      "side": 1,
      "message": "I did a quick look at SO (https://stackoverflow.com/q/1828037) and it seems this may be a valid warning for POD too:\n```\nvariable_t { int i, j };\nvariable_t variable \u003d { j \u003d n++, i \u003d n++ };\n```\n\nHow could this warning be made more useful?",
      "parentUuid": "312510fd_82664cde",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "559748b3_3a9e68be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-25T21:33:26Z",
      "side": 1,
      "message": "well, _that_ case could warn, sure (though i\u0027d _delete_ any code that stupid rather than reorder it!), but \"don\u0027t waste my time on code that\u0027s fine\" is a pretty important rule if you don\u0027t want people to just ignore your warning spam.\n\n\"there are no side-effects here, why are you bothering me?\"\n\nwhat\u0027s the total number of these in the entire tree? is it remotely plausible that this can be turned on?",
      "parentUuid": "3e625d3c_014b0773",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfd87909_8898506c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-07-26T14:18:55Z",
      "side": 1,
      "message": "Somehow I was under an impression it\u0027s just a few places, but then when I tried again yesterday I hit a bunch more and then one I don\u0027t know how to fix: https://paste.googleplex.com/4776749878476800?raw (I would be glad to know what it is about though, just for covering my own ignorance).\n\nThen, I looked closely at sigaction struct and now I think this warning is not fixable globally at all - depending on the architecture, linux defines this struct differently, swapping sa_flags and sa_mask order.",
      "parentUuid": "559748b3_3a9e68be",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c771cb07_1cc4b2eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-07-26T14:24:10Z",
      "side": 1,
      "message": "\u003e Then, I looked closely at sigaction struct and now I think this warning is not fixable globally at all - depending on the architecture, linux defines this struct differently, swapping sa_flags and sa_mask order.\n\nexactly :-)\n\nmy tip with any of these warnings is to do a `-k` build to get some idea of the magnitude of the problem. in particular in external/, where it\u0027s so much less likely you\u0027ll be able to upstream a fix unless you find a _real_ bug. (which brings me to my pro tip: as you go through the warnings in the build, keep a tally of actual bugs found vs noise. because that\u0027s where your real \"we should actually [not] do this\" argument comes from.)\n\nbut, yeah, you were lucky to get a gnarly kernel struct to start with[1].\n\n____\n1. strictly, if you were starting from a clean slate, you could have the _userspace_ ABI differ from the kernel ABI, and have libc translate from the consistent one to the \"per-arch historical accident\" ones ... but even in the clean slate case, who\u0027d sign off on that? the pros (\"silence a badly-implemented warning\") don\u0027t really justify the cons (\"extra cost on all calls\", \"you\u0027ll never fix everyone else\u0027s code anyway\").",
      "parentUuid": "dfd87909_8898506c",
      "revId": "f347eb80592d19329f7bafeee01d7a03cf017f4c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}