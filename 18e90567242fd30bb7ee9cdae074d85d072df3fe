{
  "comments": [
    {
      "key": {
        "uuid": "0adc2075_5d8ffcf8",
        "filename": "libc/libc.map.txt",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-30T16:51:48Z",
      "side": 1,
      "message": "(i think this should be in LIBC_PLATFORM rather than LIBC_R?)",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f4242b9_7477cfe5",
        "filename": "libc/libc.map.txt",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-01-30T17:16:34Z",
      "side": 1,
      "message": "I think it needs to be in LIBC_R so that it can be used by libmemunreachable. I could add a comment for this like the ones that we have for malloc_backtrace etc above.",
      "parentUuid": "0adc2075_5d8ffcf8",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dad1ef1e_781a59c1",
        "filename": "libc/platform/bionic/hwcap.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-30T16:51:48Z",
      "side": 1,
      "message": "does this makes sense? AT_HWCAP* can\u0027t change, so why not just make the call site stash the result in a static?",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b77334db_bb6789c9",
        "filename": "libc/platform/bionic/hwcap.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-01-30T17:16:34Z",
      "side": 1,
      "message": "This function takes the address of __fast_hwcap2, it isn\u0027t calling it. Note that when I take the address of __fast_hwcap2 I don\u0027t obtain an actual function address, I get the value of getauxval(AT_HWCAP2). That is because the __fast_hwcap2 resolver returns the value of getauxval(AT_HWCAP2) instead of a function pointer as most ifuncs do.\n\nIf we add a function-level static for this, that would cause the compiler to add conditional logic to make sure the static is only initialized once. I\u0027m not sure that we want to do that, since we\u0027re going to need android_unsafe_fp_backtrace (or whatever we decide to call it) to be fast.",
      "parentUuid": "dad1ef1e_781a59c1",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f64e34_77eca8ee",
        "filename": "libc/platform/bionic/hwcap.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-30T17:45:01Z",
      "side": 1,
      "message": "i\u0027m not comfortable with this as an API though. we could do something like what we have with __libc_sysinfo. we already have a ton of calls to getauxval() in the linker that could be replaced by one pass through auxv setting up globals?\n\ni\u0027d rather libmemunreachable inlined its own private copy or have a static library than have us export it from libc.",
      "parentUuid": "b77334db_bb6789c9",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdd5b50_7a6febaf",
        "filename": "libc/platform/bionic/hwcap.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-01-30T18:16:48Z",
      "side": 1,
      "message": "Hmm, let\u0027s just go with the function-level static for now then. If it turns out to be a performance problem in practice we can do something about it.",
      "parentUuid": "08f64e34_77eca8ee",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81fea89e_c99b08fb",
        "filename": "libc/platform/bionic/hwcap.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-01-30T18:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bdd5b50_7a6febaf",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2bdd797_04824d8e",
        "filename": "libc/platform/bionic/mte.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-30T16:51:48Z",
      "side": 1,
      "message": "(here)",
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27b928e3_ea295a76",
        "filename": "tests/mte_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1581772
      },
      "writtenOn": "2020-01-30T15:54:34Z",
      "side": 1,
      "message": "Nit: I think that `|` would be more idiomatic (initially I thought this was about indexing the array).",
      "range": {
        "startLine": 27,
        "startChar": 81,
        "endLine": 27,
        "endChar": 82
      },
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e0a0756_56b9fb37",
        "filename": "tests/mte_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-01-30T16:36:37Z",
      "side": 1,
      "message": "With a randomly tagged pointer that would cause us to fail to test the property that we intend to test about half of the time.",
      "parentUuid": "27b928e3_ea295a76",
      "range": {
        "startLine": 27,
        "startChar": 81,
        "endLine": 27,
        "endChar": 82
      },
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d62e3fe_c5747207",
        "filename": "tests/mte_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1581772
      },
      "writtenOn": "2020-01-30T17:05:14Z",
      "side": 1,
      "message": "Sorry I wasn\u0027t thinking straight, I was assuming the pointer wasn\u0027t tagged in the first place... This is fine then.",
      "parentUuid": "7e0a0756_56b9fb37",
      "range": {
        "startLine": 27,
        "startChar": 81,
        "endLine": 27,
        "endChar": 82
      },
      "revId": "18e90567242fd30bb7ee9cdae074d85d072df3fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}