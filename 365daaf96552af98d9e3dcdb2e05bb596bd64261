{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fbb36ec7_bbf2427d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2022-02-07T18:25:22Z",
      "side": 1,
      "message": "Christopher, PTAL. Issuing process-wide prctls in a signal handler is iffy, but I believe this particular operation is safe (and highly unlikely to change). In the kernel, it\u0027s just setting a bit, and bionic side does not have any nontrivial wrapping around the syscall.",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94785a96_ec47156c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2022-02-07T19:21:24Z",
      "side": 1,
      "message": "Are there any security implications to this? In other words, should a security person take a look at this?",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebeb6a00_462e3b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2022-02-07T19:50:52Z",
      "side": 1,
      "message": "\u003eAre there any security implications to this? In other words, should a security person take a look at this?\n\n\nThis is more an oversight than a behavioural change. This is what heapprofd does already since S [1] and we realized too late we forgot to apply the same logic to stack sampling (go/perfetto-s-beta-retrospective has more historical background).\n\nSeems consistent from my viewpoint, but I understand you want an opinion from somebody from security. +jeffv\n\n[1] https://cs.android.com/android/platform/superproject/+/master:external/perfetto/src/profiling/memory/client.cc;l\u003d173?q\u003dprctl%20f:profil",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51163f60_96c112f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2022-02-07T19:54:23Z",
      "side": 1,
      "message": "For context, the CL where this happened for the same reason for heap profiling was aosp/877432",
      "parentUuid": "ebeb6a00_462e3b55",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bdb9617_c83bf0bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2022-02-07T20:00:39Z",
      "side": 1,
      "message": "To add to what Primiano said: my understanding is that notable things dependent on dumpability are procfs ownership and some aspects of ptrace access mode checks, but nothing on Android should be reliant specifically on dumpable\u003d\u003d0 for security. There\u0027s also graphics code that overrides dumpability for vulkan(?) graphics API profiling.\n\nI *think* processes are undumpable by default as a conservative default, and perhaps an argument of attack surface reduction.",
      "parentUuid": "ebeb6a00_462e3b55",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf3a2db0_84991891",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-02-07T21:37:07Z",
      "side": 1,
      "message": "\u003e I *think* processes are undumpable by default as a conservative default, and perhaps an argument of attack surface reduction.\n\nyeah, part of this was for those who don\u0027t want to be dumpable (banking etc) so that they can _start_ non-dumpable. another part was that debuggerd used to ptrace(PEEK) dumpable processes and there was no way to give it _just_ read permission, so having write permission by default felt like quite a large attack surface.\n\ni\u0027m guessing a banking app that cares can opt out of this by disabling the signal handler?",
      "parentUuid": "6bdb9617_c83bf0bd",
      "revId": "365daaf96552af98d9e3dcdb2e05bb596bd64261",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}