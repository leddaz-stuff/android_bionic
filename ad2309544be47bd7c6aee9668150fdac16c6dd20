{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8fd8556f_bff14257",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-02-08T23:10:16Z",
      "side": 1,
      "message": "I think bionic should take ownership of the string. This is consistent with android_set_abort_message and harder to abuse. It may cause us to do one more heap memory allocation sometimes. But I expect a lot of time the string is actually dynamically generated with insufficient lifetime in the app, so the caller would have to do the same anyway.",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cb6353b_01969dfe",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-08T23:13:52Z",
      "side": 1,
      "message": "IMO this is a strictly superior API. It allows you to keep track of e.g. some global integer (or a field of an object, if you unregister at the proper point, which is easy if we create an RAII wrapper (which we should)).\n\nIf you want something to take ownership, you can always do that in a wrapper in your own program (which we could even provide, but not as part of the platform), it doesn\u0027t need to be in libc. If we take ownership here, there is no way for people to use this for a use-case where they don\u0027t want that.",
      "parentUuid": "8fd8556f_bff14257",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a10e8489_c63e31d5",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T01:25:44Z",
      "side": 1,
      "message": "yeah, \"i\u0027d like to see the contents of this struct _at the time of any future crash_\" was a use-case i had in mind too.\n\ni\u0027m unconvinced by the current string/bytes enum, though, and would gladly trade that for a copy/don\u0027t-copy dichotomy :-) (because the little voice in the back of my head is saying \"make easy things easy, and hard things possible\", and suggesting that right now we maybe have \"make hard things easy, and easy things possible\" instead :-) )",
      "parentUuid": "6cb6353b_01969dfe",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39433daa_976a545d",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T01:26:48Z",
      "side": 1,
      "message": "(the fact that i\u0027m no longer certain whether eugenis meant \"name \" or \"data\" when he said \"string\" is a great example of why i really don\u0027t want to use the word string anywhere in our api :-) )",
      "parentUuid": "a10e8489_c63e31d5",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8339f3f_ffd79e9b",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T04:43:21Z",
      "side": 1,
      "message": "\u003e  would gladly trade that for a copy/don\u0027t-copy dichotomy :-) \n\nI don\u0027t think it\u0027s a good idea to have a function that has a different ownership semantic based on an enum value. If we want a function that takes ownership, we should have one that does that and calls into the non-owning version of this.\n\nIMO the best way to do that would be a C++, not C library, that can use move semantics to actually take ownership. But that all needn\u0027t be (and in the case of C++ can\u0027t) be in the platform, can probably just be a relatively short header-only library.\n\nAs Dan put it to me once, the libc exported functions should be building blocks that allow you to construct a good wrapper API.",
      "parentUuid": "39433daa_976a545d",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51bd4400_48bac1fb",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-02-09T21:26:56Z",
      "side": 1,
      "message": "+1 consistency of ownership is important. If it stays with the caller, can we call it \"android_register_crash_buffer\" or something to make it clear? When I \"add a crash detail\" to something, I expect that detail to stay with the thing that I added it to (i.e. transfer ownership).",
      "parentUuid": "f8339f3f_ffd79e9b",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e19f9d4_731c3239",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T21:33:37Z",
      "side": 1,
      "message": "\u003e If we want a function that takes ownership, we should have one that does that and calls into the non-owning version of this.\n\n+1\n\n\u003e IMO the best way to do that would be a C++\n\nthat works for RAII cases (where that can be the owner), but does it work in general? i\u0027d need another API to get the data pointer at least, no?\n\n\u003e android_register_crash_buffer\n\nyeah, +1 to \"register\"/\"deregister\" over \"add\"/\"remove\".\n\nthe _other_ other alternative is that we actually just register a _callback_ instead of the name+data?",
      "parentUuid": "51bd4400_48bac1fb",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed347b4a_2181cd16",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-02-09T23:03:30Z",
      "side": 1,
      "message": "\u003e that works for RAII cases (where that can be the owner), but does it work in general? i\u0027d need another API to get the data pointer at least, no?\n\n\nI do not see the problem. You need somewhere to store the handle from android_register_crash_detail, so you can just store your data pointer there as well.",
      "parentUuid": "9e19f9d4_731c3239",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cf65d2d_165115fb",
        "filename": "libc/include/android/set_abort_message.h",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-09T23:17:37Z",
      "side": 1,
      "message": "yeah, fair enough. sold!",
      "parentUuid": "ed347b4a_2181cd16",
      "revId": "ad2309544be47bd7c6aee9668150fdac16c6dd20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}