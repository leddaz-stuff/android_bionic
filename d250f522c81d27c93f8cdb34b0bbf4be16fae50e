{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "338390b4_bcf61bce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-26T21:39:28Z",
      "side": 1,
      "message": "if we fix these, is there some kind of \"assertion\" we can give on the lld command-line that there shouldn\u0027t be any?\n\ni see the kernel builds zstd with\n```\n\t\t-DZSTD_HAVE_WEAK_SYMBOLS\u003d0 \\\n\t\t-DZSTD_TRACE\u003d0 \\\n```\nshould we?",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cdbff29_e12b2d3f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-27T22:04:59Z",
      "side": 1,
      "message": "weirdly i\u0027m still seeing the relocations even after building with those macros: https://android-review.git.corp.google.com/c/platform/external/zstd/+/3018263\n\nwhy is there a GLOB_DAT for a function anyway?",
      "parentUuid": "338390b4_bcf61bce",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1be18090_2f771aa8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-27T22:25:24Z",
      "side": 1,
      "message": "Hmm, I applied your CL locally and rebuilt and the relocations are gone. Are you sure you are looking at the right file?\n\nI think GLOB_DAT is used generally for GOT entries, which are required when referencing weak symbols from position-independent code.",
      "parentUuid": "4cdbff29_e12b2d3f",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149cd36e_a7a5dd83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-27T22:26:53Z",
      "side": 1,
      "message": "in linker64 itself?\n\n(i am using cider rather than a \"real\" checkout, so there\u0027s definitely the possibility of confusion somewhere.)",
      "parentUuid": "1be18090_2f771aa8",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65bb0668_1b5f5507",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-27T22:29:40Z",
      "side": 1,
      "message": "Yes, I did\n```\nreadelf -aW out.cfa64l5/target/product/vsoc_arm64_only/system/bin/bootstrap/linker64 | grep GLOB_DAT\n```\nand got no output.",
      "parentUuid": "149cd36e_a7a5dd83",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e447f6c_489a3e24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-27T22:37:22Z",
      "side": 1,
      "message": "definitely still there for me:\n```\n/google/cog/cloud/enh/CS-Android-2024-03-27_142848/android/external/zstd$ llvm-readelf-16 -aW ../../out/target/product/vsoc_arm64/system/bi\nn/bootstrap/linker64 | grep GLOB_DAT\n0000000000179150  0000000100000401 R_AARCH64_GLOB_DAT     0000000000000000 ZSTD_trace_decompress_begin + 0\n0000000000179158  0000000200000401 R_AARCH64_GLOB_DAT     0000000000000000 ZSTD_trace_decompress_end + 0\n/google/cog/cloud/enh/CS-Android-2024-03-27_142848/android/external/zstd$ \n```\noh, you just used binutils readelf --- are you sure you\u0027re using an aarch64 readelf?",
      "parentUuid": "65bb0668_1b5f5507",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 51
      },
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca490cea_be7b5667",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-26T20:30:18Z",
      "side": 1,
      "message": "(+maskray for whether the relocation move was intentional)",
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4786ea06_3320c264",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1430422
      },
      "writtenOn": "2024-03-26T21:06:15Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11266595_b79402f7",
        "filename": "linker/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 337,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-26T21:39:28Z",
      "side": 1,
      "message": "worth having a comment here? (especially since i just last week removed most of the manual packing options in the platform build, so we defer to the toolchain in most cases now!)",
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a4baed7_2a0d13e1",
        "filename": "linker/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 337,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-03-26T21:52:17Z",
      "side": 1,
      "message": "Maybe we could also add an assertion in the linker -- currently call_ifunc_resolvers is quietly ignoring the Android packed relocations, but it\u0027d be easy to reject them I think:\n\n```\n--- a/linker/linker_main.cpp\n+++ b/linker/linker_main.cpp\n@@ -647,6 +647,7 @@ static void call_ifunc_resolvers() {\n     auto *dyn \u003d reinterpret_cast\u003cElfW(Dyn)*\u003e(ehdr + phdr[i].p_vaddr);\n     ElfW(Addr) pltrel \u003d 0, pltrelsz \u003d 0, rel \u003d 0, relsz \u003d 0;\n     for (size_t j \u003d 0, size \u003d phdr[i].p_filesz / sizeof(ElfW(Dyn)); j !\u003d size; ++j) {\n+      CHECK(dyn[j].d_tag !\u003d DT_ANDROID_REL \u0026\u0026 dyn[j].d_tag !\u003d DT_ANDROID_RELA);\n       if (dyn[j].d_tag \u003d\u003d DT_JMPREL) {\n         pltrel \u003d dyn[j].d_un.d_ptr;\n       } else if (dyn[j].d_tag \u003d\u003d DT_PLTRELSZ) {\n```",
      "parentUuid": "11266595_b79402f7",
      "revId": "d250f522c81d27c93f8cdb34b0bbf4be16fae50e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}