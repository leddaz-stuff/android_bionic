{
  "comments": [
    {
      "key": {
        "uuid": "c4549595_b93fc1f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-08-25T03:13:32Z",
      "side": 1,
      "message": "AFAIK, Bionic arm* does implement variant 1, while x86* implements variant 2.\n\nFor simplicity and consistency with arm, the x86* implementation does place DSO TLS memory after the TCB rather than before it, but that shouldn\u0027t matter, because the R_GENERIC_TLS_TPREL relocations can handle positive and negative offsets equally well. (On x86, the executable\u0027s TLS segment and the DSO static TLS segments aren\u0027t contiguous -- there is a TCB in the middle, but that should be OK? This API returns the entire static TLS block for each thread.)\n\nAFAICT, the code before this CL is returning the right bounds.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d760ee1f_b721b787",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-08-25T04:09:57Z",
      "side": 1,
      "message": "\u003e AFAIK, Bionic arm* does implement variant 1, while x86* implements variant 2.\n\u003e \n\u003e For simplicity and consistency with arm, the x86* implementation does place DSO TLS memory after the TCB rather than before it.\n\nI don\u0027t have access to an x86-android platforms but I ran the following test[0] on a pixel3 (arm64) and I didn\u0027t see the thread_local addresses within the static TLS block. \nMaybe I\u0027ve done something stupid in the test ? \n\n[0] Test https://paste.googleplex.com/5895126082650112\n[1] Output: https://paste.googleplex.com/5721735833845760",
      "parentUuid": "c4549595_b93fc1f4",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a964f506_17a39d2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-25T19:11:47Z",
      "side": 1,
      "message": "any time you need x86/x8-64, `acloud create` is your friend:\n\nhttps://g3doc.corp.google.com/company/teams/android/teampages/acloud/getting_started.md?cl\u003dhead",
      "parentUuid": "d760ee1f_b721b787",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86ac2533_c75bdd84",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-08-25T22:05:32Z",
      "side": 1,
      "message": "I think you need to compile with -fno-emulated-tls. (ELF TLS is only present in Q and up, and the driver defaults to emulated TLS still.)\n\nFWIW: When I want to compile a test program for Android, I download the Android NDK and use its toolchain, e.g.\n\n  ${ANDROID_NDK_R21D}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang\n\nNo -target, --sysroot, or -gcc-toolchain argument is needed, and the sysroot (or other NDK headers/libraries) are guaranteed to be compatible with the driver.",
      "parentUuid": "a964f506_17a39d2a",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd39454d_6e2a22fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-08-26T02:02:52Z",
      "side": 1,
      "message": "\u003e any time you need x86/x8-64, `acloud create` is your friend:\nThanks! \n\n\u003e I think you need to compile with -fno-emulated-tls.\n\nAh! You\u0027re right. \n\nI\u0027ve tried adding `-fno-emulated-tls`:\n  - The i686 worked https://paste.googleplex.com/6522431826034688\n  - The aarch64 failed (with a different error) https://paste.googleplex.com/5852485647335424\n\nThat\u0027s a little strange but I guess it\u0027s not related to this CL.",
      "parentUuid": "86ac2533_c75bdd84",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "371c8647_a46667cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-08-26T02:09:39Z",
      "side": 1,
      "message": "P.S: I\u0027m gonna revert this change. But now that we\u0027re here, is it worth making these functions report errors if they are called for emulated-tls (Is it even detectable from here?)\n\nI\u0027m guessing this is why a bunch of tests from the sanitizers aren\u0027t passing when I try to use this API",
      "parentUuid": "fd39454d_6e2a22fd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe117be_e5750429",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-08-26T23:14:47Z",
      "side": 1,
      "message": "\u003e The aarch64 failed (with a different error)\n\nThere is a Bionic-specific executable crtbegin object file that adds an empty aligned TLS segment. The extra alignment is a hack to make ELF TLS\u0027s psABI compatible with Bionic\u0027s existing TLS register usage. Using the NDK Clang driver would automatically link against an appropriate crtbegin file.\n\nhttps://android.googlesource.com/platform/bionic/+/refs/heads/android10-dev/docs/elf-tls.md#Bionic-Memory-Layout-Conflicts-with-Common-TLS-Layout\n\nI don\u0027t think it makes sense to report an error for emulated TLS. Emulated TLS is implemented in the compiler and the builtins library, and from libc.so\u0027s point-of-view, an app is just allocating memory with malloc and a pthread key. It doesn\u0027t know anything about emulated TLS per se.\n\nIt\u0027s typical for a thread to have both emulated TLS and ELF TLS. e.g. GWP-ASan in libc.so uses static ELF TLS, but app DSOs will use emulated TLS for compatibility.",
      "parentUuid": "371c8647_a46667cb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86eb5ca7_0bd4a61b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-08-26T23:24:58Z",
      "side": 1,
      "message": "\u003e Using the NDK Clang driver would automatically link against an appropriate crtbegin file.\n\nOh, I didn\u0027t notice that you\u0027re already using the NDK Clang driver.\n\nI forgot -- it\u0027s also necessary to use -fuse-ld\u003dlld.\n\nFrom https://android-review.googlesource.com/c/platform/bionic/+/967181/:\n\n\u003e This variant of the hack is compatible with the gold and lld linkers. The\n\u003e ld.bfd linker will optimize the .tdata output section out if its size is\n\u003e zero, preventing the overalignment in an executable that only has .tbss\n\u003e sections. This problem could be fixed by adding a \". \u003d .;\" statement\n\u003e inside .tdata in ld.bfd\u0027s linker script.\n\nWe\u0027re in the process of switching the NDK to lld as the default linker, which will make -fuse-ld\u003dlld unnecessary.",
      "parentUuid": "5fe117be_e5750429",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9819b8b_3a5a04d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-08-27T01:12:23Z",
      "side": 1,
      "message": "Thanks! That makes sense. (Re-tested the aarch64 and it looked as expected now https://paste.googleplex.com/5075306214850560).\n\nI\u0027ve reverted the code change but fixed the test to be more meaningful.\nPTAL",
      "parentUuid": "86eb5ca7_0bd4a61b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 155
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7993a5dc_54c6394c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1631819
      },
      "writtenOn": "2020-08-25T04:09:57Z",
      "side": 1,
      "message": "P.S: Only tested this on a pixel. So I can\u0027t say this is also correct for the x86 but right now, it\u0027s wrong for both.",
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300e11a5_066c6dfc",
        "filename": "libc/bionic/sys_thread_properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-08-25T03:13:32Z",
      "side": 1,
      "message": "init_ptr is the pointer to the initialization image for a TLS segment, which is shared among all the threads. This API should return the per-thread bounds.",
      "range": {
        "startLine": 61,
        "startChar": 39,
        "endLine": 61,
        "endChar": 47
      },
      "revId": "42ed47acb36b5df493aeded5c26f62dc43a34aec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}