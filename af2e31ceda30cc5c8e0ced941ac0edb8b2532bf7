{
  "comments": [
    {
      "key": {
        "uuid": "c5a7ff88_c7e000e4",
        "filename": "libm/Android.mk",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-22T18:11:45Z",
      "side": 1,
      "message": "This triggered another compilation error for LP32 without IEEEl2bits.",
      "range": {
        "startLine": 216,
        "startChar": 4,
        "endLine": 216,
        "endChar": 51
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45b4efaf_5d70575f",
        "filename": "libm/fake_long_double.c",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "shouldn\u0027t this be in the #ifndef below?",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8526e7f6_0ad35be8",
        "filename": "libm/fake_long_double.c",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-23T14:03:11Z",
      "side": 1,
      "message": "see comment below",
      "parentUuid": "45b4efaf_5d70575f",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5a4cb87_ec639a94",
        "filename": "libm/fake_long_double.c",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "oh, i see. that\u0027s hard to read. i think you should write this out longhand.\n\nactually, can\u0027t we just implement significandl correctly?",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "652bb3c3_29890d17",
        "filename": "libm/fake_long_double.c",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-23T14:03:11Z",
      "side": 1,
      "message": "Actually we can. I\u0027m not sure why this is not done in the upstream. Presumably because they lack scalbl. However they do offer scalbnl which does the same thing when the exponent is an int. (scalb* are obsolete anyway).",
      "parentUuid": "a5a4cb87_ec639a94",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a7ff88_87ea08c0",
        "filename": "libm/freebsd-compat.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-22T18:11:45Z",
      "side": 1,
      "message": "This basically reverts: https://android-review.googlesource.com/#/c/73057/.\n\nI\u0027m not sure I understand what exactly was not supported by aarch64 toolchain. For me it works fine; what am I missing?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 38
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5aa4352_5f70535f",
        "filename": "libm/freebsd-compat.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "that we\u0027ve updated the toolchain several times since then. if it works now, that\u0027s all that matters.",
      "parentUuid": "c5a7ff88_87ea08c0",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 38
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e53fa3e6_4046d037",
        "filename": "libm/s_cbrt.c",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-22T18:11:45Z",
      "side": 1,
      "message": "It\u0027s needed for LDBL_MANT_DIG.\nI will try to upstream the patch but until it gets in this allows us to move forward.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45b4efaf_3d1b2308",
        "filename": "libm/s_cbrt.c",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "just put it in the file that gets -included. that\u0027s what that file\u0027s for.",
      "parentUuid": "e53fa3e6_4046d037",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "652bb3c3_098ec91e",
        "filename": "libm/s_cbrt.c",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-23T14:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45b4efaf_3d1b2308",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e53fa3e6_204bc43f",
        "filename": "libm/s_isfinite.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-22T18:11:45Z",
      "side": 1,
      "message": "I\u0027m not sure if this is the best way to do it since it diverges from the upstream but I can\u0027t really see another sensible way. (we no longer define IEEEl2bits for LP32)",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5aa4352_ffb7bfc1",
        "filename": "libm/s_isfinite.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "even if we did define IEEEl2bits for LP32, this would be wrong. that was my point. there\u0027s no way that IEEEl2bits code can work for LP32. (here, for example, the comparison against 32767 assumes that the exponent is 15 bits, which it isn\u0027t for LP32.)\n\nwe shouldn\u0027t copy the unchanged stuff out. just add a new file for isfinite. alternatively, glibc has all this stuff in libc and it\u0027s trivially implemented with the existing fpclassify.cpp stuff, so we could probably just delete s_isfinite.c instead and keep more of this stuff in the same place.",
      "parentUuid": "e53fa3e6_204bc43f",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5f76b98_cbc15510",
        "filename": "libm/s_isfinite.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-23T14:03:11Z",
      "side": 1,
      "message": "ya, I\u0027m aware that it wouldn\u0027t have work. I was just thinking about a workaround for compilation like we did with broken_isfinitel (which would have been pretty bad anyway).\n\nI moved this to libc.",
      "parentUuid": "e5aa4352_ffb7bfc1",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 18
      },
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5a4cb87_8cfa2657",
        "filename": "libm/s_isnormal.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "glibc actually has no symbols for this; they just inline fpclassify.\n\nwhatever we do, i don\u0027t think we should do this.",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8526e7f6_aa3def4e",
        "filename": "libm/s_isnormal.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-23T14:03:11Z",
      "side": 1,
      "message": "I moved this to libc and kept the symbol. I find it odd that only this has no symbol in glibc and the others do (e.g. isnan).",
      "parentUuid": "a5a4cb87_8cfa2657",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5aa4352_1fc89b2f",
        "filename": "libm/s_signbit.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-22T18:54:01Z",
      "side": 1,
      "message": "(somewhat bizarrely, glibc has these in both libc and libm!)",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25b9bbaa_6af237c1",
        "filename": "libm/s_signbit.c",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-04-22T19:48:13Z",
      "side": 1,
      "message": "it\u0027s actually the same with __isfinite, just that glibc exposes __finite (without \u0027is\u0027) for the same purspose.",
      "parentUuid": "e5aa4352_1fc89b2f",
      "revId": "af2e31ceda30cc5c8e0ced941ac0edb8b2532bf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}