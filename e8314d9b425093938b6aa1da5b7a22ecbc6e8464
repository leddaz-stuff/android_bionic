{
  "comments": [
    {
      "key": {
        "uuid": "AAALP3///5k\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-11-01T16:41:42Z",
      "side": 1,
      "message": "indentation is inconsistent in this file.  4 spaces above, 2 spaces here.  Please fix.",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALOH///1g\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-11-01T17:26:50Z",
      "side": 1,
      "message": "i\u0027m making code google3 style as i touch it, but if a majority would prefer i touch every line in every file, i can have one big reformatting change.",
      "parentUuid": "AAALP3///5k\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALP3///5w\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-11-01T16:41:42Z",
      "side": 1,
      "message": "\"mmap(NULL\" instead of \"mmap(0\"",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALOH///1k\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-11-01T17:26:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALP3///5w\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALP3///5s\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-11-01T16:41:42Z",
      "side": 1,
      "message": "When linking is complete, can we mark this pool as read-only? This prevents other programs from (intentionally or otherwise) tweaking with this pool.",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALOH///1o\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-11-01T17:26:50Z",
      "side": 1,
      "message": "i fear this desire may be in conflict with your desire to keep firefox and libmono-based apps running, but i\u0027ll give it a go...",
      "parentUuid": "AAALP3///5s\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALOH///1E\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-11-01T17:34:53Z",
      "side": 1,
      "message": "actually, it breaks dlopen(3) too :-)\n\none possibility would be to protect the pool pages used while linking, empty the free list, and insist that dlopen uses new pool pages...\n\n...except that won\u0027t work either because the soinfo structs form an intrusive linked list _and_ contain reference counts. so we wouldn\u0027t be able to dlopen a new .so without keeping two lists, and we wouldn\u0027t be able to dlopen an existing .so without keeping the reference counts in some other structure.",
      "parentUuid": "AAALOH///1o\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALP3///3k\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-11-01T17:37:47Z",
      "side": 1,
      "message": "Could we keep it read-only the majority of the time, and mark it read-write when we need to (i.e., when dlopen() is modifying the data structure)?",
      "parentUuid": "AAALOH///1E\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALP3///5g\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 714,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2012-11-01T16:41:42Z",
      "side": 1,
      "message": "The return value of ptr is not being checked here.  If soinfo_alloc is going to return NULL on error, we need to always check the return value.",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALOH///1U\u003d",
        "filename": "linker/linker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 714,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2012-11-01T17:26:50Z",
      "side": 1,
      "message": "no, this is a smart pointer. it\u0027s up to the smart pointer\u0027s users to perform null checks. and they already do.",
      "parentUuid": "AAALP3///5g\u003d",
      "revId": "e8314d9b425093938b6aa1da5b7a22ecbc6e8464",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}