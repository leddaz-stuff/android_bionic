{
  "comments": [
    {
      "key": {
        "uuid": "d76a6765_0a1d3bde",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-01-31T02:05:23Z",
      "side": 1,
      "message": "Again atomic_init seems more appropriate.",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 24
      },
      "revId": "80f2bf5c767e3acb2ad6753ae8b2fd28afb95c63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7db33ac_2967cd8b",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-02T22:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d76a6765_0a1d3bde",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 109,
        "endChar": 24
      },
      "revId": "80f2bf5c767e3acb2ad6753ae8b2fd28afb95c63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f77beb34_4e6d9399",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-01-31T02:05:23Z",
      "side": 1,
      "message": "This needs to be at least memory_order_acquire, even if we try to stay true to the spirit of the original implementation.  In single use cases, this can clearly be used as a sem_trywait equivalent, and should thus have at least the same ordering guarantees.",
      "range": {
        "startLine": 296,
        "startChar": 66,
        "endLine": 296,
        "endChar": 86
      },
      "revId": "80f2bf5c767e3acb2ad6753ae8b2fd28afb95c63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97d0ef89_888cf7ce",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-02T22:18:52Z",
      "side": 1,
      "message": "For sem_getvalue, actually I don\u0027t know when it is safe to use it, maybe just wait until it becomes some \nvalue. The posix standard says: The updated value represents an actual semaphore value that occurred at some \nunspecified time during the call, but it need not be the actual value of the semaphore when it is returned to \nthe calling process. glibc implements it just like a normal atomic_load. Even we just acquire fence, the value\nmay not still be safe to be used for anything. Maybe just use it in critical section?\nIt will be very helpful for my understanding if you can show me how it is used.",
      "parentUuid": "f77beb34_4e6d9399",
      "range": {
        "startLine": 296,
        "startChar": 66,
        "endLine": 296,
        "endChar": 86
      },
      "revId": "80f2bf5c767e3acb2ad6753ae8b2fd28afb95c63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7c04bc1_a9145970",
        "filename": "libc/bionic/semaphore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-02-03T00:49:21Z",
      "side": 1,
      "message": "Change sem_getvalue to use acquire fence, and add comment for it.",
      "parentUuid": "97d0ef89_888cf7ce",
      "range": {
        "startLine": 296,
        "startChar": 66,
        "endLine": 296,
        "endChar": 86
      },
      "revId": "80f2bf5c767e3acb2ad6753ae8b2fd28afb95c63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}