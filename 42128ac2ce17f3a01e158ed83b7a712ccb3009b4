{
  "comments": [
    {
      "key": {
        "uuid": "53004bfe_ad55e743",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-20T18:31:40Z",
      "side": 1,
      "message": "Honestly, I don\u0027t understand this paragraph.  Can you give an example of how exactly processes within an APEX module and outside of an APEX module are going to use these functions?",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1989d4a0_20590f45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T06:59:00Z",
      "side": 1,
      "message": "Processes that started \u0027before\u0027 apexd: they will use /system/bootstrap/lib/lib{c|dl|m}.so\n\nProcesses that started \u0027after\u0027 apexd:\n1) process started in platform (/system/bin)\n2) process started in APEX other than the runtime APEX (/apex/foo/bin)\n3) process started in the runtime APEX (/apex/com.android.runtime/bin)\n\nAll 1, 2, 3 will use /apex/com.android.runtime/lib/lib{c|dl|m}.so at runtime.\nBut at build time, 1) and 2) are linking against stubs of libc/dl/m. Only 3) directly link to \u0027real\u0027 libc/dl/m.",
      "parentUuid": "53004bfe_ad55e743",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a888463c_bdd7b458",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-21T17:42:53Z",
      "side": 1,
      "message": "I still don\u0027t understand.  Why won\u0027t they just link to the real libc, etc?  What is the harm in that?  Or alternatively, what is the motivating factor here?  Is something broken without this?  I don\u0027t fully understand what this is doing and I definitely don\u0027t understand why this is wanted.\n\nEspecially in the init/system_properties case: init will link against the bootstrap libc, etc and get those full symbols.  Other processes shouldn\u0027t be using those symbols, but if they are it really doesn\u0027t matter; why bother stubbing them out?  The only tangible change I see here is that it means we can\u0027t run system properties tests again the libc in apex, which is a negative.\n\nUnless I totally don\u0027t get this?",
      "parentUuid": "1989d4a0_20590f45",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45da93c6_d3ffdfc1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T17:55:55Z",
      "side": 1,
      "message": "This is to be able to update the bionic libs via the runtime APEX. Since we want the updated bionic to be used by as many processes as possible, we will make the updated ones available to all processes launched after the runtime APEX is mounted.\n\nHowever, since we don\u0027t guarantee the stability of \u0027all\u0027 symbols in the bionic libs, we should prevent things outside of the runtime APEX from using private symbols from the bionic libs in the runtime APEX. Otherwise, things could break when we update the APEX.\n\nAt build time, we achieve this by hiding private symbols by letting them (things outside of the runtime APEX) to link against the stubs having only the symbols that we guarantee stability.\n\nBTW, early processes like init will use the bootstrap (\u003dnon-updatable) bionic. So they can link against the full (the real) library. However, the reason why I added the sysprop APIs to the map file is just because the build system does not (or cannot) identify early binaries.",
      "parentUuid": "a888463c_bdd7b458",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d061b42a_04e15d7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-21T18:15:01Z",
      "side": 1,
      "message": "Okay is this a correct understanding then:\n\nWe\u0027re going to hide all private symbols except the specific symbols called out in this CL.  We\u0027ll guarantee the stability of these symbols, but only early processes that use the bootstrap libraries will get the functionality, otherwise they\u0027ll get stub functionality?\n\n(I still wonder why we wouldn\u0027t provide the full functionality and people use them at their own risks?)",
      "parentUuid": "45da93c6_d3ffdfc1",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b2eeda_03de7696",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T18:32:52Z",
      "side": 1,
      "message": "It\u0027s partially correct.\n\n\u003e We\u0027re going to hide all private symbols except the specific symbols called out in this CL\n\nYes.\n\n\u003e  We\u0027ll guarantee the stability of these symbols\n\nYes.\n\n\u003e  but only early processes that use the bootstrap libraries will get the functionality, otherwise they\u0027ll get stub functionality\n\nNo. stub lib is a build-time only artifact. At runtime, a process will use either /system/bootstrap/lib/lib{c|dl|m}.so or /apex/..../lib{c|dl|m}.so depending on whether it is started after or before the runtime APEX is mounted.\nThe purpose of linking with stub is to prevent things that might not be updated in sync with the runtime APEX from using private symbols.",
      "parentUuid": "d061b42a_04e15d7c",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "246b9264_55047288",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-21T20:46:08Z",
      "side": 1,
      "message": "Okay, got it.  I think for posterity, it\u0027d be good if we rephrased the commit message a bit for this, since even re-reading it, I barely follow from the commit message to this understanding.",
      "parentUuid": "20b2eeda_03de7696",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "606055eb_49d3cc6c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-20T18:31:40Z",
      "side": 1,
      "message": "Just to clarify, we\u0027re still going to keep the symbols for these available just that their functionality is going to be stubbed out to be a no-op, right?",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03248c0f_45e668bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T06:59:00Z",
      "side": 1,
      "message": "I am not sure I understood the question correctly. The source code for the stub library is generated from the map file and the implementation of each function (or variable) is no-op. (e.g. void foo() {} )",
      "parentUuid": "606055eb_49d3cc6c",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea3b9e7b_1bc4e5e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-21T17:42:53Z",
      "side": 1,
      "message": "Yes, that\u0027s what I was confirming, so sounds good.",
      "parentUuid": "03248c0f_45e668bf",
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d155b44_fd75a9e7",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1464,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-20T18:31:40Z",
      "side": 1,
      "message": "Following",
      "range": {
        "startLine": 1464,
        "startChar": 6,
        "endLine": 1464,
        "endChar": 14
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01133265_fb55bdca",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1464,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T06:59:00Z",
      "side": 1,
      "message": "Done. Curse my laptop keyboard :(",
      "parentUuid": "7d155b44_fd75a9e7",
      "range": {
        "startLine": 1464,
        "startChar": 6,
        "endLine": 1464,
        "endChar": 14
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d234c039_cd64c806",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1465,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-20T18:31:40Z",
      "side": 1,
      "message": "libselinux",
      "range": {
        "startLine": 1465,
        "startChar": 23,
        "endLine": 1465,
        "endChar": 34
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3bbbfd1_259165ef",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1465,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T06:59:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d234c039_cd64c806",
      "range": {
        "startLine": 1465,
        "startChar": 23,
        "endLine": 1465,
        "endChar": 34
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67aae84b_577be8a4",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1469,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-20T18:18:38Z",
      "side": 1,
      "message": "tomcherry@,\n\nAs you know well, these are from init. In fact, because init will be using the bootstrap bionic libraries (since APEXes won\u0027t be available when init starts), we shouldn\u0027t add these here. init will link to libc without using stubs. However, until when we build the bootstrap bionic, I would like to put these here. Are you okay with that?\n\nIn addition, the _init function is used by libselinux as well and thus we need to have the symbol here even after the bootstrap bionic work is done. What do you think?",
      "range": {
        "startLine": 1466,
        "startChar": 0,
        "endLine": 1469,
        "endChar": 36
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b442b95_56d7ee3a",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1469,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-12-20T18:31:40Z",
      "side": 1,
      "message": "__system_properties_init() is used by more than just libselinux and init, it\u0027s used in the linker to create the mappings to system properties during process initialization.  It needs to be available to the linker (both of them) for all processes.",
      "parentUuid": "67aae84b_577be8a4",
      "range": {
        "startLine": 1466,
        "startChar": 0,
        "endLine": 1469,
        "endChar": 36
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448ddaec_4ef973fd",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1469,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-21T06:59:00Z",
      "side": 1,
      "message": "linker (system/bin/linker) will be packaged in the runtime APEX along with libc/dl/m. As the libs and the linker are within the same APEX, the linker can access all symbols in them.\n\nThis change is for things external to the runtime APEX. If I remove these lines, only init and libselinux are breaking.",
      "parentUuid": "0b442b95_56d7ee3a",
      "range": {
        "startLine": 1466,
        "startChar": 0,
        "endLine": 1469,
        "endChar": 36
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b19d99e_2cd6a896",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1475,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-20T18:18:38Z",
      "side": 1,
      "message": "cferris@,\n\nThese symbols are used by libmemunreachable,so I think the bionic lib in the runtime APEX should keep these symbols intact in order not to break libmemunreachable with the runtime APEX update. What do you think?",
      "range": {
        "startLine": 1471,
        "startChar": 0,
        "endLine": 1475,
        "endChar": 26
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2431f940_60e4678c",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1480,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-20T18:18:38Z",
      "side": 1,
      "message": "cferris@\n\nThese are from libmediautils. Same question as above.",
      "range": {
        "startLine": 1477,
        "startChar": 0,
        "endLine": 1480,
        "endChar": 32
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f6f5ce2_9e80a53e",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1483,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-20T18:18:38Z",
      "side": 1,
      "message": "lorenzo@\n\nDo you have any concern about keeping this symbol across the runtime APEX and platform? Do you have any other option?",
      "range": {
        "startLine": 1482,
        "startChar": 0,
        "endLine": 1483,
        "endChar": 37
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "920d51f7_5f464d66",
        "filename": "libc/libc.map.txt",
        "patchSetId": 7
      },
      "lineNbr": 1486,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-12-20T18:18:38Z",
      "side": 1,
      "message": "cferris@\n\nFrom enh@: \"probably should be converted into a mallopt?\"",
      "range": {
        "startLine": 1485,
        "startChar": 0,
        "endLine": 1486,
        "endChar": 34
      },
      "revId": "42128ac2ce17f3a01e158ed83b7a712ccb3009b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}