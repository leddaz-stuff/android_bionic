{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a9518988_13cf9989",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-26T21:30:36Z",
      "side": 1,
      "message": "This func is cheap to call, worst case it scans through list calling strlen() and seeing non-zero\n\nTechnically the 2nd function should be unconditional too...\nbut we\u0027d need to keep track of *whether* we need to call ioctls...",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a76637c3_61ad1505",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:14:15Z",
      "side": 1,
      "message": "seems reasonable, but do we want to ask the OEM to test with this first?",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b56a0ee_45f3dedd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:14:45Z",
      "side": 1,
      "message": "(and add the `Bug:` that motivated us to look at this code!)",
      "parentUuid": "a76637c3_61ad1505",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3feb1825_c7b6a774",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:13:15Z",
      "side": 1,
      "message": "i think this adds confusion rather than clarifies --- you mean \"with addresses [that we haven\u0027t seen]\", but i think just \"...new interfaces might have showed up...\" makes your point clearer. (because it\u0027s the \"when\" that\u0027s important.)",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a3a69b2_31177325",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-27T00:21:29Z",
      "side": 1,
      "message": "no, actually the point is we call GETLINK then GETADDR\n\nGETLINK returns set of all interfaces (along with their names), thus getting us a ifindex-\u003eifname map\n\nGETADDR returns set of all addresses (along with the ifindex they are on), thus getting us a addr-\u003eifindex map\n\nthen we try to merge the two, but new interfaces w/ addresses might have\nshown up between GETLINK and GETADDR, thus there may be addr-\u003eifindex that don\u0027t have corresponding ifindex-\u003eifname\n\n--\n\nWe could reverse the order: first call GETADDR, then call GETLINK.\n\nNow interfaces could have vanished between GETADDR and GETLINK,\nso now we could just filter out anything without a name...\n\nBUT because GETLINK might fail due to selinux, we might not call it at all,\nso we still need the if_indextoname() backup path for non-priv users...",
      "parentUuid": "3feb1825_c7b6a774",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "386f384d_7f45f8d9",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:25:02Z",
      "side": 1,
      "message": "ah, in that case definitely say that explicitly, since my guess of what you were trying to say was wrong!",
      "parentUuid": "0a3a69b2_31177325",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aca54eb_6427d66e",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-27T00:25:21Z",
      "side": 1,
      "message": "Perhaps what we should really do is:\n\nGETADDR\nif failed return -1/nullptr\n\nif can GETLINK \u0026\u0026 GETLINK succeeded {\n  filter out null names\n  return\n}\n\ngot through and fill in name/flags via if_indextoname \u0026\u0026 ioctl, filtering out null names.",
      "parentUuid": "0a3a69b2_31177325",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742ce953_6460294b",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-29T20:25:57Z",
      "side": 1,
      "message": "isn\u0027t GETADDR the \"deprecated\" option? shouldn\u0027t we prefer GETLINK if we have it?\n\nso\n```\n  GETLINK\n  if !(can GETLINK) || !(GETLINK succeeded) {\n    GETADDR\n    if failed return\n  }\n  filter out null names\n```\n?\n\nand with the \"retry on interrupt\" you talked about, but pushed down into the netlink SendRequest()?",
      "parentUuid": "2aca54eb_6427d66e",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e41f79_c6213a1e",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T20:54:49Z",
      "side": 1,
      "message": "AFAICT based on strace of \u0027ip {link,addr} show dev lo\u0027 only RTM_NEWADDR includes ipv4/ipv6 addresses [on 6.5.13]",
      "parentUuid": "742ce953_6460294b",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1d200d_f96889fa",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T20:58:14Z",
      "side": 1,
      "message": "Additionally, RTM_NEWADDR sometimes includes IFA_LABEL (which is \u0027lo\u0027) but I\u0027m seeing it only for ipv4 127.0.0.1 and not the ipv6 ::1 message...\n\nI think the \u0027label\u0027 is something subtly different then interface...",
      "parentUuid": "f0e41f79_c6213a1e",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7417f367_3768af9e",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-29T21:04:40Z",
      "side": 1,
      "message": "a grep of external/iproute2 for IFA_LABEL seems to imply that you should prefer it if you have it?\n\n(man, i was hoping you\u0027d know where this stuff is all documented :-) )",
      "parentUuid": "9a1d200d_f96889fa",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19fed8a6_48abea5f",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T21:10:45Z",
      "side": 1,
      "message": "search for ifa_label through kernel cs finds:\n\nhttps://source.corp.google.com/search?q\u003dIFA_LABEL\u0026sq\u003drepo:prodkernel%2Fkernel%2Fupstream%2Ftorvalds%2Flinux-2.6%20branch:master%09\n\nie. basically only:\n\nhttps://source.corp.google.com/h/prodkernel/kernel/upstream/torvalds/linux-2.6/+/master:net/ipv4/devinet.c;l\u003d679;drc\u003d8a696a29c6905594e4abf78eaafcb62165ac61f1;bpv\u003d0;bpt\u003d1\n\nat *first glance* it looks like this is an ipv4 only feature - likely for eth0:1 style aliases which is some ancient ioctl-only way to handle multiple ip-s on interfaces via ioctl instead of netlink...\n\nit\u0027s actually likely the *wrong* thing from the point of view of most userspace nowadays??",
      "parentUuid": "7417f367_3768af9e",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f5c9ba_aad11708",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T21:12:59Z",
      "side": 1,
      "message": "(luckily the normally created labels are equal to interface names if you use ip cli to add extra ipv4 addresses, and I don\u0027t think existing android code uses the old ioctl address adding apis any more)",
      "parentUuid": "19fed8a6_48abea5f",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2cd733e_f5366fc0",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T21:21:15Z",
      "side": 1,
      "message": "I updated the comment...  this is imho still an improvement, but really this entire file should be redone...",
      "parentUuid": "d6f5c9ba_aad11708",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82634c80_52a5e6d1",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-29T21:36:20Z",
      "side": 1,
      "message": "\u003e this is imho still an improvement, but really this entire file should be redone...\n\nyeah, i believe you on both points --- i just don\u0027t know what the right version looks like.\n\ni wonder whether we should be doing GETADDR _or_ GETLINK? i think we\u0027re unique in trying to combine them? (that at least dodges the \"were the two consistent with each other?\" issue...)",
      "parentUuid": "c2cd733e_f5366fc0",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "890cee9f_7afbd17c",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T23:16:13Z",
      "side": 1,
      "message": "AFAICT you have to use both, and that\u0027s what \u0027ip addr\u0027 does.\n\nGETLINK doesn\u0027t return ip addresses (at all).\n[And you may not have selinux rights to use it.]\n\nGETADDR doesn\u0027t have interface names at all, and labels are not returned for ipv6 addresses.  I think (didn\u0027t check though) it doesn\u0027t return interface link state.\n\nThe system may potentially only have ipv6 addresses on some interfaces, so you\u0027ll never get a label mapping those ifindexes to names.\n\nGETADDR returns labels for ipv4 addresses, that may potentially be used as interface name [they\u0027re really aliases...], but are *not* guaranteed to be the \u0027correct\u0027 name for another address/ifindex pair.\n\nFor example you could have:\n\n[ifindex\u003d1] ifname\u003d\"lo\":\n  ipv6\u003d::1\n  ipv4\u003d127.0.0.1 label\u003dlo\n\n[ifindex\u003d2] ifname\u003d\"eth0\":\n  ipv4\u003d1.2.3.4 label\u003deth0:1\n  ipv4\u003d2.3.4.5 label\u003deth0\n  ipv4\u003d3.4.5.6 label\u003deth0:2\n  ipv6\u003d2000::\n\nThe correct interface name to return for \u00272000::\u0027 is eth0 not eth0:1 \n\nYou thus *must* use both (or use ioctl for mapping ifindex-\u003e{names,linkstate}):\n\nGETADDR to dump the addresses (along with their ifindex), then GETLINK to map the resulting ifindexes (where you didn\u0027t already get a label) to ifnames.  Then go back and (if getlink failed or you didn\u0027t run it), use ioctl() to fill in missing names, interface state, then delete anything with no name.\n\nThis works because the GETLINK is after the GETADDR, so if GETLINK doesn\u0027t return an interface, that simply means it was deleted, and the addresses associated with it should also just be deleted.\n\n[and yeah, the above still assumes GETLINK/GETADDR are atomic / not interrupted, in practice I don\u0027t think android really has to care about their being too many addresses/interfaces for the dumps to not fit in single atomic messages, provided the netlink socket\u0027s receive buffer is large enough - we shouldn\u0027t have more than a few dozen interfaces with a hundred or so ips]",
      "parentUuid": "82634c80_52a5e6d1",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d1e55a6_f48eaca7",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-29T23:20:31Z",
      "side": 1,
      "message": "okay, i _love_ this comment... don\u0027t worry about how large it is, just get it pasted in there!\n\n\u003e [and yeah, the above still assumes GETLINK/GETADDR are atomic / not interrupted, in practice I don\u0027t think android really has to care about their being too many addresses/interfaces for the dumps to not fit in single atomic messages, provided the netlink socket\u0027s receive buffer is large enough - we shouldn\u0027t have more than a few dozen interfaces with a hundred or so ips]\n\n(but isn\u0027t that still our best^Wleast worst theory for what $VENDOR saw that started this whole conversation? can _they_ repro? should we get a one-line logging change in so they can confirm/deny?)",
      "parentUuid": "890cee9f_7afbd17c",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11c23f59_9784b0cf",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-29T23:24:37Z",
      "side": 1,
      "message": "My theory is that what happens is:\nprivileged (getlink capable process) -\u003e getifaddrs() -\u003e GETLINK -\u003e (other thread/process/cpu: create an interface and add 1+ ipv6 addresses to it) -\u003e GETADDR -\u003e we see the new addresses, but fail to map it to the new interface, so the name stays null -\u003e crash",
      "parentUuid": "9d1e55a6_f48eaca7",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bafbbcf4_0389a530",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-26T21:33:21Z",
      "side": 1,
      "message": "most likely this should be done from resolve_or_remove_nameless_interfaces() since I *think* it only needs to be done for nameless ones... since a named one would have gotten the data from GETLINK",
      "range": {
        "startLine": 331,
        "startChar": 0,
        "endLine": 331,
        "endChar": 39
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a03c1ad4_529412a7",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:13:15Z",
      "side": 1,
      "message": "but can we tell whether we need to call this in resolve_or_remove_nameless_interfaces()?",
      "parentUuid": "bafbbcf4_0389a530",
      "range": {
        "startLine": 331,
        "startChar": 0,
        "endLine": 331,
        "endChar": 39
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}