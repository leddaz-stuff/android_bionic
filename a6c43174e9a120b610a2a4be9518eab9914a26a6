{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a9518988_13cf9989",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-26T21:30:36Z",
      "side": 1,
      "message": "This func is cheap to call, worst case it scans through list calling strlen() and seeing non-zero\n\nTechnically the 2nd function should be unconditional too...\nbut we\u0027d need to keep track of *whether* we need to call ioctls...",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a76637c3_61ad1505",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:14:15Z",
      "side": 1,
      "message": "seems reasonable, but do we want to ask the OEM to test with this first?",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b56a0ee_45f3dedd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:14:45Z",
      "side": 1,
      "message": "(and add the `Bug:` that motivated us to look at this code!)",
      "parentUuid": "a76637c3_61ad1505",
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3feb1825_c7b6a774",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:13:15Z",
      "side": 1,
      "message": "i think this adds confusion rather than clarifies --- you mean \"with addresses [that we haven\u0027t seen]\", but i think just \"...new interfaces might have showed up...\" makes your point clearer. (because it\u0027s the \"when\" that\u0027s important.)",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a3a69b2_31177325",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-27T00:21:29Z",
      "side": 1,
      "message": "no, actually the point is we call GETLINK then GETADDR\n\nGETLINK returns set of all interfaces (along with their names), thus getting us a ifindex-\u003eifname map\n\nGETADDR returns set of all addresses (along with the ifindex they are on), thus getting us a addr-\u003eifindex map\n\nthen we try to merge the two, but new interfaces w/ addresses might have\nshown up between GETLINK and GETADDR, thus there may be addr-\u003eifindex that don\u0027t have corresponding ifindex-\u003eifname\n\n--\n\nWe could reverse the order: first call GETADDR, then call GETLINK.\n\nNow interfaces could have vanished between GETADDR and GETLINK,\nso now we could just filter out anything without a name...\n\nBUT because GETLINK might fail due to selinux, we might not call it at all,\nso we still need the if_indextoname() backup path for non-priv users...",
      "parentUuid": "3feb1825_c7b6a774",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "386f384d_7f45f8d9",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:25:02Z",
      "side": 1,
      "message": "ah, in that case definitely say that explicitly, since my guess of what you were trying to say was wrong!",
      "parentUuid": "0a3a69b2_31177325",
      "range": {
        "startLine": 325,
        "startChar": 33,
        "endLine": 325,
        "endChar": 35
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bafbbcf4_0389a530",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-01-26T21:33:21Z",
      "side": 1,
      "message": "most likely this should be done from resolve_or_remove_nameless_interfaces() since I *think* it only needs to be done for nameless ones... since a named one would have gotten the data from GETLINK",
      "range": {
        "startLine": 331,
        "startChar": 0,
        "endLine": 331,
        "endChar": 39
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a03c1ad4_529412a7",
        "filename": "libc/bionic/ifaddrs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-27T00:13:15Z",
      "side": 1,
      "message": "but can we tell whether we need to call this in resolve_or_remove_nameless_interfaces()?",
      "parentUuid": "bafbbcf4_0389a530",
      "range": {
        "startLine": 331,
        "startChar": 0,
        "endLine": 331,
        "endChar": 39
      },
      "revId": "a6c43174e9a120b610a2a4be9518eab9914a26a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}