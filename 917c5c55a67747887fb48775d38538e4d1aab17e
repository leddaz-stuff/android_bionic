{
  "comments": [
    {
      "key": {
        "uuid": "0e1b056c_b6252618",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-01-05T21:50:45Z",
      "side": 1,
      "message": "Is there a reason you are using this instead of checking for __mips64__? It would make it easier to tell what\u0027s going on if you checked for mips64 explicitly.",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae0af911_be8aa141",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-05T22:39:57Z",
      "side": 1,
      "message": "No clear reason, taking my cue from glibc and linux kernel sources here. Both use ABI to distinguish this bit, presumably because the layout of this struct is not part of architecture spec.\n\nJust to clarify, the __mips64__ segment below was removed because:\n\n(a) gcc #defines __mips64 and not __mips64__\n\n(b) __mips64 is defined in addition to __mips__. Since __mips__ is checked earlier, the later #ifdef would never have expanded as written.",
      "parentUuid": "0e1b056c_b6252618",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e445558_cf3ebdfa",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-01-05T22:46:17Z",
      "side": 1,
      "message": "if you don\u0027t plan on fixing the existing __mips__/__mips64 mess (which would be my recommendation, given that r6 is a new ABI anyway), i think we should try to use __LP64__ to differentiate the two mipses.",
      "parentUuid": "ae0af911_be8aa141",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12ccc7b_911a7edf",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-05T23:36:34Z",
      "side": 1,
      "message": "__LP64__ will break n32 ABI, because that is LP32 mode on mips64 architecture; it needs the \u0027other\u0027 layout.\n\nIt won\u0027t fix the mess, but I will change this to use __mips64 as suggested.",
      "parentUuid": "8e445558_cf3ebdfa",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e1b056c_9c4ec905",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-01-05T23:42:56Z",
      "side": 1,
      "message": "i don\u0027t understand. why doesn\u0027t this work?\n\n  #elif defined(__mips__)\n\n  #if defined(__LP64__)\n  // mips64\n  #else\n  // mips32\n  #endif\n\n  #elif ...\n\nwe only support those two. nothing else exists on Android.",
      "parentUuid": "a12ccc7b_911a7edf",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12ccc7b_1c078544",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-06T03:08:48Z",
      "side": 1,
      "message": "This will cause n32 ABI to be built with the mips32 definition of the struct which is simply incorrect. Note that the difference between the 2 layouts is not limited to field-sizes or padding. The order of fields is different; some fields are present in one layout but not in the other. As such, this is not a LP32 vs. LP64 issue - the size of longs/pointers is not relevant to which layout must be chosen.\n\n__mips64 does accurately captures the choice, as does _ABIO32. OTOH, the definition is shared between the C library and the kernel, in the sense that both have binary compatible definitions of this struct. I initially selected the ABI for the C library simply to reflect what the kernel was already doing. glibc and linux have agreed on a certain method (namely the ABI) as the discriminator, bionic can use any other method that happens to work. If we\u0027re sure that Android does not support and does not intend to support n32 ABI for mips, then LP64 will also work; for clarity of intention, we should then put a #error \"unsupported\" to catch the n32 case.",
      "parentUuid": "0e1b056c_9c4ec905",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e3065e8_342c7636",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-01-06T05:44:09Z",
      "side": 1,
      "message": "yeah, there won\u0027t be another 32-bit ABI, just the one we already have.\n\ni don\u0027t think we\u0027ll want to use __mips64 much because __mips__ is defined for both, which -- as you pointed out -- makes __mips__ and __mips64 order-dependent. __mips__ on the outside and the __LP64__ inside seems like the least error-prone choice going forward.",
      "parentUuid": "a12ccc7b_1c078544",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12ccc7b_fc82b1db",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-06T16:02:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e3065e8_342c7636",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e26ddb6_edb2a505",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-01-05T22:43:55Z",
      "side": 1,
      "message": "(format this like the one above.)",
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae0af911_6caa2366",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-06T16:02:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e26ddb6_edb2a505",
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae3f59b4_f335eaf6",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-01-05T22:43:55Z",
      "side": 1,
      "message": "uint32_t? (we\u0027re trying to move to explicitly-sized types for clarity.)",
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae583942_88faf7ca",
        "filename": "libc/include/sys/ucontext.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1063673
      },
      "writtenOn": "2015-01-06T16:02:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae3f59b4_f335eaf6",
      "revId": "917c5c55a67747887fb48775d38538e4d1aab17e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}