{
  "comments": [
    {
      "key": {
        "uuid": "eab3924f_2d9baced",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-12-19T19:01:52Z",
      "side": 1,
      "message": "Can\u0027t you use std::numeric_limits\u003cT\u003e::min() and std::numeric_limits\u003cT\u003e::max() for this? That way it can be derived instead of explicit.",
      "range": {
        "startLine": 36,
        "startChar": 22,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008fbcd1_93b58b74",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-12-19T19:07:56Z",
      "side": 1,
      "message": "no, because i\u0027m inside bionic.",
      "parentUuid": "eab3924f_2d9baced",
      "range": {
        "startLine": 36,
        "startChar": 22,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0c6e0b8_89572034",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-12-19T19:14:01Z",
      "side": 1,
      "message": "Oops, forgot you can\u0027t use those kind of stl constructs in bionic.",
      "parentUuid": "008fbcd1_93b58b74",
      "range": {
        "startLine": 36,
        "startChar": 22,
        "endLine": 36,
        "endChar": 34
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5317c56_f1925a6d",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-12-19T19:01:52Z",
      "side": 1,
      "message": "nullptr?",
      "range": {
        "startLine": 39,
        "startChar": 18,
        "endLine": 39,
        "endChar": 19
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f09bac74_2be22b95",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-12-19T19:07:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5317c56_f1925a6d",
      "range": {
        "startLine": 39,
        "startChar": 18,
        "endLine": 39,
        "endChar": 19
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40f83630_0133f468",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-12-19T19:01:52Z",
      "side": 1,
      "message": "Is there a reason this isn\u0027t casting directly to an int? Same with the cast below.",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 33
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae995415_12a589c9",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-12-19T19:07:56Z",
      "side": 1,
      "message": "didn\u0027t know, so left it as it was.",
      "parentUuid": "40f83630_0133f468",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 33
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55f1e2ad_e96814e3",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2017-12-19T20:52:07Z",
      "side": 1,
      "message": "isspace of negative values generally has UB. (Apparently isspace(EOF) is an exception, which I didn\u0027t know about.)\n\n\"The c argument is an int, the value of which the application shall ensure is a character representable as an unsigned char or equal to the value of the macro EOF. If the argument has any other value, the behavior is undefined.\"\n\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/isspace.html",
      "parentUuid": "ae995415_12a589c9",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 33
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db374f28_e66a1ade",
        "filename": "libc/bionic/strtol.cpp",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-12-19T21:59:03Z",
      "side": 1,
      "message": "(interesting. i didn\u0027t know that. i\u0027ll probably remove this when i come back for my next change, since it\u0027s all about isspace anyway...)",
      "parentUuid": "55f1e2ad_e96814e3",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 33
      },
      "revId": "b230905ff87564e2c64b65ed8f8d2c32bc7d16a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}