{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5bac9341_39fece83",
        "filename": "libc/include/math.h",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-02-08T16:38:47Z",
      "side": 1,
      "message": "i don\u0027t think so? these can be the _empty_ string, but they can\u0027t be NULL, can they?",
      "range": {
        "startLine": 277,
        "startChar": 23,
        "endLine": 277,
        "endChar": 52
      },
      "revId": "3df9ea8eead0fad6f3448f99132d4ef53aa96b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fa74b29_d044f3bf",
        "filename": "libc/include/math.h",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-02-08T18:02:37Z",
      "side": 1,
      "message": "https://man7.org/linux/man-pages/man3/nan.3.html\n`The argument tagp is used in an unspecified manner.  On IEEE 754\nsystems, there are many representations of NaN, and tagp selects\none.  On other systems it may do nothing.`\n\nI also check the source code of nan().\nhttp://cs/nest/platform/gcc-arm-none-eabi-4_8-2013q4-20131204/master/src/newlib-nano-2.0/newlib/libm/common/s_nan.c;l\u003d40;rcl\u003df46bce356f063f0233cb63f918f40716ddbec8e3 \nlike this. I am not sure whether the input name `unused` is too confused. That\u0027s why I make it `__BIONIC_COMPLICATED_NULLNESS`",
      "parentUuid": "5bac9341_39fece83",
      "range": {
        "startLine": 277,
        "startChar": 23,
        "endLine": 277,
        "endChar": 52
      },
      "revId": "3df9ea8eead0fad6f3448f99132d4ef53aa96b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44630d03_c55b8aa0",
        "filename": "libc/include/math.h",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-02-08T18:14:40Z",
      "side": 1,
      "message": "\u003e On IEEE 754 systems, there are many representations of NaN, and tagp selects one.\n\nwe\u0027re IEEE 754. (as is basically everything these days. but standards often try to support \"all possible hardware\" rather than what\u0027s actually real. the C standard only just admitted that all machines are two\u0027s-complement this decade!)\n\n\u003e I also check the source code of nan().\n\nthat\u0027s not our nan(). that\u0027s some random embedded systems crap. those things rarely follow the rules anyway!\n\n(in general, if you\u0027re looking for bionic, you probably want `file:^bionic/` in any code search you do. or just grep in bionic/ if you\u0027re on the command line.)\n\nhere\u0027s the real source: https://cs.android.com/android/platform/superproject/+/master:bionic/libm/upstream-freebsd/lib/msun/src/s_nan.c\n\n-*-\n\nthere is of course a philosophical question here: \"are we annotating what ISO C/POSIX guarantees, or what our system actually does?\". but personally -- unless we find cases where we\u0027re _wrong_ [in which case, we should fix the bug and try again] -- i think the most useful thing for our users is to document _bionic_. the kind of people who care more about the standards (and they exist; the more sensible of them because they\u0027re trying to write code that works everywhere) are going to be helped by us doing this anyway. in this case, for example, even though their `nan(NULL)` call might work on some tiny embedded system using newlib (the libc you linked to), it would crash at run-time on Android, so our annotation will have saved them by pointing out at build time that they\u0027ve made an incorrect assumption.\n\n(because remember --- POSIX implies that the argument _may_ be unused, but it doesn\u0027t say that NULL is valid on systems that _do_ use the argument, like Android/iOS/glibc.)",
      "parentUuid": "7fa74b29_d044f3bf",
      "range": {
        "startLine": 277,
        "startChar": 23,
        "endLine": 277,
        "endChar": 52
      },
      "revId": "3df9ea8eead0fad6f3448f99132d4ef53aa96b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dff95cf_dca63d80",
        "filename": "libc/include/math.h",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1890456
      },
      "writtenOn": "2023-02-08T19:30:56Z",
      "side": 1,
      "message": "I see. So we should care more what our system actually does, or in other words, we should take the intersection of what ISO C/POSIX guarantees and what our system to make sure everything works fine/nothing crashes.",
      "parentUuid": "44630d03_c55b8aa0",
      "range": {
        "startLine": 277,
        "startChar": 23,
        "endLine": 277,
        "endChar": 52
      },
      "revId": "3df9ea8eead0fad6f3448f99132d4ef53aa96b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}